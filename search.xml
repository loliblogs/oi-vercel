<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>solution-code2869</title>
      <link href="/oi/post/solution-code2869/"/>
      <url>/oi/post/solution-code2869/</url>
      
        <content type="html"><![CDATA[<p>有顺序的树链剖分模板题，注意Node中ans初始值为0（否则相当于空序列中有一种颜色）并且Lval和Rval的值不能存在于序列之中</p><span id="more"></span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Ls (v&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Rs ((v&lt;&lt;1)|1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fpos fpos233</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> Lval,Rval,ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="title">Node</span><span class="params">()</span>:Lval(<span class="number">0</span>),Rval(<span class="number">0</span>),ans(<span class="number">0</span>)&#123;</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="title">Node</span><span class="params">(<span class="type">int</span> val)</span>:Lval(val),Rval(val),ans(<span class="number">1</span>)&#123;</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Tree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> L,R,lazy;</span><br><span class="line">Node Lval,Rval;</span><br><span class="line">&#125;T[<span class="number">400005</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> to,next;</span><br><span class="line">&#125;e[<span class="number">200005</span>];</span><br><span class="line"><span class="type">int</span> a[<span class="number">100005</span>],d[<span class="number">100005</span>],h[<span class="number">100005</span>],pre[<span class="number">100005</span>],siz[<span class="number">100005</span>],vson[<span class="number">100005</span>],top[<span class="number">100005</span>],pos[<span class="number">100005</span>],fpos[<span class="number">100005</span>],cnt,sign;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Addedge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[++cnt]=(Edge)&#123;y,h[x]&#125;;h[x]=cnt;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> dep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,y;</span><br><span class="line">d[x]=dep;siz[x]=<span class="number">1</span>;</span><br><span class="line">vson[x]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=h[x];i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">y=e[i].to;</span><br><span class="line"><span class="keyword">if</span>(y==pre[x])<span class="keyword">continue</span>;</span><br><span class="line">pre[y]=x;</span><br><span class="line"><span class="built_in">dfs1</span>(y,dep+<span class="number">1</span>);</span><br><span class="line">siz[x]+=siz[y];</span><br><span class="line"><span class="keyword">if</span>(vson[x]==<span class="number">-1</span>||siz[vson[x]]&lt;siz[y])vson[x]=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> sp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,y;</span><br><span class="line">pos[x]=++sign;top[x]=sp;</span><br><span class="line">fpos[sign]=x;</span><br><span class="line"><span class="keyword">if</span>(vson[x]!=<span class="number">-1</span>)<span class="built_in">dfs2</span>(vson[x],sp);</span><br><span class="line"><span class="keyword">for</span>(i=h[x];i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">y=e[i].to;</span><br><span class="line"><span class="keyword">if</span>(y==pre[x]||y==vson[x])<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs2</span>(y,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Node <span class="keyword">operator</span>+(<span class="type">const</span> Node&amp; a,<span class="type">const</span> Node&amp; b)</span><br><span class="line">&#123;</span><br><span class="line">Node ans;</span><br><span class="line">ans.Lval=a.Lval;</span><br><span class="line">ans.Rval=b.Rval;</span><br><span class="line">ans.ans=a.ans+b.ans-(a.Rval==b.Lval);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T[v].Lval=T[Ls].Lval+T[Rs].Lval;</span><br><span class="line">T[v].Rval=T[Rs].Rval+T[Ls].Rval;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!T[v].lazy)<span class="keyword">return</span>;</span><br><span class="line">T[Ls].Lval=T[Ls].Rval=T[Rs].Lval=T[Rs].Rval=<span class="built_in">Node</span>(T[v].lazy);</span><br><span class="line">T[Ls].lazy=T[Rs].lazy=T[v].lazy;</span><br><span class="line">T[v].lazy=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Build</span><span class="params">(<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T[v].L=L;T[v].R=R;</span><br><span class="line"><span class="keyword">if</span>(L==R)</span><br><span class="line">&#123;</span><br><span class="line">T[v].Lval=T[v].Rval=<span class="built_in">Node</span>(a[fpos[L]]);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=(L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">Build</span>(L,mid,Ls);</span><br><span class="line"><span class="built_in">Build</span>(mid+<span class="number">1</span>,R,Rs);</span><br><span class="line"><span class="built_in">pushup</span>(v);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Modify</span><span class="params">(<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> val,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L&gt;T[v].R||R&lt;T[v].L)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=T[v].L&amp;&amp;R&gt;=T[v].R)</span><br><span class="line">&#123;</span><br><span class="line">T[v].Lval=T[v].Rval=<span class="built_in">Node</span>(val);</span><br><span class="line">T[v].lazy=val;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(v);</span><br><span class="line"><span class="built_in">Modify</span>(L,R,val,Ls);</span><br><span class="line"><span class="built_in">Modify</span>(L,R,val,Rs);</span><br><span class="line"><span class="built_in">pushup</span>(v);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Node <span class="title">QueryL</span><span class="params">(<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L==T[v].L&amp;&amp;R==T[v].R)<span class="keyword">return</span> T[v].Lval;</span><br><span class="line"><span class="type">int</span> mid=(T[v].L+T[v].R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">pushdown</span>(v);</span><br><span class="line"><span class="keyword">if</span>(R&lt;=mid)<span class="keyword">return</span> <span class="built_in">QueryL</span>(L,R,Ls);</span><br><span class="line"><span class="keyword">if</span>(L&gt;mid)<span class="keyword">return</span> <span class="built_in">QueryL</span>(L,R,Rs);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">QueryL</span>(L,mid,Ls)+<span class="built_in">QueryL</span>(mid+<span class="number">1</span>,R,Rs);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Node <span class="title">QueryR</span><span class="params">(<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L==T[v].L&amp;&amp;R==T[v].R)<span class="keyword">return</span> T[v].Rval;</span><br><span class="line"><span class="type">int</span> mid=(T[v].L+T[v].R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">pushdown</span>(v);</span><br><span class="line"><span class="keyword">if</span>(R&lt;=mid)<span class="keyword">return</span> <span class="built_in">QueryR</span>(L,R,Ls);</span><br><span class="line"><span class="keyword">if</span>(L&gt;mid)<span class="keyword">return</span> <span class="built_in">QueryR</span>(L,R,Rs);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">QueryR</span>(mid+<span class="number">1</span>,R,Rs)+<span class="built_in">QueryR</span>(L,mid,Ls);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Modify</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(d[top[x]]&lt;d[top[y]])<span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="built_in">Modify</span>(pos[top[x]],pos[x],val,<span class="number">1</span>);</span><br><span class="line">x=pre[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(d[x]&gt;d[y])<span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="built_in">Modify</span>(pos[x],pos[y],val,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Node <span class="title">Query</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node ansL,ansR;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(d[top[x]]&gt;=d[top[y]])</span><br><span class="line">&#123;</span><br><span class="line">ansL=ansL+<span class="built_in">QueryR</span>(pos[top[x]],pos[x],<span class="number">1</span>);</span><br><span class="line">x=pre[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ansR=<span class="built_in">QueryL</span>(pos[top[y]],pos[y],<span class="number">1</span>)+ansR;</span><br><span class="line">y=pre[top[y]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(d[x]&gt;d[y])<span class="keyword">return</span> ansL+<span class="built_in">QueryR</span>(pos[y],pos[x],<span class="number">1</span>)+ansR;</span><br><span class="line"><span class="keyword">return</span> ansL+<span class="built_in">QueryL</span>(pos[x],pos[y],<span class="number">1</span>)+ansR;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> siz=<span class="number">40</span>&lt;&lt;<span class="number">20</span>;<span class="comment">//40M</span></span><br><span class="line"><span class="comment">//__asm__ (&quot;movl %0,%%esp\n&quot;::&quot;r&quot;((char*)malloc(siz)+siz));//调试用这个</span></span><br><span class="line">__asm__ (<span class="string">&quot;movq %0,%%rsp\n&quot;</span>::<span class="string">&quot;r&quot;</span>((<span class="type">char</span>*)<span class="built_in">malloc</span>(siz)+siz));<span class="comment">//提交用这个</span></span><br><span class="line"><span class="type">int</span> i,n,m,x,y,v,ch;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line"><span class="built_in">Addedge</span>(x,y);</span><br><span class="line"><span class="built_in">Addedge</span>(y,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">Build</span>(<span class="number">1</span>,sign,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(ch=<span class="built_in">getchar</span>())<span class="keyword">if</span>(ch==<span class="string">&#x27;C&#x27;</span>||ch==<span class="string">&#x27;Q&#x27;</span>)<span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line"><span class="keyword">if</span>(ch==<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;v);<span class="built_in">Modify</span>(x,y,v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">Query</span>(x,y).ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 树链剖分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>useful-codes</title>
      <link href="/oi/post/useful-codes/"/>
      <url>/oi/post/useful-codes/</url>
      
        <content type="html"><![CDATA[<h2 id="手工栈"><a href="#手工栈" class="headerlink" title="手工栈"></a>手工栈</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> siz=<span class="number">40</span>&lt;&lt;<span class="number">20</span>;<span class="comment">//40M</span></span><br><span class="line">__asm__(<span class="string">&quot;movl %0,%%esp\n&quot;</span>::<span class="string">&quot;r&quot;</span>((<span class="type">char</span>*)<span class="built_in">malloc</span>(siz)+siz));<span class="comment">//windows用这个</span></span><br><span class="line">__asm__(<span class="string">&quot;movq %0,%%rsp\n&quot;</span>::<span class="string">&quot;r&quot;</span>((<span class="type">char</span>*)<span class="built_in">malloc</span>(siz)+siz));<span class="comment">//linux用这个</span></span><br></pre></td></tr></table></figure><p>记住要 <code>exit(0)</code></p><span id="more"></span><h2 id="fread"><a href="#fread" class="headerlink" title="fread"></a>fread</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="fwrite"><a href="#fwrite" class="headerlink" title="fwrite"></a>fwrite</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>独木桥</title>
      <link href="/oi/post/solution-code2260/"/>
      <url>/oi/post/solution-code2260/</url>
      
        <content type="html"><![CDATA[<blockquote><p>你在桥上看风景，看风景的人在轰炸机上看着你。</p></blockquote><p>一句话：两个人相遇后可以看做互换身份然后走和没相遇直接穿过去是一样的</p><span id="more"></span><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h3><p>战争已经进入到紧要时间。你是运输小队长，正在率领运输部队向前线运送物资。运输任务像做题一样的无聊。你希望找些刺激，于是命令你的士兵们到前方的一座独木桥上欣赏风景，而你留在桥下欣赏士兵们。士兵们十分愤怒，因为这座独木桥十分狭窄，只能容纳$1$个人通过。假如有$2$个人相向而行在桥上相遇，那么他们$2$个人将无妨绕过对方，只能有$1$个人回头下桥，让另一个人先通过。但是，可以有多个人同时呆在同一个位置。</p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>突然，你收到从指挥部发来的信息，敌军的轰炸机正朝着你所在的独木桥飞来！为了安全，你的部队必须撤下独木桥。独木桥的长度为$L$，士兵们只能呆在坐标为整数的地方。所有士兵的速度都为$1$，但一个士兵某一时刻来到了坐标为$0$或$L+1$的位置，他就离开了独木桥。<br>每个士兵都有一个初始面对的方向，他们会以匀速朝着这个方向行走，中途不会自己改变方向。但是，如果两个士兵面对面相遇，他们无法彼此通过对方，于是就分别转身，继续行走。转身不需要任何的时间。<br>由于先前的愤怒，你已不能控制你的士兵。甚至，你连每个士兵初始面对的方向都不知道。因此，你想要知道你的部队最少需要多少时间就可能全部撤离独木桥。另外，总部也在安排阻拦敌人的进攻，因此你还需要知道你的部队最多需要多少时间才能全部撤离独木桥。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行：一个整数$L$，表示独木桥的长度。桥上的坐标为$1\cdots L$<br>第二行：一个整数$N$，表示初始时留在桥上的士兵数目<br>第三行：有$N$个整数，分别表示每个士兵的初始坐标。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>只有一行，输出$2$个整数，分别表示部队撤离独木桥的最小时间和最大时间。$2$个整数由一个空格符分开。</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">2</span><br><span class="line">1 3</span><br></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 4</span><br></pre></td></tr></table></figure><h3 id="说明-提示"><a href="#说明-提示" class="headerlink" title="说明&#x2F;提示"></a>说明&#x2F;提示</h3><p>初始时，没有两个士兵同在一个坐标。<br>数据范围$N\le L\le 5000$。</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,n,m,x,ans1=<span class="number">0</span>,ans2=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;m,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">ans1=<span class="built_in">max</span>(ans1,<span class="built_in">min</span>(x,m-x+<span class="number">1</span>));</span><br><span class="line">ans2=<span class="built_in">max</span>(ans2,<span class="built_in">max</span>(x,m-x+<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,ans1,ans2);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[FJOI2007] 轮状病毒</title>
      <link href="/oi/post/solution-code2422/"/>
      <url>/oi/post/solution-code2422/</url>
      
        <content type="html"><![CDATA[<p>由于内容过长、公式较多，暂时将内容隐藏，请公式恐惧症们做好心理准备。</p><span id="more"></span><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>轮状病毒有很多变种，所有轮状病毒的变种都是从一个轮状基产生的。一个 $N$ 轮状基由圆环上 $N$ 个不同的基原子<br>和圆心处一个核原子构成的，$2$ 个原子之间的边表示这 $2$ 个原子之间的信息通道。如下图所示</p><img src="/oi/post/solution-code2422/1.png" class="" title="1.png"><p>$N$ 轮状病毒的产生规律是在一个 $N$ 轮状基中删去若干条边，使得各原子之间有唯一的信息通道，例如共有 $16$ 个不<br>同的 $3$ 轮状病毒，如下图所示：</p><img src="/oi/post/solution-code2422/2.png" class="" title="2.png"><p>现给定 $N (N\le 100)$，编程计算有多少个不同的 $N$ 轮状病毒</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>第一行有 $1$ 个正整数 $N$</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>计算出的不同的 $N$ 轮状病毒数输出</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">16</span><br></pre></td></tr></table></figure><h2 id="法一-行列式"><a href="#法一-行列式" class="headerlink" title="法一: 行列式"></a>法一: 行列式</h2><p>转载自 <a href="http://vfleaking.blog.163.com/blog/static/17480763420119685112649/">vfleaking</a>，<a href="/oi/post/solution-code2422/bakup.png" title="题解备份">题解备份</a><br>对于新手还是建议去看看基尔霍夫矩阵，这一篇 <a href="https://wenku.baidu.com/view/0c086741be1e650e52ea990e.html">论文</a> 挺不错的<br>用基尔霍夫矩阵使用高斯消元解行列式，时间复杂度 $O(n^3)$ 似乎可以 AC。<br>首先行列式有很多性质，第 $a$ 行 $\times k$ 加到第 $b$ 行上去，行列式的值不变。<br>三角行列式的值等于对角线元素之积。<br>第 $a$ 行与第 $b$ 行互换，行列式的值取反。<br>常数 $\times$ 行列式，可以把常数乘到某一行里去。<br>如果你行列式不是很熟，建议先搜搜行列式～不然下面会看晕～</p><p>其实如果你仔细观察矩阵，可以发现它是这样的：（消去了病毒中央）</p>$\begin{vmatrix}3&-1&0&0&\cdots&0&0&0&-1\\-1&3&-1&0&\cdots&0&0&0&0\\0&-1&3&-1&\cdots&0&0&0&0\\0&0&-1&3&\cdots&0&0&0&0\\0&0&0&-1&\cdots&0&0&0&0\\\vdots&\vdots&\vdots&\vdots&\ddots&\vdots&\vdots&\vdots&\vdots\\0&0&0&0&\cdots&3&-1&0&0\\0&0&0&0&\cdots&-1&3&-1&0\\0&0&0&0&\cdots&0&-1&3&-1\\-1&0&0&0&\cdots&0&0 &-1&3\end{vmatrix}$<p>那么我们现在对行列式进行变换，我们把第 $1$ 行与第 $2$ 行交换，再把第 $2$ 行与第 $3$ 行交换……，再把第 $n-1$ 行与第 $n$ 行变换，得到新的行列式：</p>$\begin{vmatrix}-1&3&-1&0&\cdots&0&0&0&0\\0&-1&3&-1&\cdots&0&0&0&0\\0&0&-1&3&\cdots&0&0&0&0\\0&0&0&-1&\cdots&0&0&0&0\\\vdots&\vdots&\vdots&\vdots&\ddots&\vdots&\vdots&\vdots&\vdots\\0&0&0&0&\cdots&3&-1&0&0\\0&0&0&0&\cdots&-1&3&-1&0\\0&0&0&0&\cdots&0&-1&3&-1\\-1&0&0&0&\cdots&0&0 &-1&3\\3&-1&0&0&\cdots&0&0&0&-1\end{vmatrix}$<p>这个行列式跟一开始的那个行列式的值不一定相等。<br>因为我们是通过 $n-1$ 次交换行的操作得到的，<br>为了说话方便我们称一开始的行列式为 $A$，上面刚写的行列式为 $B$<br>那么由行列式性质得：$A&#x3D;(-1)^{n-1}\cdot B$<br>现在就可以正大光明地处理 $B$ 了～</p><p>利用行列式性质，来手算这个行列式。之所以刚才有那么一步，就是为了方便手算。<br>因为观察 $B$ 矩阵，发现就只剩下左下角的 $-1$、$3$、$-1$ 三个倒霉了。</p>$\begin{matrix}\text{倒数第二行：}&-1&0&0&0&\cdots&0&0 &-1&3\\\text{用第一行的：}&-1&3&-1&0&\cdots&0&0&0&0\\\text{乘以}-1\text{ 来消：}&0&-3&1&0&\cdots&0&0 &-1&3\\\text{再用第二行：}&0&-1&3&-1&\cdots&0&0&0&0\\\text{乘以}-3\text{ 来消：}&0&0&-8&3&\cdots&0&0 &-1&3\end{matrix}$<p>这样就有了初步感觉了～</p><p>现在把这个过程一般化：</p>$\begin{matrix}\text{第 }k\text{ 个和第 }k+1\text{ 个：}&0&0&\cdots&F(k)&G(k)&0&0&\cdots&-1&3\\\text{总能找到上面的某一行}&0&0&\cdots&-1\quad&3~~~&-1&0&\cdots&0&0\\\text{乘以 }F(k)\text{ 来消：}&0&0&\cdots&0&F(k+1)&G(k+1)&0&\cdots&-1&3\\\end{matrix}$<p>于是得到：</p>$\begin{cases}F(k+1)=G(k)+3F(k)\\G(k+1)=-F(k)\end{cases}$<p>整合一下：$F(k+1)&#x3D;3F(k)-F(k-1)$<br>从初始的行和消了一次之后的行中取得边界条件：$F(1)&#x3D;-1,F(2)&#x3D;-3$<br>最终一定会变为下面这种情况：</p>$\begin{matrix}\text{倒数第二行：}&0&0&0&0&\cdots&F(n-3)&G(n-3)&-1&3\\\text{用倒数第四行：}&0&0&0&0&\cdots&-1&3&-1&0\\\text{乘以 }F(n - 3)\text{ 来消：}&0&0&0&0&\cdots&0&F(n-2)&G(n-2)-1&3\\\text{用倒数第三行：}&0&0&0&0&\cdots&0&-1&3&-1\\\text{乘以 }F(n - 2)\text{ 来消：}&0&0&0&0&\cdots&0&0&F(n-1)-1&G(n-1)+3\end{matrix}$<p>好现在搞定了倒数第二行，来看看成果：$(f&#x3D;F(n-1)-1,g&#x3D;G(n-1)+3)$</p>$\begin{vmatrix}-1&3&-1&0&\cdots&0&0&0&0\\0&-1&3&-1&\cdots&0&0&0&0\\0&0&-1&3&\cdots&0&0&0&0\\0&0&0&-1&\cdots&0&0&0&0\\\vdots&\vdots&\vdots&\vdots&\ddots&\vdots&\vdots&\vdots&\vdots\\0&0&0&0&\cdots&3&-1&0&0\\0&0&0&0&\cdots&-1&3&-1&0\\0&0&0&0&\cdots&0&-1&3&-1\\0&0&0&0&\cdots&0&0 &f&g\\3&-1&0&0&\cdots&0&0&0&-1\end{vmatrix}$<p>好，现在来搞倒数第一行。<br>和倒数第二行的方法是类似的。<br>再设函数 $H(k)$ 和 $I(k)$，意义与 $F(k)$、$G(k)$ 类似,得：</p>$\begin{cases}H(k+1)=I(k)+3H(k)\\I(k+1)=-H(k)\end{cases}$<p>其实跟 $F$、$G$的递推式是一样的我会乱说？$H(k+1)&#x3D;3H(k)-H(k-1)$<br>边界条件是：$H(1)&#x3D;3,H(2)&#x3D;8$<br>最后使劲搞一搞，倒数第一行就成了：</p>$\begin{matrix}0&0&0&0&0&\cdots&0&0&H(n - 1)&I(n - 1)-1\end{matrix}$<p>再来看成果：$(h&#x3D;H(n-1),i&#x3D;I(n-1)-1)$</p>$\begin{vmatrix}-1&3&-1&0&\cdots&0&0&0&0\\0&-1&3&-1&\cdots&0&0&0&0\\0&0&-1&3&\cdots&0&0&0&0\\0&0&0&-1&\cdots&0&0&0&0\\\vdots&\vdots&\vdots&\vdots&\ddots&\vdots&\vdots&\vdots&\vdots\\0&0&0&0&\cdots&3&-1&0&0\\0&0&0&0&\cdots&-1&3&-1&0\\0&0&0&0&\cdots&0&-1&3&-1\\0&0&0&0&\cdots&0&0 &f&g\\0&0&0&0&\cdots&0&0&h&i\end{vmatrix}$<p>用倒数第二行来消倒数第一行，得：</p>$\begin{matrix}0&0&0&0&\cdots&0&0&0&i-g\cdot \frac hf )\end{matrix}$<p>现在这个行列式已经是三角行列式了，它的值就是对角线元素之积。<br>于是：$B &#x3D;(-1)\times (-1)\times (-1)\times \cdots\times f(i-g\cdot \frac hf )$<br>一共有 $n-2$ 个 $-1$<br>如前文所述：$A&#x3D;(-1)^{n-1}B$<br>又因为：$B&#x3D;(-1)^{n-2}(f\cdot i-g\cdot h)$<br>于是有：$A&#x3D;(-1)^{2n-3}(f\cdot i-g\cdot h)&#x3D;-f\cdot i+g\cdot h$</p><p>带入 $f$、$g$、$h$、$i$ 的值得：<br>$A&#x3D;-(F(n-1)-1)(I(n-1)-1)+(G(n-1)+3)H(n-1)$<br>带入 $H$、$I$ 的值：<br>$A&#x3D;-(F(n-1)-1)(-H(n-2)-1)+(-F(n-2)+3)H(n-1)$<br>然后再展开……回忆下 $F$、$H$ 的递推式</p>$\begin{align*}A&=F(n-1)H(n-2)+F(n-1)-H(n-2)-1-F(n-2)H(n-1)+3H(n-1)\\&=H(n)+F(n-1)+F(n-1)H(n-2)-F(n-2)H(n-1)-1\\&=H(n)+F(n-1)+\begin{vmatrix}F(n-1) &H(n-1)\\F(n-2) &H(n-2)\end{vmatrix}-1\end{align*}$<p>发现不能化简了？<br>没关系！在行列式上动动手脚吧！</p><h3 id="FH-定理"><a href="#FH-定理" class="headerlink" title="FH 定理"></a>FH 定理</h3><p>对于任意大于 $2$ 的 $k$ 有：</p>$\begin{vmatrix}F(k-1) &H(k-1)\\F(k-2) &H(k-2)\end{vmatrix}=\begin{vmatrix}F(2) &H(2)\\F(1) &H(1)\end{vmatrix}$<p><strong>证明</strong>：<br>对于行列式：$\begin{vmatrix}F(k-1) &H(k-1)\\F(k-2) &H(k - 2)\end{vmatrix}$<br>把行列式最下面的行取反，则行列式的值取反：$-\begin{vmatrix}F(k-1) &H(k-1)\\-F(k-2) &-H(k-2)\end{vmatrix}$<br>把行列式的上面的行乘以 $3$ 加到下面去：$-\begin{vmatrix}F(k-1) &H(k-1)\\3F(k-1)-F(k-2) &3H(k-1)-H(k-2)\end{vmatrix}$<br>特意构造的递推式出现了：$-\begin{vmatrix}F(k-1) &H(k-1)\\F(k) &H(k)\end{vmatrix}$<br>有点眉目了~ 把第一行与第二行调换位置，行列式的值取反：$\begin{vmatrix}F(k) &H(k)\\F(k-1) &H(k-1)\end{vmatrix}$<br>一目了然，这是 <code>k++</code> 后的行列式的样子。（ <strong>pascal同学早日转C++</strong> ）<br>那么立即推出：$\begin{vmatrix}F(k-1) &H(k-1)\\F(k-2) &H(k-2)\end{vmatrix}=\begin{vmatrix}F(2) &H(2)\\F(1) &H(1)\end{vmatrix}$<br>FH 定理得证。</p><p>利用 FH 定理，把 $F(1)&#x3D;-1,F(2)&#x3D;-3,H(1)&#x3D;3,H(2)&#x3D;8$带入：$\begin{vmatrix}F(n-1) &H(n-1)\\F(n-2) &H(n-2)\end{vmatrix}=-1$</p><p>于是就爽了嘛！</p>$\begin{align*}\therefore A&=H(n)+F(n-1)+(-1)-1\\&=H(n)+F(n-1)-2\end{align*}$<p>进一步我们发现……<br>设 $R(n)&#x3D;H(n)+F(n-1)-2$<br>那么立即有：</p>$\begin{align*}R(n)&=3H(n-1)-H(n-2)+3F(n-2)-F(n-3)-2\\&= 3(R(n-1)+2)-(R(n-2)+2)-2\\&= 3R(n-1)-R(n-2)+2\end{align*}$<p>所以，轮状病毒的方案数满足递推式 $F(n)&#x3D;3F(n-1)-F(n-2)+2$ ，其中 $F(1)&#x3D;1,F(2)&#x3D;5$<br>然后随手写一个高精度就可以过了～</p><h2 id="法二：DP"><a href="#法二：DP" class="headerlink" title="法二：DP"></a>法二：DP</h2><p>转载自 <a href="https://www.luogu.org/blog/boshi/solution-p2144">boshi</a><br>如果用 $f[x]$ 表示加入了 $x$ 个周围的点后的方案数，我们首先想到的递推式是：$f[i]&#x3D;\sum_{j&#x3D;1}^i f[i-j]\cdot j$<br>解释：最后加入的 $j$ 个点每个都可能与中心点连边，将所有方案数累加即可。<br>但是，第一个点永远不会与第 $n$ 个点连边，因此方案数统计并不准确。<br>我们再设：$g[i]&#x3D;\sum_{j&#x3D;2}^i f[i-j]\cdot j\cdot (j-1)$<br>解释：如果有 $j$ 个周围的点连成一条，且跨越了 $1$ 和 $n$，我们将所有这样的情况累加到答案中去。如果这样的点有 $j$ 个，剩下的点肯定不与这 $j$ 个点相连，所以连边方案数就是 $f[i-j]$，这 $j$ 个点有 $(j-1)$ 种选法(跨越 $1$ 和 $n$ )，与中心点连边的方案数是 $j$ ，根据乘法原理，答案要累加 $f[i-j]\cdot j\cdot (j-1)$ 。<br>这样的 <code>f[n]+g[n]</code> 就是我们要求的轮状病毒的数量。</p><p>下面我们思考如何快速求出 $f$ 和 $g$。</p><h3 id="多阶差分"><a href="#多阶差分" class="headerlink" title="多阶差分"></a>多阶差分</h3><p>首先分析 $f[i]$。如果我们可以求出所有 $f[i-j]\cdot j$ 的前缀和，这个问题就变得非常方便了。问题是对于不同的 $i$，这个前缀和中每一项都会发生变化。<br>那如果我们知道了变化的量是多少呢？于是我们就对前缀和进行差分。</p>$\begin{align*}\Delta f[i]&=\sum_{j=1}^i f[i-j]\cdot j - \sum_{j=1}^{i-1} f[i-1-j]\cdot j\\&=\sum_{j=0}^i f[i-j]\cdot j - \sum_{j=0}^{i-1} f[i-1-j]\cdot j\qquad (f[i]\cdot 0=f[i-1]\cdot 0=0)\\&=\sum_{j=0}^i f[j]\cdot (i-j) - \sum_{j=0}^{i-1} f[j]\cdot (i-1-j)\qquad (\text{交换枚举顺序})\\&=\sum_{j=0}^i f[i]\\g[i]&=\sum_{j=2}^i f[i-j]\cdot j \cdot (j-1)\\&=\sum_{j=0}^i f[i-j]\cdot j \cdot (j-1)\qquad(f[i-1]\cdot 1\cdot 0=0)\\\Delta g[i]&=\sum_{j=0}^i f[i-j]\cdot j \cdot (j-1)-\sum_{j=0}^{i-1} f[i-j-1]\cdot (j-1) \cdot (j-2)\\&=\sum_{j=0}^i f[j]\cdot (i-j)\cdot (i-j+1)-\sum_{j=0}^{i-1} f[j]\cdot (i-j)\cdot (i-j-1)\\&=\sum_{j=0}^i f[j]\cdot (i-j)\cdot 2\qquad(i-i=0)\\\Delta^2 g[i]&= \sum_{j=0}^i f[j]\cdot (i-j)\cdot 2-\sum_{j=0}^{i-1} f[j]\cdot (i-j-1)\cdot 2\\&=\sum_{j=0}^i 2f[j]\qquad(i-i=0)\\\therefore \Delta^3 &=2f[i]\end{align*}$<p>我们维护 $f[i]$ 的前缀和，以及 $f[i-j]\cdot j$ 的前缀和，每次将 $f[i]$ 累加进 $f[i]$ 的前缀和，将 $f[i]$ 的前缀和累加进 $f[i-j]\cdot j$ 的前缀和，$g[i]$ 同理</p><!--more--><h2 id="行列式解法："><a href="#行列式解法：" class="headerlink" title="行列式解法："></a>行列式解法：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> digit 100000000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">bigint</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">mutable</span> <span class="type">int</span> a[<span class="number">205</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="title">bigint</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="built_in">sizeof</span>(a));</span><br><span class="line">a[<span class="number">0</span>]=<span class="number">1</span>;a[<span class="number">1</span>]=<span class="number">0</span>;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="title">bigint</span><span class="params">(<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="built_in">sizeof</span>(a));</span><br><span class="line">a[<span class="number">0</span>]=<span class="number">1</span>;a[<span class="number">1</span>]=b;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">int</span>&amp; <span class="keyword">operator</span>[](<span class="type">size_t</span> pos)<span class="type">const</span>&#123;<span class="keyword">return</span> a[pos];&#125;</span><br><span class="line"><span class="keyword">inline</span> bigint <span class="keyword">operator</span>+(<span class="type">int</span> b)<span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i;bigint c=*<span class="keyword">this</span>;</span><br><span class="line">c[<span class="number">1</span>]+=b;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=c[<span class="number">0</span>];++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(c[i]&gt;=digit)</span><br><span class="line">&#123;</span><br><span class="line">++c[i+<span class="number">1</span>];c[i]-=digit;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(c[c[<span class="number">0</span>]+<span class="number">1</span>])++c[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> bigint <span class="keyword">operator</span>-(<span class="type">const</span> bigint&amp; b)<span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i;bigint c;c[<span class="number">0</span>]=a[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=c[<span class="number">0</span>];++i)c[i]=a[i]-b[i];</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=c[<span class="number">0</span>];++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(c[i]&lt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">c[i]+=digit;--c[i+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!c[c[<span class="number">0</span>]]&amp;&amp;c[<span class="number">0</span>]&gt;<span class="number">1</span>)--c[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> bigint <span class="keyword">operator</span>*(<span class="type">int</span> b)<span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i;bigint c;c[<span class="number">0</span>]=a[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=c[<span class="number">0</span>];++i)c[i]=a[i]*b;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=c[<span class="number">0</span>]||c[i];++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(c[i]&gt;=digit)</span><br><span class="line">&#123;</span><br><span class="line">c[i+<span class="number">1</span>]+=c[i]/digit;c[i]%=digit;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">c[<span class="number">0</span>]=i<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os,<span class="type">const</span> bigint&amp; a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[a[<span class="number">0</span>]]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=a[<span class="number">0</span>]<span class="number">-1</span>;i&gt;=<span class="number">1</span>;--i)<span class="built_in">printf</span>(<span class="string">&quot;%08d&quot;</span>,a[i]);</span><br><span class="line"><span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line">&#125;f[<span class="number">3005</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">f[<span class="number">1</span>]=<span class="number">1</span>;f[<span class="number">2</span>]=<span class="number">5</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">3</span>;i&lt;=n;++i)f[i]=f[i<span class="number">-1</span>]*<span class="number">3</span>-f[i<span class="number">-2</span>]+<span class="number">2</span>;</span><br><span class="line">cout&lt;&lt;f[n]&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DP解法："><a href="#DP解法：" class="headerlink" title="DP解法："></a>DP解法：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> digit 1000000000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">bigint</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">mutable</span> <span class="type">int</span> a[<span class="number">205</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="title">bigint</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="built_in">sizeof</span>(a));</span><br><span class="line">a[<span class="number">0</span>]=<span class="number">1</span>;a[<span class="number">1</span>]=<span class="number">0</span>;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="title">bigint</span><span class="params">(<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="built_in">sizeof</span>(a));</span><br><span class="line">a[<span class="number">0</span>]=<span class="number">1</span>;a[<span class="number">1</span>]=b;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">int</span>&amp; <span class="keyword">operator</span>[](<span class="type">size_t</span> pos)<span class="type">const</span>&#123;<span class="keyword">return</span> a[pos];&#125;</span><br><span class="line"><span class="keyword">inline</span> bigint&amp; <span class="keyword">operator</span>+=(<span class="type">const</span> bigint&amp; b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i;a[<span class="number">0</span>]=<span class="built_in">max</span>(a[<span class="number">0</span>],b[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=a[<span class="number">0</span>];++i)a[i]+=b[i];</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=a[<span class="number">0</span>];++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;=digit)</span><br><span class="line">&#123;</span><br><span class="line">++a[i+<span class="number">1</span>];a[i]-=digit;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a[a[<span class="number">0</span>]+<span class="number">1</span>])++a[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os,<span class="type">const</span> bigint&amp; a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[a[<span class="number">0</span>]]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=a[<span class="number">0</span>]<span class="number">-1</span>;i&gt;=<span class="number">1</span>;--i)<span class="built_in">printf</span>(<span class="string">&quot;%09d&quot;</span>,a[i]);</span><br><span class="line"><span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line">&#125;F=<span class="number">1</span>,F1=<span class="number">1</span>,F2=<span class="number">1</span>,G=<span class="number">0</span>,G1=<span class="number">0</span>,G2=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i)G2+=F,G2+=F;</span><br><span class="line"><span class="keyword">if</span>(i&lt;n)G1+=G2,G+=G1;</span><br><span class="line">F=F1;F2+=F;F1+=F2;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;(F+=G)&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完结撒花！★,°:.☆(￣▽￣)&#x2F;$:.°★</p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> FJOI </category>
          
          <category> 2007 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 矩阵树 </tag>
            
            <tag> 差分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[BZOJ3771]Triple</title>
      <link href="/oi/post/solution-code4705/"/>
      <url>/oi/post/solution-code4705/</url>
      
        <content type="html"><![CDATA[<h2 id="不同情况的生成函数"><a href="#不同情况的生成函数" class="headerlink" title="不同情况的生成函数"></a>不同情况的生成函数</h2><p>我们先设$\begin {split}a(x)\end {split}$为丢失一把斧头的生成函数，$\begin {split}b(x)\end {split}$位丢失两把一样的斧头的生成函数，$\begin {split}c(x)\end {split}$位丢失三把一样的斧头的生成函数<br>对于样例来说：$\begin {split}a(x)&= x^4+x^5+x^6+x^7\\b(x)&= x^8+x^{10}+x^{12}+x^{14}\\c(x)&= x^{12}+x^{15}+x^{18}+x^{21}\end {split}$<br>再设$\begin {split}A(x)\end {split}$为丢失一把斧头的生成函数，$\begin {split}B(x)\end {split}$位丢失两把不同的斧头的生成函数，$\begin {split}C(x)\end {split}$位丢失三把不同的斧头的生成函数<br>对于样例来说：$\begin {split}A(x)& =a(x)\\B(x)& =a^2(x)-b(x)\\C(x)& =a^3(x)-3a(x)b(x)+2c(x)\end {split}$<br>解释一下$\begin {split} C(x) \end {split}$，首先随意的选择三个斧头（可以相同），然后减去选出两把相同的斧头和另一把斧头（也可以相同），但是三个相同的被减了三次，所以要加2<br>由于数据范围较大，需要用FFT或NTT优化</p><span id="more"></span><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>我们讲一个悲伤的故事。<br>从前有一个贫穷的樵夫在河边砍柴。<br>这时候河里出现了一个水神，夺过了他的斧头，说：<br>“这把斧头，是不是你的？”<br>樵夫一看：“是啊是啊！”<br>水神把斧头扔在一边，又拿起一个东西问：<br>“这把斧头，是不是你的？”<br>樵夫看不清楚，但又怕真的是自己的斧头，只好又答：“是啊是啊！”<br>水神又把手上的东西扔在一边，拿起第三个东西问：<br>“这把斧头，是不是你的？”<br>樵夫还是看不清楚，但是他觉得再这样下去他就没法砍柴了。<br>于是他又一次答：“是啊是啊！真的是！”<br>水神看着他，哈哈大笑道：<br>“你看看你现在的样子，真是丑陋！”<br>之后就消失了。<br>樵夫觉得很坑爹，他今天不仅没有砍到柴，还丢了一把斧头给那个水神。<br>于是他准备回家换一把斧头。<br>回家之后他才发现真正坑爹的事情才刚开始。<br>水神拿着的的确是他的斧头。<br>但是不一定是他拿出去的那把，还有可能是水神不知道怎么偷偷从他家里拿走的。<br>换句话说，水神可能拿走了他的一把，两把或者三把斧头。<br>樵夫觉得今天真是倒霉透了，但不管怎么样日子还得过。<br>他想统计他的损失。<br>樵夫的每一把斧头都有一个价值，不同斧头的价值不同。总损失就是丢掉的斧头价值和。<br>他想对于每个可能的总损失，计算有几种可能的方案。<br>注意：如果水神拿走了两把斧头$a$和$b$，$(a,b)$和$(b,a)$视为一种方案。拿走三把斧头时，$(a,b,c)$,$(b,c,a)$,$(c,a,b)$,$(c,b,a)$,$(b,a,c)$,$(a,c,b)$视为一种方案。</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>第一行是整数N，表示有$N$把斧头。<br>接下来$N$行升序输入$N$个数字$A_i$，表示每把斧头的价值。</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>若干行，按升序对于所有可能的总损失输出一行$x$ $y$，$x$为损失值，$y$为方案数。</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">4 1</span><br><span class="line">5 1</span><br><span class="line">6 1</span><br><span class="line">7 1</span><br><span class="line">9 1</span><br><span class="line">10 1</span><br><span class="line">11 2</span><br><span class="line">12 1</span><br><span class="line">13 1</span><br><span class="line">15 1</span><br><span class="line">16 1</span><br><span class="line">17 1</span><br><span class="line">18 1</span><br></pre></td></tr></table></figure><h3 id="HINT"><a href="#HINT" class="headerlink" title="HINT"></a>HINT</h3><p>$11$有两种方案是$4+7$和$5+6$，其他损失值都有唯一方案，例如$4&#x3D;4$,$5&#x3D;5$,$10&#x3D;4+6$,$18&#x3D;5+6+7$。<br>所有数据满足：$A_i\le 40000$</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> complex&lt;<span class="type">double</span>&gt;cp;</span><br><span class="line"><span class="type">int</span> rev[<span class="number">140005</span>];</span><br><span class="line">cp a[<span class="number">140005</span>],b[<span class="number">140005</span>],c[<span class="number">140005</span>],wi[<span class="number">140005</span>],ans[<span class="number">140005</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Make</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,L=<span class="built_in">log2</span>(n)+<span class="number">1</span>;n=<span class="number">1</span>&lt;&lt;L;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;++i)rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(L<span class="number">-1</span>));</span><br><span class="line"><span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">FFT</span><span class="params">(cp A[],<span class="type">int</span> n,<span class="type">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,j,k;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;++i)<span class="keyword">if</span>(rev[i]&lt;i)<span class="built_in">swap</span>(A[i],A[rev[i]]);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">cp <span class="title">wn</span><span class="params">(cos(M_PI/i),f*sin(M_PI/i))</span></span>;</span><br><span class="line">wi[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;i;++j)wi[j]=wi[j<span class="number">-1</span>]*wn;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j+=i&lt;&lt;<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;i;++k)</span><br><span class="line">&#123;</span><br><span class="line">cp x=A[j+k],y=wi[k]*A[i+j+k];</span><br><span class="line">A[j+k]=x+y;A[i+j+k]=x-y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(f==<span class="number">-1</span>)<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;++i)A[i]=A[i]/<span class="built_in">double</span>(n);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,x,n,m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">a[x]=b[x*<span class="number">2</span>]=c[x*<span class="number">3</span>]=<span class="built_in">cp</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">m=<span class="built_in">Make</span>(<span class="number">131071</span>);</span><br><span class="line"><span class="built_in">FFT</span>(a,m,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">FFT</span>(b,m,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">FFT</span>(c,m,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;++i)</span><br><span class="line">&#123;</span><br><span class="line">ans[i]=a[i]+(a[i]*a[i]-b[i])/<span class="number">2.0</span>+(a[i]*a[i]*a[i]-a[i]*b[i]*<span class="number">3.0</span>+c[i]*<span class="number">2.0</span>)/<span class="number">6.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">FFT</span>(ans,m,<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ans[i].<span class="built_in">real</span>()&gt;<span class="number">0.9</span>)<span class="built_in">printf</span>(<span class="string">&quot;%d %.0f\n&quot;</span>,i,<span class="built_in">round</span>(ans[i].<span class="built_in">real</span>()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NTT </tag>
            
            <tag> 生成函数 </tag>
            
            <tag> FFT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生成函数</title>
      <link href="/oi/post/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/"/>
      <url>/oi/post/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><span id="more"></span><h2 id="法一：广义二项式定理"><a href="#法一：广义二项式定理" class="headerlink" title="法一：广义二项式定理"></a>法一：广义二项式定理</h2><p>由数式二项式定理可得$\begin {split}(1+x)^n&#x3D;\sum_{i&#x3D;0}^n C_{n+i-1}^i\cdot x^i \end {split}$<br>这里的n是正数，当指数为负整数时 $−1\le x\le 1$，且n为正整数时$\begin {split}(1−x)^{−n}&#x3D;\sum_{i&#x3D;0}^{\infty}C_{n+i-1}^i\cdot x^i \end {split}$</p><h2 id="法二-一会儿补充"><a href="#法二-一会儿补充" class="headerlink" title="法二(一会儿补充)"></a>法二(一会儿补充)</h2><h2 id="模板题"><a href="#模板题" class="headerlink" title="模板题"></a>模板题</h2><ul><li><a href="/oi/post/solution-code4763/" title="solution-code4763">code4763</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生成函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[BZOJ3759] Hungergame</title>
      <link href="/oi/post/solution-code5822/"/>
      <url>/oi/post/solution-code5822/</url>
      
        <content type="html"><![CDATA[<p>转载自<a href="https://www.cnblogs.com/joyouth/p/5334906.html">joyouth</a><br>首先我们不难看出如果存在一个异或和为0的子集，那么先手必胜，否则先手必败<br>证明如下：<br>1、首先如果至少存在一个异或和为0的子集，那么一定存在一个异或和为0的子集使得选取之后剩下的数的任意子集异或和不为0<br>2、假设我们已经选取了一个异或和为0的子集，无论后手怎么做，我们总是有办法使得当前选取的子集异或和为0，因为后手无论是拿石子还是取石子之后，当前子集异或和不等于0，根据Nim游戏可知，此时先手一定有方案使得异或和为0<br>至此，我们证明了如果至少存在一个异或和为0的子集，先手必胜<br>那么题目就转化为求是否存在一个子集异或和为0，用线性基即可</p><span id="more"></span><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>由于施惠国的统治极其残暴，每年从13个区中每个区中选出2名“贡品”参加饥饿游戏，而参加游戏的人必须在险恶的自然环境中杀死其余的人才能存活。游戏只会有一个人活下来。凯特尼斯•伊夫狄恩和同区的皮塔•麦拉克在历经千难万阻后活了下来，然而残忍的游戏只允许一人存活，正当两人准备同时吃下有毒的果实自杀的时候，统治者被打动了，他说：你们两个人跟我玩一个游戏，你赢了，我就让你们两个都活下来。女主角凯特尼斯•伊夫狄恩接受了挑战。<br>这个游戏是这样的，有$n(n\le 20)$个箱子，每个箱子里面有$a_i(a_i\le 10^9)$个石头（怎么放进去的我就不知道了），两个人轮流进行操作（女主角先手），每一次操作可以将任意个（大于0个）未打开的箱子打开（一开始所有的箱子都是关闭的），或者在已经打开的一个箱子里拿走任意个（大于0个）石头（不能超过这个箱子现有的石头数）。最后谁无法操作谁就输了。<br>现在给出$n$，和这$n$个箱子里的石头数$a_i$，女主角想知道她是否有绝对的把握取得胜利（很明显她的对手“统治者”是绝顶聪明的）。</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>第一行有一个正整数$T$（表示有$T$组测试数据），对于每组测试数据有两行，第一行为一个正整数$n$，接下来有$n$个数，第$i$个数表示$a_i$.</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p> 有T行：对于每一个测试数据，如果先手可以必胜则输出“Yes”，否则输出“No”（没有引号）。</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">5</span><br><span class="line">18 11 16 19 15</span><br><span class="line">5</span><br><span class="line">18 12 17 10 18</span><br><span class="line">5</span><br><span class="line">17 7 1 10 1</span><br><span class="line">5</span><br><span class="line">19 5 16 19 8</span><br><span class="line">5</span><br><span class="line">18 18 7 4 9</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">No</span><br><span class="line">Yes</span><br><span class="line">Yes</span><br><span class="line">Yes</span><br><span class="line">Yes</span><br></pre></td></tr></table></figure><h3 id="HINT"><a href="#HINT" class="headerlink" title="HINT"></a>HINT</h3><p>$100%$的数据：$n\le 20$，$T\le 10$，$a_i$不超过$10^9$；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> pos[<span class="number">35</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">Insert</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">31</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((x&gt;&gt;i)&amp;<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!pos[i])&#123;pos[i]=x;<span class="keyword">break</span>;&#125;</span><br><span class="line"><span class="keyword">else</span> x^=pos[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,T,n,x,ans;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(pos,<span class="number">0</span>,<span class="built_in">sizeof</span>(pos));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">ans+=<span class="built_in">Insert</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans)<span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性基 </tag>
            
            <tag> Nim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>solution-code2593</title>
      <link href="/oi/post/solution-code2593/"/>
      <url>/oi/post/solution-code2593/</url>
      
        <content type="html"><![CDATA[<h2 id="每种水的生成函数"><a href="#每种水的生成函数" class="headerlink" title="每种水的生成函数"></a>每种水的生成函数</h2><p>第1种: $\begin {split}1+x+x^2+\cdots&#x3D;\frac 1{1-x} \end {split}$<br>第2种: $\begin {split}1+x&#x3D;\frac{1-x^2}{1-x} \end {split}$<br>第3种: $\begin {split}1+x+x^2+x^3+x^4&#x3D;\frac{1-x^5}{1-x} \end {split}$<br>第4种: $\begin {split}1+x^5+x^{10}+\cdots&#x3D;<br>\frac 1{1-x^5} \end {split}$<br>第5种: $\begin {split}1+x^2+x^4+\cdots&#x3D;\frac 1{1-x^2} \end {split}$</p><p>乘在一起得到: $\begin {split}\frac 1{(1-x)^3}&#x3D;(1-x)^{-3} \end {split}$<br>带入广义二项式定理得: $\begin {split} f(x)&#x3D;\sum_{i&#x3D;0}^{\infty} C_{i+2}^i \cdot x^i \end {split}$<br>当$\begin {split}i&#x3D;n \end{split}$时第$n$项为 $\begin {split} x\cdot C_{n+2}^n \cdot x^n&#x3D;C_{n+2}^2\cdot x^n\end{split}$<br>所以答案就为$\begin {split} ans&#x3D;\frac{(n+1)(n+2)}2 \end {split}$</p><span id="more"></span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="number">1LL</span>*(n+<span class="number">1</span>)*(n+<span class="number">2</span>)/<span class="number">2</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生成函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Treap</title>
      <link href="/oi/post/Treap/"/>
      <url>/oi/post/Treap/</url>
      
        <content type="html"><![CDATA[<h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><ul><li>空(<del>逃</del>)</li></ul><span id="more"></span><h2 id="下载讲义"><a href="#下载讲义" class="headerlink" title="下载讲义"></a>下载讲义</h2>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 平衡树 </tag>
            
            <tag> Treap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>solution-code4763</title>
      <link href="/oi/post/solution-code4763/"/>
      <url>/oi/post/solution-code4763/</url>
      
        <content type="html"><![CDATA[<h2 id="每种食物的生成函数"><a href="#每种食物的生成函数" class="headerlink" title="每种食物的生成函数"></a>每种食物的生成函数</h2><p>汉堡: $\begin {split}1+x^2+x^4+\cdots&#x3D;\frac 1{1-x^2} \end {split}$<br>可乐: $\begin {split}1+x&#x3D;\frac{1-x^2}{1-x}\end {split}$<br>鸡腿: $\begin {split}1+x+x^2&#x3D;\frac{1-x^3}{1-x} \end {split}$<br>蜜桃多: $\begin {split}x+x^3+x^5+\cdots&#x3D;\frac x{1-x^2} \end {split}$<br>鸡块: $\begin {split}1+x^4+x^8+\cdots&#x3D;\frac 1{1-x^4} \end {split}$<br>包子: $\begin {split}1+x+x^2+x^3&#x3D;\frac{1-x^4}{1-x} \end {split}$<br>土豆片炒肉: $\begin {split}1+x&#x3D;\frac{1-x^2}{1-x} \end {split}$<br>面包: $\begin {split}1+x^3+x^6+\cdots&#x3D;\frac 1{1-x^3} \end {split}$</p><p>乘在一起得到: $\begin {split}f(x)&#x3D;\frac x{(1-x)^4}&#x3D;x\cdot (1-x)^{-4} \end {split}$<br>带入广义二项式定理得 $\begin {split} f(x)&#x3D;x\cdot \sum_{i&#x3D;0}^\infty C_{i+3}^i \cdot x^i \end {split}$<br>当$\begin {split}i&#x3D;n-1 \end{split}$时第$n-1$项为 $\begin {split} x\cdot C_{n+2}^n \cdot x^n&#x3D;C_{n+2}^3\cdot x^n\end{split}$<br>所以答案就为$\begin {split} ans&#x3D;\frac{n(n+1)(n+2)}6 \end {split}$</p><span id="more"></span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 10007</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inv6 1668</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">GetInt</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> ch,num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(ch=<span class="built_in">getchar</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">num=(num*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>)%mod;</span><br><span class="line">ch=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n=<span class="built_in">GetInt</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,n*(n+<span class="number">1</span>)%mod*(n+<span class="number">2</span>)%mod*inv6%mod);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生成函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>solution-code4837</title>
      <link href="/oi/post/solution-code4837/"/>
      <url>/oi/post/solution-code4837/</url>
      
        <content type="html"><![CDATA[<p>模板题，多注意细节即可</p><span id="more"></span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> to,next;</span><br><span class="line">&#125;e[<span class="number">1000005</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> L,R,maxx,addv;</span><br><span class="line">&#125;T[<span class="number">2000005</span>];</span><br><span class="line"><span class="type">int</span> n,m,siz[<span class="number">500005</span>],d[<span class="number">500005</span>],h[<span class="number">500005</span>],pre[<span class="number">500005</span>],vson[<span class="number">500005</span>],pos[<span class="number">500005</span>],top[<span class="number">500005</span>],sign,cnt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Addedge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[++cnt]=(Node)&#123;y,h[x]&#125;;h[x]=cnt;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> dep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,y;</span><br><span class="line">d[x]=dep;siz[x]=<span class="number">1</span>;</span><br><span class="line">vson[x]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=h[x];i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">y=e[i].to;</span><br><span class="line"><span class="keyword">if</span>(y==pre[x])<span class="keyword">continue</span>;</span><br><span class="line">pre[y]=x;</span><br><span class="line"><span class="built_in">dfs1</span>(y,dep+<span class="number">1</span>);</span><br><span class="line">siz[x]+=siz[y];</span><br><span class="line"><span class="keyword">if</span>(vson[x]==<span class="number">-1</span>||siz[vson[x]]&lt;siz[y])vson[x]=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> sp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,y;</span><br><span class="line">pos[x]=++sign;top[x]=sp;</span><br><span class="line"><span class="keyword">if</span>(vson[x]!=<span class="number">-1</span>)<span class="built_in">dfs2</span>(vson[x],sp);</span><br><span class="line"><span class="keyword">for</span>(i=h[x];i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">y=e[i].to;</span><br><span class="line"><span class="keyword">if</span>(y==pre[x]||y==vson[x])<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs2</span>(y,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Build</span><span class="params">(<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T[v].L=L;T[v].R=R;</span><br><span class="line"><span class="keyword">if</span>(L==R)<span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> mid=(L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">Build</span>(L,mid,v&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="built_in">Build</span>(mid+<span class="number">1</span>,R,(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T[v].maxx=<span class="built_in">max</span>(T[v&lt;&lt;<span class="number">1</span>].maxx,T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].maxx)+T[v].addv;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Insert</span><span class="params">(<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L&gt;T[v].R||R&lt;T[v].L)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=T[v].L&amp;&amp;R&gt;=T[v].R)</span><br><span class="line">&#123;</span><br><span class="line">++T[v].addv;++T[v].maxx;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Insert</span>(L,R,v&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="built_in">Insert</span>(L,R,(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line"><span class="built_in">pushup</span>(v);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Insertpath</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(d[top[x]]&lt;d[top[y]])<span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="built_in">Insert</span>(pos[top[x]],pos[x],<span class="number">1</span>);</span><br><span class="line">x=pre[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(d[x]&gt;d[y])<span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="built_in">Insert</span>(pos[x],pos[y],<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,n,m,x,y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line"><span class="built_in">Addedge</span>(x,y);</span><br><span class="line"><span class="built_in">Addedge</span>(y,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">Build</span>(<span class="number">1</span>,sign,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line"><span class="built_in">Insertpath</span>(x,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,T[<span class="number">1</span>].maxx);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 树链剖分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[NOI2008]志愿者招募</title>
      <link href="/oi/post/solution-code2361/"/>
      <url>/oi/post/solution-code2361/</url>
      
        <content type="html"><![CDATA[<p>转载自<a href="https://www.byvoid.com/zhs/blog/noi-2008-employee">byvoid</a><br>这道题正确的解法是构造网络，求网络最小费用最大流，但是模型隐藏得较深，不易想到。构造网络是该题的关键，以下面一个例子说明构图的方法和解释。</p><span id="more"></span><p>例如一共需要4天，四天需要的人数依次是4,2,5,3。有5类志愿者，如下表所示：</p><table><thead><tr><th>种类</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr><td>时间</td><td>1-2</td><td>1-1</td><td>2-3</td><td>3-3</td><td>3-4</td></tr><tr><td>费用</td><td>3</td><td>4</td><td>3</td><td>5</td><td>6</td></tr></tbody></table><p>设雇佣第i类志愿者的人数为$X_i$，每个志愿者的费用为$V_i$，第j天雇佣的人数为$P_j$，则每天的雇佣人数应满足一个不等式，如上表所述，可以列出</p>$\begin{cases}P_1 = X_1 + X_2 \le 4\\P_2 = X_1 + X_3 \le 2\\P_3 = X_3 + X_4 +X_5 \le 5\\P_4 = X_5 \le 3\end{cases}$<p>对于第i个不等式，添加辅助变量$Y_i(Y_i\le 0)$ ，可以使其变为等式</p>$\begin{cases}P_1 = X_1 + X_2 - Y_1 = 4\\P_2 = X_1 + X_3 - Y_2 = 2\\P_3 = X_3 + X_4 +X_5 - Y_3 = 5\\P_4 = X_5 - Y_4 = 3\end{cases}$<p>在上述四个等式上下添加$P_0&#x3D;0~P_5&#x3D;0$，每次用下边的式子减去上边的式子，得出</p>$\begin{cases}P_1 - P_0 = X_1 + X_2 - Y_1 = 4\\P_2 - P_1 = X_3 - X_2 -Y_2 +Y_1 = -2\\P_3 - P_2 = X_4 + X_5 - X_1 - Y_3 + Y_2 =3\\P_4 - P_3 = - X_3 - X_4 + Y_3 - Y_4 = -2\\P_5 - P_4 = - X_5 + Y_4 = -3\end{cases}$<p>观察发现，每个变量都在两个式子中出现了，而且一次为正，一次为负。所有等式右边和为0。接下来，根据上面五个等式构图。<br>每个等式为图中一个顶点，添加源点$S$和汇点$T$。<br>如果一个等式右边为非负整数$c$，从源点$S$向该等式对应的顶点连接一条容量为$c$，权值为0的有向边；如果一个等式右边为负整数$c$，从该等式对应的顶点向汇点$T$连接一条容量为$c$，权值为0的有向边。<br>如果一个变量$X_i$在第$j$个等式中出现为$X_i$，在第k个等式中出现为$-X_i$，从顶点j向顶点k连接一条容量为$\infty$，权值为$V_i$的有向边。<br>如果一个变量$Y_i$在第$j$个等式中出现为$Y_i$，在第k个等式中出现为$-Y_i$，从顶点j向顶点k连接一条容量为$\infty$，权值为0的有向边。<br>构图以后，求从源点S到汇点T的最小费用最大流，费用值就是结果。<br>根据上面的例子可以构造出如下网络，红色的边为每个变量$X$代表的边，蓝色的边为每个变量$Y$代表的边，边的容量和权值标已经标出(蓝色没有标记，因为都是容量$\infty$，权值0)。</p><img src="/oi/post/solution-code2361/1.gif" class="" title="1.gif"><p>在这个图中求最小费用最大流，流量网络如下图，每个红色边的流量就是对应的变量$X$的值。</p><img src="/oi/post/solution-code2361/2.gif" class="" title="2.gif"><p>所以，答案为$43+23+3\times 6&#x3D;36$。<br>上面的方法很神奇得求出了结果，思考为什么这样构图。我们将最后的五个等式进一步变形，得出以下结果</p>$\begin{cases}- X_1 - X_2 + Y_1 + 4 = 0\\- X_3 + X_2 + Y_2 - Y_1 - 2 = 0\\- X_4 - X_5 + X_1 + Y_3 - Y_2 + 3 = 0\\X_3 + X_4 - Y_3 + Y_4 - 2 = 0\\X_5 - Y_4 - 3 = 0\end{cases}$<p>可以发现，每个等式左边都是几个变量和一个常数相加减，右边都为0，恰好就像网络流中除了源点和汇点的顶点都满足<strong>流量平衡</strong>。每个正的变量相当于流入该顶点的流量，负的变量相当于流出该顶点的流量，而正常数可以看作来自附加源点的流量，负的常数是流向附加汇点的流量。因此可以据此构造网络，求出从附加源到附加汇的网络最大流，即可满足所有等式。而我们还要求$\begin{split}\sum_{i&#x3D;1}^M X_i\cdot V_i\end{split}$最小，所以要在$X$变量相对应的边上加上权值，然后求<strong>最小费用最大流</strong>。<br>然而在NOI的现场上，该题得分的平均分12.56，只有高逸涵大牛拿到了满分。不能不说这是一道难题，难就难在抽象出问题的数学模型，设计有效的算法。而信息学竞赛正朝着这个方向发展，数学建模将是解决问题的共同关键步骤。</p><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>申奥成功后，布布经过不懈努力，终于成为奥组委下属公司人力资源部门的主管。布布刚上任就遇到了一个难题：为即将启动的奥运新项目招募一批短期志愿者。经过估算，这个项目需要$N$天才能完成，其中第$i$天至少需要$A_i$个人。布布通过了解得知，一共有$M$类志愿者可以招募。其中第$i$类可以从第$S_i$天工作到第$T_i$天，招募费用是每人$C_i$元。新官上任三把火，为了出色地完成自己的工作，布布希望用尽量少的费用招募足够的志愿者，但这并不是他的特长！于是布布找到了你，希望你帮他设计一种最优的招募方案。</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>第一行包含两个整数$N$,$M$，表示完成项目的天数和可以招募的志愿者的种类。接下来的一行中包含$N$个非负整数，表示每天至少需要的志愿者人数。 接下来的$M$行中每行包含三个整数$S_i$, $T_i$, $C_i$，含义如上文所述。为了方便起见，我们可以认为每类志愿者的数量都是无限多的。</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>仅包含一个整数，表示你所设计的最优方案的总费用。</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">3 3</span><br><span class="line">2 3 4</span><br><span class="line">1 2 2</span><br><span class="line">2 3 5</span><br><span class="line">3 3 2</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">14</span><br></pre></td></tr></table></figure><h3 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h3><p>$1\le N\le 1000$，$1\le M\le 10000$，题目中其他所涉及的数据均 不超过$2^{31}-1$。</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3F3F3F3F</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> to,next,v,c;</span><br><span class="line">&#125;e[<span class="number">100005</span>];</span><br><span class="line"><span class="type">int</span> S,T,ans,a[<span class="number">1005</span>],h[<span class="number">1005</span>],d[<span class="number">1005</span>],pre[<span class="number">1005</span>],cnt=<span class="number">1</span>;</span><br><span class="line"><span class="type">bool</span> vis[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Addedge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> v,<span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[++cnt]=(Node)&#123;y,h[x],v,c&#125;;h[x]=cnt;</span><br><span class="line">e[++cnt]=(Node)&#123;x,h[y],<span class="number">0</span>,-c&#125;;h[y]=cnt;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">SPFA</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,x,y;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt;q;q.<span class="built_in">push</span>(S);</span><br><span class="line"><span class="built_in">memset</span>(d,<span class="number">0x3F</span>,<span class="built_in">sizeof</span>(d));d[S]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">x=q.<span class="built_in">front</span>();q.<span class="built_in">pop</span>();</span><br><span class="line">vis[x]=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(i=h[x];i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">y=e[i].to;</span><br><span class="line"><span class="keyword">if</span>(e[i].v&amp;&amp;d[y]&gt;d[x]+e[i].c)</span><br><span class="line">&#123;</span><br><span class="line">d[y]=d[x]+e[i].c;</span><br><span class="line">pre[y]=i;</span><br><span class="line"><span class="keyword">if</span>(!vis[y])&#123;q.<span class="built_in">push</span>(y);vis[y]=<span class="literal">true</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> d[T]&lt;inf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Adjust</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,j=T,delta=inf;</span><br><span class="line"><span class="keyword">while</span>(pre[j])</span><br><span class="line">&#123;</span><br><span class="line">i=pre[j];</span><br><span class="line"><span class="keyword">if</span>(e[i].v&lt;delta)delta=e[i].v;</span><br><span class="line">j=e[i^<span class="number">1</span>].to;</span><br><span class="line">&#125;</span><br><span class="line">ans+=delta*d[T];j=T;</span><br><span class="line"><span class="keyword">while</span>(pre[j])</span><br><span class="line">&#123;</span><br><span class="line">i=pre[j];</span><br><span class="line">e[i].v-=delta;</span><br><span class="line">e[i^<span class="number">1</span>].v+=delta;</span><br><span class="line">j=e[i^<span class="number">1</span>].to;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,x,y,v,n,m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;v);</span><br><span class="line"><span class="built_in">Addedge</span>(x,y+<span class="number">1</span>,inf,v);</span><br><span class="line">&#125;</span><br><span class="line">S=n+<span class="number">2</span>;T=n+<span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n+<span class="number">1</span>;++i)</span><br><span class="line">&#123;</span><br><span class="line">v=a[i]-a[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">if</span>(v&gt;=<span class="number">0</span>)<span class="built_in">Addedge</span>(S,i,v,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">Addedge</span>(i,T,-v,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)<span class="built_in">Addedge</span>(i+<span class="number">1</span>,i,inf,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">SPFA</span>())<span class="built_in">Adjust</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树链剖分</title>
      <link href="/oi/post/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
      <url>/oi/post/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h2 id="注意！"><a href="#注意！" class="headerlink" title="注意！"></a>注意！</h2><ul><li>如果在线段树Build的时候要初始化根节点的值，一定要用fpos！</li></ul><span id="more"></span><p>模板题:</p><ul><li><a href="/oi/post/solution-code4837/" title="solution-code4837">code4837-最大流</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树链剖分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[luogu4834]萨塔尼亚的期末考试</title>
      <link href="/oi/post/solution-luogu4834/"/>
      <url>/oi/post/solution-luogu4834/</url>
      
        <content type="html"><![CDATA[<p>这里有<a href="https://oeis.org/A014286">oeis</a>的解释，但是我看不懂<br>题目大意：快速地求$\begin {split}ans=\frac{\sum_{i=1}^n(i\cdot fib(i))}{\frac{n(n+1)}2}\end {split}$$\begin {split}\because \sum_{i=1}^n fib(i)&=1+fib(1)+fib(2)+\cdots+fib(n)-1 \qquad\qquad\quad [1+(-1)==0] \\& =(fib(2)+fib(1))+fib(3)+\cdots+fib(n)-1 \qquad [fib(1)==fib(2)] \\& =(fib(3)+fib(2))+fib(4)+\cdots+fib(n)-1 \qquad [fib(1)+fib(2)==fib(3)] \\& =\cdots \\& = fib(n+2)-1 \\\end {split}$$\begin {split}\therefore \sum_{i=1}^n i\cdot fib(i)&=n\sum_{i=1}^n fib(i)-\sum_{i=1}^{n-1}\sum_{j=1}^i fib(j) \\& = n(fib(n+2)-1)-\sum_{i=1}^{n-1}(fib(i+2)-1) \\& = n\cdot fib(n+2)-n-(\sum_{i=1}^{n-1}fib(i+2))+(n-1) \\& = n\cdot fib(n+2)-(\sum_{i=1}^{n+1}fib(i)-2)-1 \\& = n\cdot fib(n+2)-(fib(n+3)-1-2)-1 \\& = n\cdot fib(n+2)-fib(n+3)+2\end {split}$<br>写一个矩阵快速幂就可以解决问题，时间复杂度$\begin {split} O(T\cdot log_2(n))\end {split}$，但是不出意料的T掉了<br>观察一下结果，可以发现我们分别对ans中两个相邻的fib值进行计算，这并没有利用好矩阵乘法的性质<br>回想一下最初学习矩阵快速幂的时候，老师演算fib的时候是一个$1\times 2$的矩阵乘上$2\times 2$的矩阵，像这样：$\begin {bmatrix}fib(n)\\fib(n-1)\end {bmatrix}\begin {bmatrix}1&1\\1&0\end {bmatrix}=\begin {bmatrix}fib(n-1)\\fib(n-2)\end {bmatrix}$<br>我们用老师最初讲的方法来计算fib的值，可以节省一半的时间，在加上$2\times 2$的矩阵乘法不用for循环，就可以轻松切过这道题了～</p><p><strong>UPD</strong>: 老师最后写的方法并不是错的，在只求一次或者不相邻的项中会显得更快一些，但这并不代表我们可以忘掉原来讲的那种方法（这真的是一道好题）<br>最终的矩阵为：$\begin {bmatrix}1\\0\end {bmatrix}\begin {bmatrix}1&1\\1&0\end {bmatrix}^{n+3}$</p><span id="more"></span><h3 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h3><p>“呐，珈百璃，我说，暑假我们去哪里玩呢？”薇奈特拍拍珈百璃的肩膀<br>“哈？暑假当然是在家里打游戏啦”珈百璃无精打采地回答道<br>“怎么能这样呢？你好歹也是天使啊，给我拿出天使的样子来啊”<br>“真麻烦”<br>“所以，暑假我们去海边玩吧？”<br>“赞成赞成！去海边玩的话，就可以好好调戏珈百璃了。”菈菲尔不知道什么时候凑进来<br>“麻烦死了。”<br>这边一群人正讨论着暑假去哪玩，然而萨塔尼亚在旁边听得很纠结，因为没有人邀请她……<br>“哼哼哼哼，吾乃神魔萨塔尼亚，怎么可能主动去加入呢，我必须等她们邀请我”萨塔尼亚心理打着小算盘<br>“呐，我说，萨塔尼亚貌似有点小不开心呀”<br>“已经不是貌似了吧，她这表情完全没有掩盖的意思啊……”<br>“呐，我说，要不要邀请她去啊？”<br>拉菲尓说着，走向了萨塔尼亚。“萨塔尼亚桑，暑假我们要去海边玩哟～”<br>“哼哼哼，终于来邀请我了吗”萨塔尼亚心里有点小开心，小声嘀咕道<br>“萨塔尼亚桑就好好待在这里哟～”<br>“额……”萨塔尼亚受到了成吨的暴击，“喂，我说，哪有你这样的啊”<br>“恩？因为，萨塔尼亚桑，暑假如果要出去玩的话，就要通过期末考试哟，不然会被留下来补课的”<br>“补……补课……”萨塔尼亚貌似意会到了什么，脸色大变，“补课……呐，拉菲尓……你……你能帮我……补习吗？”<br>“恩？可以呀～但是期末考试如何就得看你自己了”<br>“谢谢，那帮我看看这些哪里错了吧？我完全不懂诶”<br>“我看看……” 拉菲尓丢下珈百璃和薇奈特独自给萨塔尼亚开始了补习。<br>终于，期末考来了，萨塔尼亚努力的这么久，就看这次考试了！经过长期的努力，期末考一切顺利，除了还没考的数学其他学科都及格啦！<br>终于到了最后一场考试——物理考试。很不错的是，萨塔尼亚已经答完了59分而且全对，但是她遇到了一道绝世难题，而且她很惊奇的发现，总分100分，这题41分，如果不写出来，就会挂科。<br>“期末考如果有某人有挂科，那么那个人的暑假要参加补课以及补考！”班主任的话萦绕在她的耳旁，这可怎么办啊……</p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>有一个由$n$个点电荷形成的电场，我们假定每个点电荷放出的电场都是匀强电场而不是点电荷电场，第i个点电荷的电场强度$E_i&#x3D;i$，现放一个带负电的试探电荷到这个电场中，这个试探电荷只要触碰到任何一个点电荷就会和这个点电荷发生聚变放出巨大能量，因为点电荷放出的电场强度不同，所以试探电荷被吸引到每个点电荷的概率也不同，点电荷给试探电荷的吸引力越大被吸到这个点电荷的概率就越大，且成正比，我们假设最小的点电荷给试探电荷的吸引力为$F$，那么对于其他点电荷给试探电荷和吸引力就是$i\cdot F$，那么假设触碰最小的点电荷的概率为$P$，则每个点的概率就是$i\cdot P$，触碰到点电荷后发出的能量为$fib(E\cdot i)$，求期望放出的能量<br>好消息是，只要这道题拿到分，萨塔尼亚就能及格啦！</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行一个整数$T$，表示$T$组测试数据<br>接下来T行每行一个整数$n$，表示有$n$个点电荷</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>对于每次询问输出一行一个整数表示期望能量，为了避免精度问题，我们输出的数都是$\mod 998244353$下的</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>样例解释：$\begin {split}\frac 13\cdot fib(1)+\frac 23\cdot fib(2)&#x3D;1\end {split}$<br>请结合样例仔细再仔细的读题！<br>对于10%的数据，$T&#x3D;1，n&#x3D;2$<br>对于30%的数据，$T\le 10，n\le 10^6$<br>对于60%的数据，$T\le 10^6，n\le 10^6$<br>对于100%的数据，$T\le 10^6，n\le 10^9$<br>$fib(i)$为斐波那契数列，$fib(1)&#x3D;fib(2)&#x3D;1,fib(n)&#x3D;fib(n-2)+fib(n-1)\quad(n\le 3)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">quickpow</span><span class="params">(LL a,LL b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LL ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(b&amp;<span class="number">1</span>)ans=(ans*a)%mod;</span><br><span class="line">a=(a*a)%mod;b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unsolved </tag>
            
            <tag> 矩阵快速幂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NTT用到的各种素数</title>
      <link href="/oi/post/NTT-prime/"/>
      <url>/oi/post/NTT-prime/</url>
      
        <content type="html"><![CDATA[<p>转载自 <a href="http://blog.miskcoo.com/2014/07/fft-prime-table">miskcoo</a><br>是这样的，这几天在写NTT，由于是在模意义下的，需要各种素数……<br>然后就打了个表方便以后查了<br>如果$r(2k+1)$是个素数，那么在$\mod r(2k+1)$意义下，可以处理$2k$以内规模的数据，<br>$2281701377&#x3D;17\times 227+1$是一个挺好的数，平方刚好不会爆 long long<br>$1004535809&#x3D;479\times 221+1$加起来刚好不会爆 int 也不错<br>还有就是UOJ常用的$998244353&#x3D;119\times 223+1$<br>打表方法:对于每个$k$，找到最小r满足$r(2k+1)$是素数（g是$\mod r(2k+1)$的原根）</p><span id="more"></span><table><thead><tr><th>$r(2k+1)$</th><th>$r$</th><th>$k$</th><th>$g$</th></tr></thead><tbody><tr><td>3</td><td>1</td><td>1</td><td>2</td></tr><tr><td>5</td><td>1</td><td>2</td><td>2</td></tr><tr><td>17</td><td>1</td><td>4</td><td>3</td></tr><tr><td>97</td><td>3</td><td>5</td><td>5</td></tr><tr><td>193</td><td>3</td><td>6</td><td>5</td></tr><tr><td>257</td><td>1</td><td>8</td><td>3</td></tr><tr><td>7681</td><td>15</td><td>9</td><td>17</td></tr><tr><td>12289</td><td>3</td><td>12</td><td>11</td></tr><tr><td>40961</td><td>5</td><td>13</td><td>3</td></tr><tr><td>65537</td><td>1</td><td>16</td><td>3</td></tr><tr><td>786433</td><td>3</td><td>18</td><td>10</td></tr><tr><td>5767169</td><td>11</td><td>19</td><td>3</td></tr><tr><td>7340033</td><td>7</td><td>20</td><td>3</td></tr><tr><td>23068673</td><td>11</td><td>21</td><td>3</td></tr><tr><td>104857601</td><td>25</td><td>22</td><td>3</td></tr><tr><td>167772161</td><td>5</td><td>25</td><td>3</td></tr><tr><td>469762049</td><td>7</td><td>26</td><td>3</td></tr><tr><td>998244353</td><td>119</td><td>23</td><td>3</td></tr><tr><td>1004535809</td><td>479</td><td>21</td><td>3</td></tr><tr><td>2013265921</td><td>15</td><td>27</td><td>31</td></tr><tr><td>2281701377</td><td>17</td><td>27</td><td>3</td></tr><tr><td>3221225473</td><td>3</td><td>30</td><td>5</td></tr><tr><td>75161927681</td><td>35</td><td>31</td><td>3</td></tr><tr><td>77309411329</td><td>9</td><td>33</td><td>7</td></tr><tr><td>206158430209</td><td>3</td><td>36</td><td>22</td></tr><tr><td>2061584302081</td><td>15</td><td>37</td><td>7</td></tr><tr><td>2748779069441</td><td>5</td><td>39</td><td>3</td></tr><tr><td>6597069766657</td><td>3</td><td>41</td><td>5</td></tr><tr><td>39582418599937</td><td>9</td><td>42</td><td>5</td></tr><tr><td>79164837199873</td><td>9</td><td>43</td><td>5</td></tr><tr><td>263882790666241</td><td>15</td><td>44</td><td>7</td></tr><tr><td>1231453023109121</td><td>35</td><td>45</td><td>3</td></tr><tr><td>1337006139375617</td><td>19</td><td>46</td><td>3</td></tr><tr><td>3799912185593857</td><td>27</td><td>47</td><td>5</td></tr><tr><td>4222124650659841</td><td>15</td><td>48</td><td>19</td></tr><tr><td>7881299347898369</td><td>7</td><td>50</td><td>6</td></tr><tr><td>31525197391593473</td><td>7</td><td>52</td><td>3</td></tr><tr><td>180143985094819841</td><td>5</td><td>55</td><td>6</td></tr><tr><td>1945555039024054273</td><td>27</td><td>56</td><td>5</td></tr><tr><td>4179340454199820289</td><td>29</td><td>57</td><td>3</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> NTT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搜索</title>
      <link href="/oi/post/search/"/>
      <url>/oi/post/search/</url>
      
        <content type="html"><![CDATA[<h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><ul><li>空</li></ul><h2 id="可行性剪枝"><a href="#可行性剪枝" class="headerlink" title="可行性剪枝:"></a>可行性剪枝:</h2><h2 id="最优性剪枝"><a href="#最优性剪枝" class="headerlink" title="最优性剪枝:"></a>最优性剪枝:</h2><h2 id="状态压缩"><a href="#状态压缩" class="headerlink" title="状态压缩:"></a>状态压缩:</h2>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Splay</title>
      <link href="/oi/post/Splay/"/>
      <url>/oi/post/Splay/</url>
      
        <content type="html"><![CDATA[<p>一个既简单又难写的算法<br>注意：</p><ul><li>空</li></ul><span id="more"></span><h2 id="下载讲义"><a href="#下载讲义" class="headerlink" title="下载讲义"></a>下载讲义</h2><p><a href="/upload/Splay.pdf">Splay.pdf</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 平衡树 </tag>
            
            <tag> Splay </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[CodeForces1000]G. Two-Paths</title>
      <link href="/oi/post/solution-CF1000G/"/>
      <url>/oi/post/solution-CF1000G/</url>
      
        <content type="html"><![CDATA[<p>作为压轴题，题目描述很长、很难理解<br>还没写好 QwQ</p><span id="more"></span><h2 id="G-Two-Paths"><a href="#G-Two-Paths" class="headerlink" title="G. Two-Paths"></a><center>G. Two-Paths</center></h2><center>time limit per test:3.5 seconds</center><center>memory limit per test:256 megabytes</center><center>input:standard input</center><center>output:standard output</center><p>You are given a weighted tree (undirected connected graph with no cycles, loops or multiple edges) with $$$n$$$ vertices. The edge $$${u_j, v_j}$$$ has weight $$$w_j$$$. Also each vertex $$$i$$$ has its own value $$$a_i$$$ assigned to it.</p><p>Let’s call a path starting in vertex $$$u$$$ and ending in vertex $$$v$$$, where each edge can appear no more than twice (regardless of direction), a 2-path. Vertices can appear in the 2-path multiple times (even start and end vertices).</p><p>For some 2-path $$$p$$$ profit $$$\text{Pr}(p) &#x3D; \sum\limits_{v \in \text{distinct vertices in } p}{a_v} - \sum\limits_{e \in \text{distinct edges in } p}{k_e \cdot w_e}$$$, where $$$k_e$$$ is the number of times edge $$$e$$$ appears in $$$p$$$. That is, vertices are counted once, but edges are counted the number of times they appear in $$$p$$$.</p><p>You are about to answer $$$m$$$ queries. Each query is a pair of vertices $$$(qu, qv)$$$. For each query find 2-path $$$p$$$ from $$$qu$$$ to $$$qv$$$ with maximal profit $$$\text{Pr}(p)$$$.</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>The first line contains two integers $$$n$$$ and $$$q$$$ ($$$2 \le n \le 3 \cdot 10^5$$$, $$$1 \le q \le 4 \cdot 10^5$$$) — the number of vertices in the tree and the number of queries.</p><p>The second line contains $$$n$$$ space-separated integers $$$a_1, a_2, \dots, a_n$$$ $$$(1 \le a_i \le 10^9)$$$ — the values of the vertices.</p><p>Next $$$n - 1$$$ lines contain descriptions of edges: each line contains three space separated integers $$$u_i$$$, $$$v_i$$$ and $$$w_i$$$ ($$$1 \le u_i, v_i \le n$$$, $$$u_i \neq v_i$$$, $$$1 \le w_i \le 10^9$$$) — there is edge $$${u_i, v_i}$$$ with weight $$$w_i$$$ in the tree.</p><p>Next $$$q$$$ lines contain queries (one per line). Each query contains two integers $$$qu_i$$$ and $$$qv_i$$$ $$$(1 \le qu_i, qv_i \le n)$$$ — endpoints of the 2-path you need to find.</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>For each query print one integer per line — maximal profit $$$\text{Pr}(p)$$$ of the some 2-path $$$p$$$ with the corresponding endpoints.</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><h4 id="input"><a href="#input" class="headerlink" title="input"></a>input</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">7 6</span><br><span class="line">6 5 5 3 2 1 2</span><br><span class="line">1 2 2</span><br><span class="line">2 3 2</span><br><span class="line">2 4 1</span><br><span class="line">4 5 1</span><br><span class="line">6 4 2</span><br><span class="line">7 3 25</span><br><span class="line">1 1</span><br><span class="line">4 4</span><br><span class="line">5 6</span><br><span class="line">6 4</span><br><span class="line">3 4</span><br><span class="line">3 7</span><br></pre></td></tr></table></figure><h4 id="output"><a href="#output" class="headerlink" title="output"></a>output</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">9</span><br><span class="line">9</span><br><span class="line">9</span><br><span class="line">8</span><br><span class="line">12</span><br><span class="line">-14</span><br></pre></td></tr></table></figure><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><p>Explanation of queries:</p><p>$$$(1, 1)$$$ — one of the optimal 2-paths is the following: $$$1 \rightarrow 2 \rightarrow 4 \rightarrow 5 \rightarrow 4 \rightarrow 2 \rightarrow 3 \rightarrow 2 \rightarrow 1$$$. $$$\text{Pr}(p) &#x3D; (a_1 + a_2 + a_3 + a_4 + a_5) - (2 \cdot w(1,2) + 2 \cdot w(2,3) + 2 \cdot w(2,4) + 2 \cdot w(4,5)) &#x3D; 21 - 2 \cdot 12 &#x3D; 9$$$.<br>$$$(4, 4)$$$: $$$4 \rightarrow 2 \rightarrow 1 \rightarrow 2 \rightarrow 3 \rightarrow 2 \rightarrow 4$$$. $$$\text{Pr}(p) &#x3D; (a_1 + a_2 + a_3 + a_4) - 2 \cdot (w(1,2) + w(2,3) + w(2,4)) &#x3D; 19 - 2 \cdot 10 &#x3D; 9$$$.<br>$$$(5, 6)$$$: $$$5 \rightarrow 4 \rightarrow 2 \rightarrow 3 \rightarrow 2 \rightarrow 1 \rightarrow 2 \rightarrow 4 \rightarrow 6$$$.<br>$$$(6, 4)$$$: $$$6 \rightarrow 4 \rightarrow 2 \rightarrow 1 \rightarrow 2 \rightarrow 3 \rightarrow 2 \rightarrow 4$$$.<br>$$$(3, 4)$$$: $$$3 \rightarrow 2 \rightarrow 1 \rightarrow 2 \rightarrow 4$$$.<br>$$$(3, 7)$$$: $$$3 \rightarrow 2 \rightarrow 1 \rightarrow 2 \rightarrow 4 \rightarrow 5 \rightarrow 4 \rightarrow 2 \rightarrow 3 \rightarrow 7$$$.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;还没写好 QwQ\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unsolved </tag>
            
            <tag> LCA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[CodeForces1000]F. One Occurrence</title>
      <link href="/oi/post/solution-CF1000F/"/>
      <url>/oi/post/solution-CF1000F/</url>
      
        <content type="html"><![CDATA[<p>一道有意思的线段树题目，维护一个pair值（下一个元素的位置,权值）对其维护最大值（就是影响越持久）<br>把问题离线处理，按照问题的右端点排序，这样就能满足单调性<br>输出的时候一定要判断一下first的值是否符合要求<br>注意：</p><ul><li>这棵线段树维护的是最大值，不管是<strong>修改</strong>还是查询都需要取max</li><li>如果没有nxt，数组的值要赋值为n+1</li></ul><span id="more"></span><h2 id="F-One-Occurrence"><a href="#F-One-Occurrence" class="headerlink" title="F. One Occurrence"></a><center>F. One Occurrence</center></h2><center>time limit per test:3 seconds</center><center>memory limit per test:768 megabytes</center><center>input:standard input</center><center>output:standard output</center><p>You are given an array $$$a$$$ consisting of $$$n$$$ integers, and $$$q$$$ queries to it. $$$i$$$-th query is denoted by two integers $$$l_i$$$ and $$$r_i$$$. For each query, you have to <strong>find</strong> any integer that occurs <strong>exactly once</strong> in the subarray of $$$a$$$ from index $$$l_i$$$ to index $$$r_i$$$ (a subarray is a contiguous subsegment of an array). For example, if $$$a &#x3D; [1, 1, 2, 3, 2, 4]$$$, then for query $$$(l_i &#x3D; 2, r_i &#x3D; 6)$$$ the subarray we are interested in is $$$[1, 2, 3, 2, 4]$$$, and possible answers are $$$1$$$, $$$3$$$ and $$$4$$$; for query $$$(l_i &#x3D; 1, r_i &#x3D; 2)$$$ the subarray we are interested in is $$$[1, 1]$$$, and there is no such element that occurs exactly once.</p><p>Can you answer all of the queries?</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>The first line contains one integer $$$n$$$ ($$$1 \le n \le 5 \cdot 10^5$$$).</p><p>The second line contains $$$n$$$ integers $$$a_1, a_2, \dots, a_n$$$ ($$$1 \le a_i \le 5 \cdot 10^5$$$).</p><p>The third line contains one integer $$$q$$$ ($$$1 \le q \le 5 \cdot 10^5$$$).</p><p>Then $$$q$$$ lines follow, $$$i$$$-th line containing two integers $$$l_i$$$ and $$$r_i$$$ representing $$$i$$$-th query ($$$1 \le l_i \le r_i \le n$$$).</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>Answer the queries as follows:</p><p>If there is no integer such that it occurs in the subarray from index $$$l_i$$$ to index $$$r_i$$$ exactly once, print $$$0$$$. Otherwise print any such integer.</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><h4 id="input"><a href="#input" class="headerlink" title="input"></a>input</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">1 1 2 3 2 4</span><br><span class="line">2</span><br><span class="line">2 6</span><br><span class="line">1 2</span><br></pre></td></tr></table></figure><h4 id="output"><a href="#output" class="headerlink" title="output"></a>output</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">0</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3F3F3F3F</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;pii;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> L,R,id;</span><br><span class="line">&#125;b[<span class="number">500005</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Tree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> L,R;</span><br><span class="line">pii val;</span><br><span class="line">&#125;T[<span class="number">2000005</span>];</span><br><span class="line"><span class="type">int</span> a[<span class="number">500005</span>],pre[<span class="number">500005</span>],nxt[<span class="number">500005</span>],h[<span class="number">500005</span>],ans[<span class="number">500005</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Modify</span><span class="params">(<span class="type">int</span> L,<span class="type">int</span> R,pii val,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L&gt;T[v].R||R&lt;T[v].L)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=T[v].L&amp;&amp;R&gt;=T[v].R)</span><br><span class="line">&#123;</span><br><span class="line">T[v].val=<span class="built_in">max</span>(T[v].val,val);<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Modify</span>(L,R,val,v&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="built_in">Modify</span>(L,R,val,(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> pii <span class="title">Query</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&gt;T[v].R||x&lt;T[v].L)<span class="keyword">return</span> <span class="built_in">make_pair</span>(-inf,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(T[v].L==T[v].R)<span class="keyword">return</span> T[v].val;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">max</span>(T[v].val,<span class="built_in">max</span>(<span class="built_in">Query</span>(x,v&lt;&lt;<span class="number">1</span>),<span class="built_in">Query</span>(x,(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Build</span><span class="params">(<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T[v].L=L;T[v].R=R;</span><br><span class="line">T[v].val=<span class="built_in">make_pair</span>(-inf,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(L==R)<span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> mid=(L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">Build</span>(L,mid,v&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="built_in">Build</span>(mid+<span class="number">1</span>,R,(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> Node&amp; a,<span class="type">const</span> Node&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.R&lt;b.R;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,j=<span class="number">1</span>,n,m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!h[a[i]])pre[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> pre[i]=h[a[i]];</span><br><span class="line">h[a[i]]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(h,<span class="number">0</span>,<span class="built_in">sizeof</span>(h));</span><br><span class="line"><span class="keyword">for</span>(i=n;i&gt;=<span class="number">1</span>;--i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!h[a[i]])nxt[i]=n+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> nxt[i]=h[a[i]];</span><br><span class="line">h[a[i]]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;b[i].L,&amp;b[i].R);</span><br><span class="line">b[i].id=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(b+<span class="number">1</span>,b+m+<span class="number">1</span>,cmp);</span><br><span class="line"><span class="built_in">Build</span>(<span class="number">1</span>,n+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(j&lt;=b[i].R)<span class="built_in">Modify</span>(pre[j]+<span class="number">1</span>,j,<span class="built_in">make_pair</span>(nxt[j],a[j]),<span class="number">1</span>),++j;</span><br><span class="line">pii tmp=<span class="built_in">Query</span>(b[i].L,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(tmp.first&gt;=j)ans[b[i].id]=tmp.second;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;++i)<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[CodeForces1000]E. We Need More Bosses</title>
      <link href="/oi/post/solution-CF1000E/"/>
      <url>/oi/post/solution-CF1000E/</url>
      
        <content type="html"><![CDATA[<p>无向图求割边的模板题，缩点后建立新图DP一下就可以了<br>对于每条割边，答案都可以为<code>dp[x]+1+dp[y]</code>，然后<code>dp[x]=dp[y]+1</code>（合并x和y）<br>只需要注意e1、e2的区别和h1、h2的区别就行了</p><span id="more"></span><h2 id="E-We-Need-More-Bosses"><a href="#E-We-Need-More-Bosses" class="headerlink" title="E. We Need More Bosses"></a><center>E. We Need More Bosses</center></h2><center>time limit per test:2 seconds</center><center>memory limit per test:256 megabytes</center><center>input:standard input</center><center>output:standard output</center><p>Your friend is developing a computer game. He has already decided how the game world should look like — it should consist of $$$n$$$ locations connected by $$$m$$$ <strong>two-way</strong> passages. The passages are designed in such a way that it should be possible to get from any location to any other location.</p><p>Of course, some passages should be guarded by the monsters (if you just can go everywhere without any difficulties, then it’s not fun, right?). Some crucial passages will be guarded by really fearsome monsters, requiring the hero to prepare for battle and designing his own tactics of defeating them (commonly these kinds of monsters are called <strong>bosses</strong>). And your friend wants you to help him place these bosses.</p><p>The game will start in location $$$s$$$ and end in location $$$t$$$, but these locations are not chosen yet. After choosing these locations, your friend will place a boss in each passage such that it is impossible to get from $$$s$$$ to $$$t$$$ without using this passage. Your friend wants to place as much bosses as possible (because more challenges means more fun, right?), so he asks you to help him determine the maximum possible number of bosses, considering that any location can be chosen as $$$s$$$ or as $$$t$$$.</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>The first line contains two integers $$$n$$$ and $$$m$$$ ($$$2 \le n \le 3 \cdot 10^5$$$, $$$n - 1 \le m \le 3 \cdot 10^5$$$) — the number of locations and passages, respectively.</p><p>Then $$$m$$$ lines follow, each containing two integers $$$x$$$ and $$$y$$$ ($$$1 \le x, y \le n$$$, $$$x \ne y$$$) describing the endpoints of one of the passages.</p><p>It is guaranteed that there is no pair of locations directly connected by two or more passages, and that any location is reachable from any other location.</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>Print one integer — the maximum number of bosses your friend can place, considering all possible choices for $$$s$$$ and $$$t$$$.</p><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><h4 id="input"><a href="#input" class="headerlink" title="input"></a>input</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5 5</span><br><span class="line">1 2</span><br><span class="line">2 3</span><br><span class="line">3 1</span><br><span class="line">4 1</span><br><span class="line">5 2</span><br></pre></td></tr></table></figure><h4 id="output"><a href="#output" class="headerlink" title="output"></a>output</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><h4 id="input-1"><a href="#input-1" class="headerlink" title="input"></a>input</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">4 3</span><br><span class="line">1 2</span><br><span class="line">4 3</span><br><span class="line">3 2</span><br></pre></td></tr></table></figure><h4 id="output-1"><a href="#output-1" class="headerlink" title="output"></a>output</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> to,next;</span><br><span class="line">&#125;e1[<span class="number">600005</span>],e2[<span class="number">600005</span>];</span><br><span class="line"><span class="type">int</span> low[<span class="number">300005</span>],dfn[<span class="number">300005</span>],h1[<span class="number">300005</span>],h2[<span class="number">300005</span>],belong[<span class="number">300005</span>],f[<span class="number">300005</span>],cnt1,cnt2,sign,ans,SCC;</span><br><span class="line">stack&lt;<span class="type">int</span>&gt;s;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Addedge1</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e1[++cnt1]=(Node)&#123;y,h1[x]&#125;;h1[x]=cnt1;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Addedge2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e2[++cnt2]=(Node)&#123;y,h2[x]&#125;;h2[x]=cnt2;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Tarjan</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,y,tmp;</span><br><span class="line">low[x]=dfn[x]=++sign;</span><br><span class="line">s.<span class="built_in">push</span>(x);</span><br><span class="line"><span class="keyword">for</span>(i=h1[x];i;i=e1[i].next)</span><br><span class="line">&#123;</span><br><span class="line">y=e1[i].to;</span><br><span class="line"><span class="keyword">if</span>(y==pre)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(!dfn[y])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Tarjan</span>(y,x);</span><br><span class="line">low[x]=<span class="built_in">min</span>(low[x],low[y]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> low[x]=<span class="built_in">min</span>(low[x],dfn[y]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(low[x]==dfn[x])</span><br><span class="line">&#123;</span><br><span class="line">++SCC;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">tmp=s.<span class="built_in">top</span>();s.<span class="built_in">pop</span>();</span><br><span class="line">belong[tmp]=SCC;</span><br><span class="line">&#125;<span class="keyword">while</span>(tmp!=x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,y;</span><br><span class="line"><span class="keyword">for</span>(i=h2[x];i;i=e2[i].next)</span><br><span class="line">&#123;</span><br><span class="line">y=e2[i].to;</span><br><span class="line"><span class="keyword">if</span>(y==pre)<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs</span>(y,x);</span><br><span class="line">ans=<span class="built_in">max</span>(ans,f[x]+f[y]+<span class="number">1</span>);</span><br><span class="line">f[x]=<span class="built_in">max</span>(f[x],f[y]+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,x,y,n,m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line"><span class="built_in">Addedge1</span>(x,y);</span><br><span class="line"><span class="built_in">Addedge1</span>(y,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Tarjan</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(x=<span class="number">1</span>;x&lt;=n;++x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i=h1[x];i;i=e1[i].next)</span><br><span class="line">&#123;</span><br><span class="line">y=e1[i].to;</span><br><span class="line"><span class="keyword">if</span>(belong[x]==belong[y])<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">Addedge2</span>(belong[x],belong[y]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 无向图的连通性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[CodeForces1000]D. Yet Another Problem On a Subsequence</title>
      <link href="/oi/post/solution-CF1000D/"/>
      <url>/oi/post/solution-CF1000D/</url>
      
        <content type="html"><![CDATA[<p>DP经典题目，枚举第一个正整数就得到了区间长度，再暴力枚举区间最后一个值，$O(n^2)$的DP就搞定了～<br>在DP的时候，可以从i优化到j而不需要倒着循环来DP，f[n+1]就是答案<br>注意：f[i]的初值为1！</p><span id="more"></span><h2 id="D-Yet-Another-Problem-On-a-Subsequence"><a href="#D-Yet-Another-Problem-On-a-Subsequence" class="headerlink" title="D. Yet Another Problem On a Subsequence"></a><center>D. Yet Another Problem On a Subsequence</center></h2><center>time limit per test:2 seconds</center><center>memory limit per test:256 megabytes</center><center>input:standard input</center><center>output:standard output</center><p>The sequence of integers $$$a_1, a_2, \dots, a_k$$$ is called a good array if $$$a_1 &#x3D; k - 1$$$ and $$$a_1 &gt; 0$$$. For example, the sequences $$$[3, -1, 44, 0], [1, -99]$$$ are good arrays, and the sequences $$$[3, 7, 8], [2, 5, 4, 1], [0]$$$ — are not.</p><p>A sequence of integers is called good if it can be divided into a positive number of good arrays. Each good array should be a subsegment of sequence and each element of the sequence should belong to exactly one array. For example, the sequences $$$[2, -3, 0, 1, 4]$$$, $$$[1, 2, 3, -3, -9, 4]$$$ are good, and the sequences $$$[2, -3, 0, 1]$$$, $$$[1, 2, 3, -3 -9, 4, 1]$$$ — are not.</p><p>For a given sequence of numbers, count the number of its <strong>subsequences</strong> that are good sequences, and print the number of such subsequences modulo <strong>998244353</strong>.</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>The first line contains the number $$$n~(1 \le n \le 10^3)$$$ — the length of the initial sequence. The following line contains $$$n$$$ integers $$$a_1, a_2, \dots, a_n~(-10^9 \le a_i \le 10^9)$$$ — the sequence itself.</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>In the single line output one integer — the number of subsequences of the original sequence that are good sequences, taken modulo <strong>998244353</strong>.</p><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><h4 id="input"><a href="#input" class="headerlink" title="input"></a>input</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">2 1 1</span><br></pre></td></tr></table></figure><h4 id="output"><a href="#output" class="headerlink" title="output"></a>output</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><h4 id="input-1"><a href="#input-1" class="headerlink" title="input"></a>input</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">1 1 1 1</span><br></pre></td></tr></table></figure><h4 id="output-1"><a href="#output-1" class="headerlink" title="output"></a>output</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7</span><br></pre></td></tr></table></figure><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><p>In the first test case, two good subsequences — $$$[a_1, a_2, a_3]$$$ and $$$[a_2, a_3]$$$.</p><p>In the second test case, seven good subsequences — $$$[a_1, a_2, a_3, a_4], [a_1, a_2], [a_1, a_3], [a_1, a_4], [a_2, a_3], [a_2, a_4]$$$ and $$$[a_3, a_4]$$$.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[<span class="number">1005</span>];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> C[<span class="number">1005</span>][<span class="number">1005</span>],f[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,j,n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=n;++i)C[i][<span class="number">0</span>]=C[i][i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;i;++j)C[i][j]=(C[i<span class="number">-1</span>][j<span class="number">-1</span>]+C[i<span class="number">-1</span>][j])%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]),f[i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]&lt;=<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(j=i+a[i]+<span class="number">1</span>;j&lt;=n+<span class="number">1</span>;++j)</span><br><span class="line">&#123;</span><br><span class="line">f[j]=(f[j]+f[i]*C[j-i<span class="number">-1</span>][a[i]])%mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,f[n+<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[CodeForces1000]C. Covered Points Count</title>
      <link href="/oi/post/solution-CF1000C/"/>
      <url>/oi/post/solution-CF1000C/</url>
      
        <content type="html"><![CDATA[<p>区间前缀和的经典问题，离散化后求前缀和（值即为覆盖的条数），用离散化之前的值直接计算即可<br>注意:</p><ul><li>离散化后的值有$2n$个，sum数组和b数组要开n的两倍</li><li>只需要对L和R+1进行离散化就可以了，但记住取lower_bound的时候也要取R+1的排名，所以算前缀和的时候是–sum[y]而不是–sum[y+1]</li><li>相邻两个端点的值不相同，在最后计算ans的时候只能算一边！</li></ul><span id="more"></span><h2 id="C-Covered-Points-Count"><a href="#C-Covered-Points-Count" class="headerlink" title="C. Covered Points Count"></a><center>C. Covered Points Count</center></h2><center>time limit per test:3 seconds</center><center>memory limit per test:256 megabytes</center><center>input:standard input</center><center>output:standard output</center><p>You are given $$$n$$$ segments on a coordinate line; each endpoint of every segment has integer coordinates. Some segments can degenerate to points. Segments can intersect with each other, be nested in each other or even coincide.</p><p>Your task is the following: for every $$$k \in [1..n]$$$, calculate the number of points with integer coordinates such that the number of segments that cover these points equals $$$k$$$. A segment with endpoints $$$l_i$$$ and $$$r_i$$$ covers point $$$x$$$ if and only if $$$l_i \le x \le r_i$$$.</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>The first line of the input contains one integer $$$n$$$ ($$$1 \le n \le 2 \cdot 10^5$$$) — the number of segments.</p><p>The next $$$n$$$ lines contain segments. The $$$i$$$-th line contains a pair of integers $$$l_i, r_i$$$ ($$$0 \le l_i \le r_i \le 10^{18}$$$) — the endpoints of the $$$i$$$-th segment.</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>Print $$$n$$$ space separated integers $$$cnt_1, cnt_2, \dots, cnt_n$$$, where $$$cnt_i$$$ is equal to the number of points such that the number of segments that cover these points equals to $$$i$$$.</p><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><h4 id="input"><a href="#input" class="headerlink" title="input"></a>input</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">0 3</span><br><span class="line">1 3</span><br><span class="line">3 8</span><br></pre></td></tr></table></figure><h4 id="output"><a href="#output" class="headerlink" title="output"></a>output</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6 2 1 </span><br></pre></td></tr></table></figure><h4 id="input-1"><a href="#input-1" class="headerlink" title="input"></a>input</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 3</span><br><span class="line">2 4</span><br><span class="line">5 7</span><br></pre></td></tr></table></figure><h4 id="output-1"><a href="#output-1" class="headerlink" title="output"></a>output</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5 2 0 </span><br></pre></td></tr></table></figure><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><p>The picture describing the first example:</p><img src="/oi/post/solution-CF1000C/1.png" class="" title="1.png"><p>Points with coordinates $$$[0, 4, 5, 6, 7, 8]$$$ are covered by one segment, points $$$[1, 2]$$$ are covered by two segments and point $$$[3]$$$ is covered by three segments.</p><p>The picture describing the second example:</p><img src="/oi/post/solution-CF1000C/2.png" class="" title="2.png"><p>Points $$$[1, 4, 5, 6, 7]$$$ are covered by one segment, points $$$[2, 3]$$$ are covered by two segments and there are no points covered by three segments.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> L,R;</span><br><span class="line">&#125;a[<span class="number">200005</span>];</span><br><span class="line"><span class="type">int</span> sum[<span class="number">400005</span>];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> b[<span class="number">400005</span>],ans[<span class="number">200005</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,n,x,y,num=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;a[i].L,&amp;a[i].R);</span><br><span class="line">b[++num]=a[i].L;</span><br><span class="line">b[++num]=a[i].R+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(b+<span class="number">1</span>,b+num+<span class="number">1</span>);</span><br><span class="line">num=<span class="built_in">unique</span>(b+<span class="number">1</span>,b+num+<span class="number">1</span>)-(b+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">x=<span class="built_in">lower_bound</span>(b+<span class="number">1</span>,b+num+<span class="number">1</span>,a[i].L)-b;</span><br><span class="line">y=<span class="built_in">lower_bound</span>(b+<span class="number">1</span>,b+num+<span class="number">1</span>,a[i].R+<span class="number">1</span>)-b;</span><br><span class="line">++sum[x];--sum[y];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=num;++i)sum[i]+=sum[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;num;++i)</span><br><span class="line">&#123;</span><br><span class="line">ans[sum[i]]+=b[i+<span class="number">1</span>]-b[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)<span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>,ans[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前缀和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[CodeForces1000]B. Light It Up</title>
      <link href="/oi/post/solution-CF1000B/"/>
      <url>/oi/post/solution-CF1000B/</url>
      
        <content type="html"><![CDATA[<p>一道贪心的简单题，插入无非就是两种情况：</p><ul><li>在开灯的区间内插入，应该让插入的元素尽可能地靠后</li><li>在关灯的区间内插入，应该让插入的元素尽可能地靠前</li></ul><p>注意:</p><ul><li>g1和g2的含义，g1是指不落单（最后两次操作刚好完成一次开关）的后缀和，而g2则指的是会落单的后缀和</li><li>i+1和i+2的选择，应该在纸上画图而不是凭空乱想</li><li>因为n的奇偶性不知道，所以ans的初始值为末尾两个数的最大值</li></ul><span id="more"></span><h2 id="B-Light-It-Up"><a href="#B-Light-It-Up" class="headerlink" title="B. Light It Up"></a><center>B. Light It Up</center></h2><center>time limit per test:1 second</center><center>memory limit per test:256 megabytes</center><center>input:standard input</center><center>output:standard output</center><p>Recently, you bought a brand new smart lamp with programming features. At first, you set up a schedule to the lamp. Every day it will turn power on at moment $$$0$$$ and turn power off at moment $$$M$$$. Moreover, the lamp allows you to set a program of switching its state (states are “lights on” and “lights off”). Unfortunately, some program is already installed into the lamp.</p><p>The lamp allows only good programs. Good program can be represented as a non-empty array $$$a$$$, where $$$0 &lt; a_1 &lt; a_2 &lt; \dots &lt; a_{|a|} &lt; M$$$. All $$$a_i$$$ must be integers. Of course, preinstalled program is a good program.</p><p>The lamp follows program $$$a$$$ in next manner: at moment $$$0$$$ turns power and light on. Then at moment $$$a_i$$$ the lamp flips its state to opposite (if it was lit, it turns off, and vice versa). The state of the lamp flips instantly: for example, if you turn the light off at moment $$$1$$$ and then do nothing, the total time when the lamp is lit will be $$$1$$$. Finally, at moment $$$M$$$ the lamp is turning its power off regardless of its state.</p><p>Since you are not among those people who read instructions, and you don’t understand the language it’s written in, you realize (after some testing) the only possible way to alter the preinstalled program. You can insert at most one element into the program $$$a$$$, so it still should be a good program after alteration. Insertion can be done between any pair of consecutive elements of $$$a$$$, or even at the begining or at the end of $$$a$$$.</p><p>Find such a way to alter the program that the total time when the lamp is lit is maximum possible. Maybe you should leave program untouched. If the lamp is lit from $$$x$$$ till moment $$$y$$$, then its lit for $$$y - x$$$ units of time. Segments of time when the lamp is lit are summed up.</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>First line contains two space separated integers $$$n$$$ and $$$M$$$ ($$$1 \le n \le 10^5$$$, $$$2 \le M \le 10^9$$$) — the length of program $$$a$$$ and the moment when power turns off.</p><p>Second line contains $$$n$$$ space separated integers $$$a_1, a_2, \dots, a_n$$$ ($$$0 &lt; a_1 &lt; a_2 &lt; \dots &lt; a_n &lt; M$$$) — initially installed program $$$a$$$.</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>Print the only integer — maximum possible total time when the lamp is lit.</p><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><h4 id="input"><a href="#input" class="headerlink" title="input"></a>input</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3 10</span><br><span class="line">4 6 7</span><br></pre></td></tr></table></figure><h4 id="output"><a href="#output" class="headerlink" title="output"></a>output</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8</span><br></pre></td></tr></table></figure><h4 id="input-1"><a href="#input-1" class="headerlink" title="input"></a>input</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2 12</span><br><span class="line">1 10</span><br></pre></td></tr></table></figure><h4 id="output-1"><a href="#output-1" class="headerlink" title="output"></a>output</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9</span><br></pre></td></tr></table></figure><h4 id="input-2"><a href="#input-2" class="headerlink" title="input"></a>input</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2 7</span><br><span class="line">3 4</span><br></pre></td></tr></table></figure><h4 id="output-2"><a href="#output-2" class="headerlink" title="output"></a>output</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><p>In the first example, one of possible optimal solutions is to insert value $$$x &#x3D; 3$$$ before $$$a_1$$$, so program will be $$$[3, 4, 6, 7]$$$ and time of lamp being lit equals $$$(3 - 0) + (6 - 4) + (10 - 7) &#x3D; 8$$$. Other possible solution is to insert $$$x &#x3D; 5$$$ in appropriate place.</p><p>In the second example, there is only one optimal solution: to insert $$$x &#x3D; 2$$$ between $$$a_1$$$ and $$$a_2$$$. Program will become $$$[1, 2, 10]$$$, and answer will be $$$(1 - 0) + (10 - 2) &#x3D; 9$$$.</p><p>In the third example, optimal answer is to leave program untouched, so answer will be $$$(3 - 0) + (7 - 4) &#x3D; 6$$$.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[<span class="number">100005</span>],f[<span class="number">100005</span>],g1[<span class="number">100005</span>],g2[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,n,m,ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">a[n+<span class="number">1</span>]=m;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n+<span class="number">2</span>;i+=<span class="number">2</span>)f[i]=f[i<span class="number">-2</span>]+a[i]-a[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(i=n;i&gt;=<span class="number">1</span>;i-=<span class="number">2</span>)g1[i]=g1[i+<span class="number">2</span>]+a[i+<span class="number">1</span>]-a[i];</span><br><span class="line"><span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i-=<span class="number">2</span>)g2[i]=g2[i+<span class="number">2</span>]+a[i+<span class="number">1</span>]-a[i];</span><br><span class="line">ans=<span class="built_in">max</span>(f[n+<span class="number">1</span>],f[n]);</span><br><span class="line"><span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n+<span class="number">1</span>;i+=<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]-a[i<span class="number">-1</span>]&lt;=<span class="number">1</span>)<span class="keyword">continue</span>;</span><br><span class="line">ans=<span class="built_in">max</span>(ans,f[i]<span class="number">-1</span>+g2[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i+=<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i+<span class="number">1</span>]-a[i]&lt;=<span class="number">1</span>)<span class="keyword">continue</span>;</span><br><span class="line">ans=<span class="built_in">max</span>(ans,f[i]+a[i+<span class="number">1</span>]-a[i]<span class="number">-1</span>+g2[i+<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n+<span class="number">1</span>;i+=<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]-a[i<span class="number">-1</span>]&lt;=<span class="number">1</span>)<span class="keyword">continue</span>;</span><br><span class="line">ans=<span class="built_in">max</span>(ans,f[i]<span class="number">-1</span>+g1[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i+=<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i+<span class="number">1</span>]-a[i]&lt;=<span class="number">1</span>)<span class="keyword">continue</span>;</span><br><span class="line">ans=<span class="built_in">max</span>(ans,f[i]+a[i+<span class="number">1</span>]-a[i]<span class="number">-1</span>+g1[i+<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[CodeForces1000]A. Codehorses T-shirts</title>
      <link href="/oi/post/solution-CF1000A/"/>
      <url>/oi/post/solution-CF1000A/</url>
      
        <content type="html"><![CDATA[<p>一道简单但是题面很难懂的水题，说了半天就是求不同型号的个数而不是需要修改几个字母，用unordered_map维护即可（不需要求前驱后继就用unordered_map会更快）</p><span id="more"></span><h2 id="A-Codehorses-T-shirts"><a href="#A-Codehorses-T-shirts" class="headerlink" title="A. Codehorses T-shirts"></a><center>A. Codehorses T-shirts</center></h2><center>time limit per test:2 seconds</center><center>memory limit per test:256 megabytes</center><center>input:standard input</center><center>output:standard output</center><p>Codehorses has just hosted the second Codehorses Cup. This year, the same as the previous one, organizers are giving T-shirts for the winners.</p><p>The valid sizes of T-shirts are either “M” or from $$$0$$$ to $$$3$$$ “X” followed by “S” or “L”. For example, sizes “M”, “XXS”, “L”, “XXXL” are valid and “XM”, “Z”, “XXXXL” are not.</p><p>There are $$$n$$$ winners to the cup for both the previous year and the current year. Ksenia has a list with the T-shirt sizes printed for the last year cup and is yet to send the new list to the printing office.</p><p>Organizers want to distribute the prizes as soon as possible, so now Ksenia is required not to write the whole list from the scratch but just make some changes to the list of the previous year. In one second she can choose arbitrary position in any word and replace its character with some uppercase Latin letter. Ksenia can’t remove or add letters in any of the words.</p><p>What is the minimal number of seconds Ksenia is required to spend to change the last year list to the current one?</p><p>The lists are unordered. That means, two lists are considered equal if and only if the number of occurrences of any string is the same in both lists.</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>The first line contains one integer $$$n$$$ ($$$1 \le n \le 100$$$) — the number of T-shirts.</p><p>The $$$i$$$-th of the next $$$n$$$ lines contains $$$a_i$$$ — the size of the $$$i$$$-th T-shirt of the list for the previous year.</p><p>The $$$i$$$-th of the next $$$n$$$ lines contains $$$b_i$$$ — the size of the $$$i$$$-th T-shirt of the list for the current year.</p><p>It is guaranteed that all the sizes in the input are valid. It is also guaranteed that Ksenia can produce list $$$b$$$ from the list $$$a$$$.</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>Print the minimal number of seconds Ksenia is required to spend to change the last year list to the current one. If the lists are already equal, print 0.</p><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><h4 id="input"><a href="#input" class="headerlink" title="input"></a>input</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">XS</span><br><span class="line">XS</span><br><span class="line">M</span><br><span class="line">XL</span><br><span class="line">S</span><br><span class="line">XS</span><br></pre></td></tr></table></figure><h4 id="output"><a href="#output" class="headerlink" title="output"></a>output</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><h4 id="input-1"><a href="#input-1" class="headerlink" title="input"></a>input</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">XXXL</span><br><span class="line">XXL</span><br><span class="line">XXL</span><br><span class="line">XXXS</span><br></pre></td></tr></table></figure><h4 id="output-1"><a href="#output-1" class="headerlink" title="output"></a>output</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><h4 id="input-2"><a href="#input-2" class="headerlink" title="input"></a>input</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">M</span><br><span class="line">XS</span><br><span class="line">XS</span><br><span class="line">M</span><br></pre></td></tr></table></figure><h4 id="output-2"><a href="#output-2" class="headerlink" title="output"></a>output</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><p>In the first example Ksenia can replace “M” with “S” and “S” in one of the occurrences of “XS” with “L”.</p><p>In the second example Ksenia should replace “L” in “XXXL” with “S”.</p><p>In the third example lists are equal.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">unordered_map&lt;string,<span class="type">int</span>&gt;mp;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> i,n,ans=<span class="number">0</span>;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">string str;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;str;</span><br><span class="line">++mp[str];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;str;</span><br><span class="line"><span class="type">int</span>&amp; tmp=mp[str];</span><br><span class="line"><span class="keyword">if</span>(tmp&gt;<span class="number">0</span>)--tmp;</span><br><span class="line"><span class="keyword">else</span> ++ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Trie树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Educational Codeforces Round 46</title>
      <link href="/oi/post/compete-CF1000/"/>
      <url>/oi/post/compete-CF1000/</url>
      
        <content type="html"><![CDATA[<p>一场简单题之战，就是比做题的速度以及正确率（感觉出题人去看球赛去了）</p><span id="more"></span><h2 id="A-Codehorses-T-shirts"><a href="#A-Codehorses-T-shirts" class="headerlink" title="A. Codehorses T-shirts"></a>A. Codehorses T-shirts</h2><p>一道简单但是题面很难懂的水题，说了半天就是求不同型号的个数而不是需要修改几个字母，用map维护即可<br><a href="../solution-CF1000A/">A题代码</a></p><h2 id="B-Light-It-Up"><a href="#B-Light-It-Up" class="headerlink" title="B. Light It Up"></a>B. Light It Up</h2><p>一道贪心的简单题，插入无非就是两种情况： </p><ul><li>在开灯的区间内插入，应该让插入的元素尽可能地靠后</li><li>在关灯的区间内插入，应该让插入的元素尽可能地靠前</li></ul><p><a href="../solution-CF1000B/">B题代码</a></p><h2 id="C-Covered-Points-Count"><a href="#C-Covered-Points-Count" class="headerlink" title="C. Covered Points Count"></a>C. Covered Points Count</h2><p>区间前缀和的经典问题，离散化后求前缀和（值即为覆盖的条数），用离散化之前的值直接计算即可<br><a href="../solution-CF1000C/">C题代码</a></p><h2 id="D-Yet-Another-Problem-On-a-Subsequence"><a href="#D-Yet-Another-Problem-On-a-Subsequence" class="headerlink" title="D. Yet Another Problem On a Subsequence"></a>D. Yet Another Problem On a Subsequence</h2><p>DP经典题目，枚举第一个正整数就得到了区间长度，再暴力枚举区间最后一个值，$O(n^2)$的DP就搞定了<br><a href="../solution-CF1000D/">D题代码</a></p><h2 id="E-We-Need-More-Bosses"><a href="#E-We-Need-More-Bosses" class="headerlink" title="E. We Need More Bosses"></a>E. We Need More Bosses</h2><p>无向图求割边的模板题，缩点后建立新图DP一下就可以了<br>对于每条割边，答案都可以为<code>dp[x]+1+dp[y]</code>，然后<code>dp[x]=dp[y]+1</code>（合并x和y）<br><a href="../solution-CF1000E/">E题代码</a></p><h2 id="F-One-Occurrence"><a href="#F-One-Occurrence" class="headerlink" title="F. One Occurrence"></a>F. One Occurrence</h2><p>一道有意思的线段树题目，维护一个pair值（下一个元素的位置,权值）对其维护最大值（就是影响越持久）<br>把问题离线处理，按照问题的右端点排序，这样就能满足单调性<br>输出的时候一定要判断一下first的值是否符合要求<br><a href="../solution-CF1000F/">F题代码</a></p><h2 id="G-Two-Paths"><a href="#G-Two-Paths" class="headerlink" title="G. Two-Paths"></a>G. Two-Paths</h2><p>作为压轴题，题目描述很长、很难理解<br>还没写好 QwQ<br><a href="../solution-CF1000G/">G题代码</a></p>]]></content>
      
      
      <categories>
          
          <category> 比赛 </category>
          
          <category> CF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>solution-code1433</title>
      <link href="/oi/post/solution-code1433/"/>
      <url>/oi/post/solution-code1433/</url>
      
        <content type="html"><![CDATA[<p>模板题，没什么好说的，正着算一遍，反着算一遍，乘积即为答案</p><span id="more"></span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,a[<span class="number">50005</span>],b[<span class="number">50005</span>],c[<span class="number">50005</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="keyword">return</span> x&amp;(-x);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(x&lt;=<span class="number">50002</span>)c[x]+=v,x+=<span class="built_in">lowbit</span>(x);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">Query</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LL sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x&gt;=<span class="number">1</span>)sum+=c[x],x-=<span class="built_in">lowbit</span>(x);</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line">LL f1[<span class="number">50005</span>],f2[<span class="number">50005</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">LSH</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,num;</span><br><span class="line"><span class="built_in">memcpy</span>(b,a,<span class="built_in">sizeof</span>(a));</span><br><span class="line"><span class="built_in">sort</span>(b+<span class="number">1</span>,b+n+<span class="number">1</span>);</span><br><span class="line">num=<span class="built_in">unique</span>(b+<span class="number">1</span>,b+n+<span class="number">1</span>)-(b+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)a[i]=<span class="built_in">lower_bound</span>(b+<span class="number">1</span>,b+num+<span class="number">1</span>,a[i])-b;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line">LL ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line"><span class="built_in">LSH</span>();</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Add</span>(a[i],<span class="number">1</span>);</span><br><span class="line">f1[i]=<span class="built_in">Query</span>(a[i]<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="built_in">sizeof</span>(c));</span><br><span class="line"><span class="keyword">for</span>(i=n;i&gt;=<span class="number">1</span>;--i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Add</span>(a[i],<span class="number">1</span>);</span><br><span class="line">f2[i]=<span class="built_in">Query</span>(a[i]<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)ans+=f1[i]*f2[i];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>solution-code2050</title>
      <link href="/oi/post/solution-code2050/"/>
      <url>/oi/post/solution-code2050/</url>
      
        <content type="html"><![CDATA[<p>相信大家一眼就看出是二分答案的模板题，问题就是如何检验是否可行<br>我们先求出最小的能够包含所有点的矩形，暴力选取四个角分别覆盖，再这样操作一次，检验最后一个矩形的大小就可以了<br>注意覆盖完成后要恢复到初始状态！！</p><span id="more"></span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3F3F3F3F</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line"><span class="type">bool</span> cover[<span class="number">2</span>];</span><br><span class="line">&#125;a[<span class="number">20005</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Rectangle</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x1,y1,x2,y2;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Rectangle <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Rectangle rec;</span><br><span class="line">rec.x1=rec.y1=inf;</span><br><span class="line">rec.x2=rec.y2=-inf;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i].cover[<span class="number">0</span>]||a[i].cover[<span class="number">1</span>])<span class="keyword">continue</span>;</span><br><span class="line">rec.x1=<span class="built_in">min</span>(rec.x1,a[i].x);</span><br><span class="line">rec.y1=<span class="built_in">min</span>(rec.y1,a[i].y);</span><br><span class="line">rec.x2=<span class="built_in">max</span>(rec.x2,a[i].x);</span><br><span class="line">rec.y2=<span class="built_in">max</span>(rec.y2,a[i].y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> rec;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">cover</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> len,<span class="type">int</span> index,<span class="type">bool</span> flag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i].x&gt;=x&amp;&amp;a[i].x&lt;=x+len&amp;&amp;a[i].y&gt;=y&amp;&amp;a[i].y&lt;=y+len)a[i].cover[index]=flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">cover</span><span class="params">(Rectangle rec,<span class="type">int</span> limit,<span class="type">int</span> corner,<span class="type">int</span> index,<span class="type">bool</span> flag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(corner==<span class="number">1</span>)<span class="built_in">cover</span>(rec.x1,rec.x2,limit,index,flag);</span><br><span class="line"><span class="keyword">if</span>(corner==<span class="number">2</span>)<span class="built_in">cover</span>(rec.x2-limit,rec.y1,limit,index,flag);</span><br><span class="line"><span class="keyword">if</span>(corner==<span class="number">3</span>)<span class="built_in">cover</span>(rec.x1,rec.y2-limit,limit,index,flag);</span><br><span class="line"><span class="keyword">if</span>(corner==<span class="number">4</span>)<span class="built_in">cover</span>(rec.x2-limit,rec.y2-limit,limit,index,flag);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> limit)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)a[i].cover[<span class="number">0</span>]=a[i].cover[<span class="number">1</span>]=<span class="literal">false</span>;</span><br><span class="line">Rectangle rec1=<span class="built_in">get</span>();</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">4</span>;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cover</span>(rec1,limit,i,<span class="number">0</span>,<span class="literal">true</span>);</span><br><span class="line">Rectangle rec2=<span class="built_in">get</span>();</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=<span class="number">4</span>;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cover</span>(rec2,limit,j,<span class="number">1</span>,<span class="literal">true</span>);</span><br><span class="line">Rectangle rec3=<span class="built_in">get</span>();</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">max</span>(rec3.x2-rec3.x1,rec3.y2-rec3.y1)&lt;=limit)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">cover</span>(rec2,limit,j,<span class="number">1</span>,<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cover</span>(rec1,limit,i,<span class="number">0</span>,<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;2050.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line"><span class="type">int</span> i,L,R,mid;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a[i].x,&amp;a[i].y);</span><br><span class="line">Rectangle rec=<span class="built_in">get</span>();</span><br><span class="line">L=<span class="number">0</span>;R=<span class="built_in">max</span>(rec.x2-rec.x1,rec.y2-rec.y1);</span><br><span class="line"><span class="keyword">while</span>(L&lt;R)</span><br><span class="line">&#123;</span><br><span class="line">mid=(L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">check</span>(mid))R=mid;</span><br><span class="line"><span class="keyword">else</span> L=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,L);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[NOIP2003]神经网络</title>
      <link href="/oi/post/solution-code1065/"/>
      <url>/oi/post/solution-code1065/</url>
      
        <content type="html"><![CDATA[<p><strong>一道<del>语文题</del></strong><br>$c$的含义是兴奋度，只有大于0的时候才是兴奋状态<br>$u$的含义是兴奋阀值，只有大于阀值才能传递剩余的兴奋状态<br>注意输入模块的兴奋度要加上兴奋阀值</p><span id="more"></span><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h3><p>人工神经网络（Artificial Neural Network）是一种新兴的具有自我学习能力的计算系统，在模式识别、函数逼近及贷款风险评估等诸多领域有广泛的应用。对神经网络的研究一直是当今的热门方向，兰兰同学在自学了一本神经网络的入门书籍后，提出了一个简化模型，他希望你能帮助他用程序检验这个神经网络模型的实用性。</p><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>在兰兰的模型中，神经网络就是一张有向图，图中的节点称为神经元，而且两个神经元之间至多有一条边相连，下图是一个神经元的例子：</p><img src="/oi/post/solution-code1065/1.jpg" class="" title="1.jpg"><p>神经元（编号为1）<br>图中，$X_1—X_3$是信息输入渠道，$Y_1－Y_2$是信息输出渠道，$C_1$表示神经元目前的状态，$U_i$是阈值，可视为神经元的一个内在参数。<br>神经元按一定的顺序排列，构成整个神经网络。在兰兰的模型之中，神经网络中的神经无分为几层；称为输入层、输出层，和若干个中间层。每层神经元只向下一层的神经元输出信息，只从上一层神经元接受信息。下图是一个简单的三层神经网络的例子。</p><img src="/oi/post/solution-code1065/2.jpg" class="" title="2.jpg"><p>兰兰规定，$C_i$服从公式：$C_i&#x3D;\sum\limits_{(j,i) \in E} W_{ji}C_j-U_i$（其中n是网络中所有神经元的数目）<br>公式中的$W_{ji}$（可能为负值）表示连接$j$号神经元和$i$号神经元的边的权值。当$C_i$大于$0$时，该神经元处于兴奋状态，否则就处于平静状态。当神经元处于兴奋状态时，下一秒它会向其他神经元传送信号，信号的强度为$C_i$。<br>如此．在输入层神经元被激发之后，整个网络系统就在信息传输的推动下进行运作。<br>现在，给定一个神经网络，及当前输入层神经元的状态（$C_i$），要求你的程序运算出最后网络输出层的状态。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>输入文件第一行是两个整数$n(1\le n\le 20)$和$p$。接下来$n$行，每行两个整数，第$i＋1$行是神经元$i$最初状态和其阈值（$U_i$），非输入层的神经元开始时状态必然为$0$。再下面$P$行，每行由两个整数$i\ j$及一个整数$W_{ij}$，表示连接神经元$i$、$j$的边权值为$W_{ij}$。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出文件包含若干行，每行有两个整数，分别对应一个神经元的编号，及其最后的状态，两个整数间以空格分隔。仅输出最后状态非零的输出层神经元状态，并且按照编号由小到大顺序输出！<br>若输出层的神经元最后状态均为$0$，则输出<code>NULL</code>。</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">5 6</span><br><span class="line">1 0</span><br><span class="line">1 0</span><br><span class="line">0 1</span><br><span class="line">0 1</span><br><span class="line">0 1</span><br><span class="line">1 3 1</span><br><span class="line">1 4 1</span><br><span class="line">1 5 1</span><br><span class="line">2 3 1</span><br><span class="line">2 4 1</span><br><span class="line">2 5 1</span><br></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3 1</span><br><span class="line">4 1</span><br><span class="line">5 1</span><br></pre></td></tr></table></figure><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> c,u;</span><br><span class="line">&#125;a[<span class="number">205</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> to,next,v;</span><br><span class="line">&#125;e[<span class="number">40005</span>];</span><br><span class="line"><span class="type">int</span> h[<span class="number">205</span>],cnt;</span><br><span class="line"><span class="type">bool</span> vis[<span class="number">205</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Addedge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[++cnt]=(Edge)&#123;y,h[x],v&#125;;h[x]=cnt;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt;q;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,x,y;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">x=q.<span class="built_in">front</span>();q.<span class="built_in">pop</span>();</span><br><span class="line">a[x].c-=a[x].u;</span><br><span class="line"><span class="keyword">if</span>(a[x].c&lt;<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(i=h[x];i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">y=e[i].to;</span><br><span class="line">a[y].c+=a[x].c*e[i].v;</span><br><span class="line"><span class="keyword">if</span>(!vis[y])&#123;vis[y]=<span class="literal">true</span>;q.<span class="built_in">push</span>(y);&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,x,y,v,n,m;</span><br><span class="line"><span class="type">bool</span> ans=<span class="literal">false</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a[i].c,&amp;a[i].u);</span><br><span class="line"><span class="keyword">if</span>(a[i].c)</span><br><span class="line">&#123;</span><br><span class="line">vis[i]=<span class="literal">true</span>;</span><br><span class="line">a[i].c+=a[i].u;</span><br><span class="line">q.<span class="built_in">push</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;v);</span><br><span class="line"><span class="built_in">Addedge</span>(x,y,v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">bfs</span>();</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!h[i]&amp;&amp;a[i].c&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans=<span class="literal">true</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,i,a[i].c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!ans)<span class="built_in">printf</span>(<span class="string">&quot;NULL\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 拓扑排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>solution-code3950</title>
      <link href="/oi/post/solution-code3950/"/>
      <url>/oi/post/solution-code3950/</url>
      
        <content type="html"><![CDATA[<p>模板题，注意a数组和b数组的区别就行了</p><span id="more"></span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3F3F3F3F</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> to,next,v;</span><br><span class="line">&#125;e[<span class="number">100005</span>];</span><br><span class="line"><span class="type">int</span> S,T,P,a[<span class="number">1005</span>],b[<span class="number">1005</span>],h[<span class="number">1005</span>],d[<span class="number">1005</span>],gap[<span class="number">1005</span>],cnt=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Addedge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[++cnt]=(Node)&#123;y,h[x],v&#125;;h[x]=cnt;</span><br><span class="line">e[++cnt]=(Node)&#123;x,h[y],<span class="number">0</span>&#125;;h[y]=cnt;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> maxf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==T)<span class="keyword">return</span> maxf;</span><br><span class="line"><span class="type">int</span> i,y,ret=<span class="number">0</span>,delta;</span><br><span class="line"><span class="keyword">for</span>(i=h[x];i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">y=e[i].to;</span><br><span class="line"><span class="keyword">if</span>(e[i].v&amp;&amp;d[x]==d[y]+<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">delta=<span class="built_in">dfs</span>(y,<span class="built_in">min</span>(maxf,e[i].v));</span><br><span class="line">e[i].v-=delta;</span><br><span class="line">e[i^<span class="number">1</span>].v+=delta;</span><br><span class="line">ret+=delta;</span><br><span class="line">maxf-=delta;</span><br><span class="line"><span class="keyword">if</span>(d[S]==P||!maxf)<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!(--gap[d[x]]))d[S]=P;</span><br><span class="line">++gap[++d[x]];</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">SAP</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">gap[<span class="number">0</span>]=P;</span><br><span class="line"><span class="keyword">while</span>(d[S]&lt;P)sum+=<span class="built_in">dfs</span>(S,inf);</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,j,x,n,Case,sum=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;Case);</span><br><span class="line"><span class="keyword">while</span>(Case--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="built_in">sizeof</span>(d));</span><br><span class="line"><span class="built_in">memset</span>(gap,<span class="number">0</span>,<span class="built_in">sizeof</span>(gap));</span><br><span class="line"><span class="built_in">memset</span>(h,<span class="number">0</span>,<span class="built_in">sizeof</span>(h));cnt=<span class="number">1</span>;sum=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">S=n*<span class="number">2</span>+<span class="number">1</span>;P=T=n*<span class="number">2</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;b[i]);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line"><span class="keyword">if</span>(x)<span class="built_in">Addedge</span>(i,j+n,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]&amp;&amp;b[i])<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">Addedge</span>(S,i,<span class="number">1</span>);++sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!a[i])<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">Addedge</span>(i,i+n,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">Addedge</span>(i+n,T,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">SAP</span>()==sum)<span class="built_in">printf</span>(<span class="string">&quot;^_^\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;T_T\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最大流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>solution-code3192</title>
      <link href="/oi/post/solution-code3192/"/>
      <url>/oi/post/solution-code3192/</url>
      
        <content type="html"><![CDATA[<p>把图上的每个点拆成两个点，按照老套路连边，把交换的连边流量无穷、代价为1，其余的边流量为1、代价为0，如果满流就输出代价<br>注意num1和num2数组的值，这里的id不能重复！</p><span id="more"></span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3F3F3F3F</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> to,next,v,cost;</span><br><span class="line">&#125;e[<span class="number">100005</span>];</span><br><span class="line"><span class="type">int</span> S,T,P,a[<span class="number">25</span>][<span class="number">25</span>],b[<span class="number">25</span>][<span class="number">25</span>],num1[<span class="number">25</span>][<span class="number">25</span>],num2[<span class="number">25</span>][<span class="number">25</span>],cnt=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> h[<span class="number">10005</span>],d[<span class="number">10005</span>],pre[<span class="number">10005</span>],flow,cost;</span><br><span class="line"><span class="type">bool</span> vis[<span class="number">10005</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Addedge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> v,<span class="type">int</span> cost=<span class="number">0</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[++cnt]=(Node)&#123;y,h[x],v,cost&#125;;h[x]=cnt;</span><br><span class="line">e[++cnt]=(Node)&#123;x,h[y],<span class="number">0</span>,-cost&#125;;h[y]=cnt;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">SPFA</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,x,y;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt;q;q.<span class="built_in">push</span>(S);</span><br><span class="line"><span class="built_in">memset</span>(d,<span class="number">0x3F</span>,<span class="built_in">sizeof</span>(d));d[S]=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line"><span class="built_in">memset</span>(pre,<span class="number">0</span>,<span class="built_in">sizeof</span>(pre));</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">x=q.<span class="built_in">front</span>();q.<span class="built_in">pop</span>();</span><br><span class="line">vis[x]=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(i=h[x];i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">y=e[i].to;</span><br><span class="line"><span class="keyword">if</span>(e[i].v&amp;&amp;d[y]&gt;d[x]+e[i].cost)</span><br><span class="line">&#123;</span><br><span class="line">d[y]=d[x]+e[i].cost;</span><br><span class="line">pre[y]=i;</span><br><span class="line"><span class="keyword">if</span>(!vis[y])&#123;vis[y]=<span class="literal">true</span>;q.<span class="built_in">push</span>(y);&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(d[T]&lt;<span class="number">0x3F3F3F3F</span>)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Adjust</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,j=T,delta=<span class="number">0x3F3F3F3F</span>;</span><br><span class="line"><span class="keyword">while</span>(pre[j])</span><br><span class="line">&#123;</span><br><span class="line">i=pre[j];</span><br><span class="line"><span class="keyword">if</span>(e[i].v&lt;delta)delta=e[i].v;</span><br><span class="line">j=e[i^<span class="number">1</span>].to;</span><br><span class="line">&#125;</span><br><span class="line">cost+=delta*d[T];</span><br><span class="line">flow+=delta;</span><br><span class="line">j=T;</span><br><span class="line"><span class="keyword">while</span>(pre[j])</span><br><span class="line">&#123;</span><br><span class="line">i=pre[j];</span><br><span class="line">e[i].v-=delta;</span><br><span class="line">e[i^<span class="number">1</span>].v+=delta;</span><br><span class="line">j=e[i^<span class="number">1</span>].to;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> dx[]=&#123;<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,dy[]=&#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,j,k,x,newx,newy,n,m,ch,sum=<span class="number">0</span>,id=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=m;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(ch=<span class="built_in">getchar</span>())<span class="keyword">if</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)<span class="keyword">break</span>;</span><br><span class="line">a[i][j]=ch-<span class="string">&#x27;0&#x27;</span>;sum+=a[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=m;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(ch=<span class="built_in">getchar</span>())<span class="keyword">if</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)<span class="keyword">break</span>;</span><br><span class="line">b[i][j]=ch-<span class="string">&#x27;0&#x27;</span>;sum-=b[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(sum)&#123;<span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=m;++j)num1[i][j]=++id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=m;++j)num2[i][j]=++id;</span><br><span class="line">&#125;</span><br><span class="line">S=<span class="number">2</span>*n*m+<span class="number">1</span>;T=P=<span class="number">2</span>*n*m+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=m;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i][j]&amp;&amp;!b[i][j])<span class="built_in">Addedge</span>(S,num1[i][j],<span class="number">1</span>),++sum;</span><br><span class="line"><span class="keyword">if</span>(!a[i][j]&amp;&amp;b[i][j])<span class="built_in">Addedge</span>(num2[i][j],T,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=m;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(ch=<span class="built_in">getchar</span>())<span class="keyword">if</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)<span class="keyword">break</span>;</span><br><span class="line">x=ch-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="built_in">Addedge</span>(num1[i][j],num2[i][j],x&gt;&gt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>((a[i][j]!=b[i][j])&amp;&amp;(x&amp;<span class="number">1</span>))<span class="built_in">Addedge</span>(num1[i][j],num2[i][j],<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;<span class="number">8</span>;++k)</span><br><span class="line">&#123;</span><br><span class="line">newx=i+dx[k];newy=j+dy[k];</span><br><span class="line"><span class="keyword">if</span>(newx&lt;<span class="number">1</span>||newx&gt;n||newy&lt;<span class="number">1</span>||newy&gt;m)<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">Addedge</span>(num2[i][j],num1[newx][newy],inf,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">SPFA</span>())<span class="built_in">Adjust</span>();</span><br><span class="line"><span class="keyword">if</span>(flow!=sum)&#123;<span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,cost);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 费用流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>solution-code4845</title>
      <link href="/oi/post/solution-code4845/"/>
      <url>/oi/post/solution-code4845/</url>
      
        <content type="html"><![CDATA[<p>KD树模板题，注意细节（mn和mx等）<br>Insert的时候，可以使用In和Out函数使得程序更简洁、美观</p><span id="more"></span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> L,R;</span><br><span class="line">LL d[<span class="number">2</span>],mx[<span class="number">2</span>],mn[<span class="number">2</span>],val,sum;</span><br><span class="line">&#125;Now,T[<span class="number">200005</span>],p[<span class="number">200005</span>];</span><br><span class="line">LL Ax,Ay,Bx,By;</span><br><span class="line"><span class="type">int</span> D,rt,cnt=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> Node&amp; a,<span class="type">const</span> Node&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.d[D]&lt;b.d[D];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,L=T[v].L,R=T[v].R;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">2</span>;++i)</span><br><span class="line">&#123;</span><br><span class="line">T[v].mn[i]=T[v].mx[i]=T[v].d[i];</span><br><span class="line"><span class="keyword">if</span>(L)</span><br><span class="line">&#123;</span><br><span class="line">T[v].mx[i]=<span class="built_in">max</span>(T[v].mx[i],T[L].mx[i]);</span><br><span class="line">T[v].mn[i]=<span class="built_in">min</span>(T[v].mn[i],T[L].mn[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(R)</span><br><span class="line">&#123;</span><br><span class="line">T[v].mx[i]=<span class="built_in">max</span>(T[v].mx[i],T[R].mx[i]);</span><br><span class="line">T[v].mn[i]=<span class="built_in">min</span>(T[v].mn[i],T[R].mn[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">T[v].sum=T[L].sum+T[R].sum+T[v].val;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Build</span><span class="params">(<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> now)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L&gt;R)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> mid=(L+R)&gt;&gt;<span class="number">1</span>,v=mid;</span><br><span class="line">D=now;</span><br><span class="line"><span class="built_in">nth_element</span>(p+L,p+mid,p+R+<span class="number">1</span>,cmp);</span><br><span class="line">T[v]=p[v];</span><br><span class="line">T[v].L=<span class="built_in">Build</span>(L,mid<span class="number">-1</span>,now^<span class="number">1</span>);</span><br><span class="line">T[v].R=<span class="built_in">Build</span>(mid+<span class="number">1</span>,R,now^<span class="number">1</span>);</span><br><span class="line"><span class="built_in">pushup</span>(v);</span><br><span class="line"><span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Insert</span><span class="params">(<span class="type">int</span>&amp; v,<span class="type">int</span> now)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!v)</span><br><span class="line">&#123;</span><br><span class="line">v=++cnt;T[v]=Now;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(Now.d[<span class="number">0</span>]==T[v].d[<span class="number">0</span>]&amp;&amp;Now.d[<span class="number">1</span>]==T[v].d[<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">T[v].sum+=Now.val;</span><br><span class="line">T[v].val+=Now.val;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(Now.d[now]&lt;T[v].d[now])<span class="built_in">Insert</span>(T[v].L,now^<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">Insert</span>(T[v].R,now^<span class="number">1</span>);</span><br><span class="line"><span class="built_in">pushup</span>(v);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">In</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Ax&lt;=T[v].mn[<span class="number">0</span>]&amp;&amp;Ay&lt;=T[v].mn[<span class="number">1</span>]&amp;&amp;Bx&gt;=T[v].mx[<span class="number">0</span>]&amp;&amp;By&gt;=T[v].mx[<span class="number">1</span>])<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">Out</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Ax&gt;T[v].mx[<span class="number">0</span>]||Ay&gt;T[v].mx[<span class="number">1</span>]||Bx&lt;T[v].mn[<span class="number">0</span>]||By&lt;T[v].mn[<span class="number">1</span>])<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">Query</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!v)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">Out</span>(v))<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">In</span>(v))<span class="keyword">return</span> T[v].sum;</span><br><span class="line"><span class="type">int</span> L=T[v].L,R=T[v].R;</span><br><span class="line">LL tmp=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(Ax&lt;=T[v].d[<span class="number">0</span>]&amp;&amp;Ay&lt;=T[v].d[<span class="number">1</span>]&amp;&amp;Bx&gt;=T[v].d[<span class="number">0</span>]&amp;&amp;By&gt;=T[v].d[<span class="number">1</span>])tmp+=T[v].val;</span><br><span class="line"><span class="keyword">return</span> tmp+<span class="built_in">Query</span>(L)+<span class="built_in">Query</span>(R);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,cmd,times=<span class="number">10000</span>;</span><br><span class="line">LL n,x,y,z,lst=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;cmd);</span><br><span class="line"><span class="keyword">if</span>(cmd==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">x^=lst;y^=lst;z^=lst;</span><br><span class="line">Now.sum=Now.val=z;</span><br><span class="line">Now.d[<span class="number">0</span>]=Now.mn[<span class="number">0</span>]=Now.mx[<span class="number">0</span>]=x;</span><br><span class="line">Now.d[<span class="number">1</span>]=Now.mn[<span class="number">1</span>]=Now.mx[<span class="number">1</span>]=y;</span><br><span class="line"><span class="built_in">Insert</span>(rt,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(cnt&gt;times)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=cnt;++i)p[i]=T[i];</span><br><span class="line">rt=<span class="built_in">Build</span>(<span class="number">1</span>,cnt,<span class="number">0</span>);</span><br><span class="line">times+=<span class="number">10000</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cmd==<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld%lld&quot;</span>,&amp;Ax,&amp;Ay,&amp;Bx,&amp;By);</span><br><span class="line">Ax^=lst;Ay^=lst;Bx^=lst;By^=lst;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,lst=<span class="built_in">Query</span>(rt));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cmd==<span class="number">3</span>)<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KD树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[luogu1174]打砖块</title>
      <link href="/oi/post/solution-code2634/"/>
      <url>/oi/post/solution-code2634/</url>
      
        <content type="html"><![CDATA[<p>注意：子弹没有的时候不能打有奖励的砖块，打有奖励的砖块可以抽象成借子弹<br><code>w1[i][j]</code>代表在能借子弹的情况下第i列用了j颗子弹能够达到的最高分数，w2代表不能借子弹的最高分数<br><code>f1[i][j]</code>代表能借子弹的情况下从左往右打了i列用了j颗子弹能够达到的最高分数，f2代表不借子弹的最高分数</p><span id="more"></span><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>小红很喜欢玩一个叫打砖块的游戏，这个游戏的规则如下：<br>在刚开始的时候，有$n$行$\times m$列的砖块，小红有$k$发子弹。小红每次可以用一发子弹，打碎某一列当前处于这一列最下面的那块砖，并且得到相应的得分。(如图所示)</p><img src="/oi/post/solution-code2634/1.png" class="" title="1.png"><p>某些砖块在打碎以后，还可能将得到一发子弹的奖励。最后当所有的砖块都打碎了，或者小红没有子弹了，游戏结束。<br>小红在游戏开始之前，就已经知道每一块砖在打碎以后的得分，并且知道能不能得到一发奖励的子弹。小红想知道在这次游戏中她可能的最大得分，可是这个问题对于她来说太难了，你能帮帮她吗？</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行有$3$个正整数，$n$,$m$,$k$。表示开始的时候，有$n$行$\times m$列的砖块，小红有$k$发子弹。<br>接下来有$n$行，每行的格式如下：$f_1\ c_1\ f_2\ c_2\ f_3\ c_3\ \cdots f_m\ c_m$<br>其中$f_i$为正整数，表示这一行的第$i$列的砖，在打碎以后的得分。$c_i$为一个字符，只有两种可能，$Y$或者$N$。$Y$表示有一发奖励的子弹，$N$表示没有。<br>所有的数与字符之间用一个空格隔开，行末没有多余的空格。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>仅一个正整数，表示最大的得分。</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3 4 2</span><br><span class="line">9 N 5 N 1 N 8 N</span><br><span class="line">5 N 5 Y 5 N 5 N</span><br><span class="line">6 N 2 N 4 N 3 N</span><br></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">13</span><br></pre></td></tr></table></figure><h3 id="说明-提示"><a href="#说明-提示" class="headerlink" title="说明&#x2F;提示"></a>说明&#x2F;提示</h3><p>对于$20\%$的数据，满足$1\le n,m\le 5,1\le k\le 10$，所有的字符$c$都为<code>N</code><br>对于$50\%$的数据，满足$1\le n,m\le 200,1\le k\le 200$，所有的字符$c$都为<code>N</code><br>对于$100\%$的数据，满足$1\le n,m\le 200,1\le k\le 200$，字符$c$可能为<code>Y</code><br>对于$100\%$的数据，所有的$f$值满足$1 \le f \le 10000$</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[<span class="number">205</span>][<span class="number">205</span>],w1[<span class="number">205</span>][<span class="number">205</span>],w2[<span class="number">205</span>][<span class="number">205</span>];</span><br><span class="line"><span class="type">int</span> f1[<span class="number">205</span>][<span class="number">205</span>],f2[<span class="number">205</span>][<span class="number">205</span>];</span><br><span class="line"><span class="type">bool</span> re[<span class="number">205</span>][<span class="number">205</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,j,l,n,m,k,ch,cnt;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=m;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i][j]);</span><br><span class="line"><span class="keyword">while</span>(ch=<span class="built_in">getchar</span>())<span class="keyword">if</span>(ch==<span class="string">&#x27;Y&#x27;</span>||ch==<span class="string">&#x27;N&#x27;</span>)<span class="keyword">break</span>;</span><br><span class="line">re[i][j]=ch==<span class="string">&#x27;Y&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=m;++j)</span><br><span class="line">&#123;</span><br><span class="line">cnt=n;</span><br><span class="line"><span class="keyword">while</span>(cnt&amp;&amp;re[cnt][j])</span><br><span class="line">&#123;</span><br><span class="line">w1[j][<span class="number">0</span>]+=a[cnt][j];--cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n&amp;&amp;cnt;++i)<span class="comment">//打i发子弹</span></span><br><span class="line">&#123;</span><br><span class="line">w1[j][i]=w2[j][i]=w1[j][i<span class="number">-1</span>]+a[cnt][j];</span><br><span class="line">--cnt;</span><br><span class="line"><span class="keyword">while</span>(cnt&amp;&amp;re[cnt][j])</span><br><span class="line">&#123;</span><br><span class="line">w1[j][i]+=a[cnt][j];--cnt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;++i)<span class="comment">//列</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;=k;++j)<span class="comment">//子弹</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(l=<span class="number">0</span>;l&lt;=j;++l)<span class="comment">//当前列使用的子弹数</span></span><br><span class="line">&#123;</span><br><span class="line">f1[i][j]=<span class="built_in">max</span>(f1[i][j],f1[i<span class="number">-1</span>][j-l]+w1[i][l]);</span><br><span class="line"><span class="keyword">if</span>(l&lt;j)f2[i][j]=<span class="built_in">max</span>(f2[i][j],f2[i<span class="number">-1</span>][j-l]+w1[i][l]);</span><br><span class="line"><span class="keyword">if</span>(l)f2[i][j]=<span class="built_in">max</span>(f2[i][j],f1[i<span class="number">-1</span>][j-l]+w2[i][l]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,f2[m][k]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>solution-code1901</title>
      <link href="/oi/post/solution-code1901/"/>
      <url>/oi/post/solution-code1901/</url>
      
        <content type="html"><![CDATA[<p>注意优先级！！！‘!’的优先级比&amp;的优先级高，要打括号</p><span id="more"></span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> f[<span class="number">2</span>][(<span class="number">1</span>&lt;&lt;<span class="number">14</span>)+<span class="number">5</span>];</span><br><span class="line"><span class="type">bool</span> a[<span class="number">15</span>][<span class="number">15</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,j,S,n,m,x,ch,cnt=<span class="number">1</span>,pre=<span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">1</span>,<span class="built_in">sizeof</span>(a));</span><br><span class="line"><span class="built_in">memset</span>(f[cnt],<span class="number">-1</span>,<span class="built_in">sizeof</span>(f[cnt]));</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(ch=<span class="built_in">getchar</span>())<span class="keyword">if</span>(ch&gt;=<span class="string">&#x27;A&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;Z&#x27;</span>)<span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">a[ch-<span class="string">&#x27;A&#x27;</span>][x<span class="number">-1</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">f[cnt][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">m=n&lt;&lt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;m;++j)</span><br><span class="line">&#123;</span><br><span class="line">pre^=<span class="number">1</span>;cnt^=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">memset</span>(f[cnt],<span class="number">-1</span>,<span class="built_in">sizeof</span>(f[cnt]));</span><br><span class="line"><span class="keyword">for</span>(S=<span class="number">0</span>;S&lt;(<span class="number">1</span>&lt;&lt;m);++S)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i][j])</span><br><span class="line">&#123;</span><br><span class="line">f[cnt][S]=f[pre][S^(<span class="number">1</span>&lt;&lt;j)];</span><br><span class="line"><span class="keyword">if</span>(!(S&amp;(<span class="number">1</span>&lt;&lt;j)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j&gt;<span class="number">0</span>&amp;&amp;!(S&amp;(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))))f[cnt][S]=<span class="built_in">max</span>(f[cnt][S],f[pre][S^(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))]);</span><br><span class="line"><span class="keyword">if</span>(f[cnt][S]&gt;=<span class="number">0</span>)++f[cnt][S];</span><br><span class="line">f[cnt][S]=<span class="built_in">max</span>(f[cnt][S],f[pre][S]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> f[cnt][S]=S&amp;(<span class="number">1</span>&lt;&lt;j)?<span class="number">-1</span>:f[pre][S];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=(<span class="number">1</span>&lt;&lt;n);i&lt;(<span class="number">1</span>&lt;&lt;m);++i)f[cnt][i&amp;((<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>)]=<span class="built_in">max</span>(f[cnt][i&amp;((<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>)],f[cnt][i]);</span><br><span class="line"><span class="keyword">for</span>(i=n;i&lt;m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;++j)</span><br><span class="line">&#123;</span><br><span class="line">pre^=<span class="number">1</span>;cnt^=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">memset</span>(f[cnt],<span class="number">-1</span>,<span class="built_in">sizeof</span>(f[cnt]));</span><br><span class="line"><span class="keyword">for</span>(S=<span class="number">0</span>;S&lt;(<span class="number">1</span>&lt;&lt;n);++S)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i][j])</span><br><span class="line">&#123;</span><br><span class="line">f[cnt][S]=f[pre][S^(<span class="number">1</span>&lt;&lt;j)];</span><br><span class="line"><span class="keyword">if</span>(!(S&amp;(<span class="number">1</span>&lt;&lt;j)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j&gt;<span class="number">0</span>&amp;&amp;!(S&amp;(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))))f[cnt][S]=<span class="built_in">max</span>(f[cnt][S],f[pre][S^(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))]);</span><br><span class="line"><span class="keyword">if</span>(f[cnt][S]&gt;=<span class="number">0</span>)++f[cnt][S];</span><br><span class="line">f[cnt][S]=<span class="built_in">max</span>(f[cnt][S],f[pre][S]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> f[cnt][S]=S&amp;(<span class="number">1</span>&lt;&lt;j)?<span class="number">-1</span>:f[pre][S];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;(<span class="number">1</span>&lt;&lt;n);++i)ans=<span class="built_in">max</span>(ans,f[cnt][i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 状压DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>solution-code2023</title>
      <link href="/oi/post/solution-code2023/"/>
      <url>/oi/post/solution-code2023/</url>
      
        <content type="html"><![CDATA[<p>此题有三个类似的插入操作，可以用一个函数简化代码量</p><span id="more"></span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3F3F3F3F</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m,a[<span class="number">80005</span>],ch[<span class="number">80005</span>][<span class="number">2</span>],fa[<span class="number">80005</span>],siz[<span class="number">80005</span>],val[<span class="number">80005</span>],pos[<span class="number">80005</span>],rt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> L=ch[x][<span class="number">0</span>],R=ch[x][<span class="number">1</span>];</span><br><span class="line">siz[x]=siz[L]+siz[R]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Rot</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span>&amp; f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> y=fa[x],z=fa[y],L=(ch[y][<span class="number">0</span>]!=x),R=L^<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(y==f)f=x;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ch[z][<span class="number">0</span>]==y)ch[z][<span class="number">0</span>]=x;</span><br><span class="line"><span class="keyword">else</span> ch[z][<span class="number">1</span>]=x;</span><br><span class="line">&#125;</span><br><span class="line">fa[ch[x][R]]=y;</span><br><span class="line">fa[y]=x;fa[x]=z;</span><br><span class="line">ch[y][L]=ch[x][R];</span><br><span class="line">ch[x][R]=y;</span><br><span class="line"><span class="built_in">pushup</span>(y);</span><br><span class="line"><span class="built_in">pushup</span>(x);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Splay</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span>&amp; f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(x!=f)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> y=fa[x],z=fa[y];</span><br><span class="line"><span class="keyword">if</span>(y!=f)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ch[y][<span class="number">0</span>]==x^ch[z][<span class="number">0</span>]==y)<span class="built_in">Rot</span>(x,f);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">Rot</span>(y,f);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Rot</span>(x,f);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Build</span><span class="params">(<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L&gt;R)<span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> now=L,lst=f;</span><br><span class="line"><span class="keyword">if</span>(L==R)</span><br><span class="line">&#123;</span><br><span class="line">val[now]=a[L];</span><br><span class="line">siz[now]=<span class="number">1</span>;</span><br><span class="line">fa[now]=lst;</span><br><span class="line">ch[lst][L&gt;=f]=now;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=(L+R)&gt;&gt;<span class="number">1</span>;now=mid;</span><br><span class="line"><span class="built_in">Build</span>(L,mid<span class="number">-1</span>,mid);</span><br><span class="line"><span class="built_in">Build</span>(mid+<span class="number">1</span>,R,mid);</span><br><span class="line">val[now]=a[mid];</span><br><span class="line">fa[now]=lst;</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line">ch[lst][mid&gt;=f]=now;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Find</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> L=ch[x][<span class="number">0</span>],R=ch[x][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span>(siz[L]+<span class="number">1</span>==k)<span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">if</span>(siz[L]+<span class="number">1</span>&gt;k)<span class="keyword">return</span> <span class="built_in">Find</span>(L,k);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Find</span>(R,k-siz[L]<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Del</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="built_in">Find</span>(rt,k<span class="number">-1</span>),y=<span class="built_in">Find</span>(rt,k+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">Splay</span>(x,rt);</span><br><span class="line"><span class="built_in">Splay</span>(y,ch[x][<span class="number">1</span>]);</span><br><span class="line">fa[ch[y][<span class="number">0</span>]]=siz[ch[y][<span class="number">0</span>]]=<span class="number">0</span>;</span><br><span class="line">ch[y][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">pushup</span>(y);</span><br><span class="line"><span class="built_in">pushup</span>(x);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Move</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> x,y,z=pos[k],rnk;</span><br><span class="line"><span class="built_in">Splay</span>(z,rt);rnk=siz[ch[z][<span class="number">0</span>]]+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">Del</span>(rnk);</span><br><span class="line"><span class="keyword">if</span>(value==inf)x=<span class="built_in">Find</span>(rt,n),y=<span class="built_in">Find</span>(rt,n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(value==-inf)x=<span class="built_in">Find</span>(rt,<span class="number">1</span>),y=<span class="built_in">Find</span>(rt,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">else</span> x=<span class="built_in">Find</span>(rt,rnk+value<span class="number">-1</span>),y=<span class="built_in">Find</span>(rt,rnk+value);</span><br><span class="line"><span class="built_in">Splay</span>(x,rt);</span><br><span class="line"><span class="built_in">Splay</span>(y,ch[x][<span class="number">1</span>]);</span><br><span class="line">siz[z]=<span class="number">1</span>;fa[z]=y;</span><br><span class="line">ch[y][<span class="number">0</span>]=z;</span><br><span class="line"><span class="built_in">pushup</span>(y);</span><br><span class="line"><span class="built_in">pushup</span>(x);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> cmd[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,x,y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n+<span class="number">1</span>;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">pos[a[i]]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Build</span>(<span class="number">1</span>,n+<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">rt=(n+<span class="number">3</span>)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s%d&quot;</span>,cmd,&amp;x);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(cmd,<span class="string">&quot;Top&quot;</span>)==<span class="number">0</span>)<span class="built_in">Move</span>(x,-inf);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(cmd,<span class="string">&quot;Bottom&quot;</span>)==<span class="number">0</span>)<span class="built_in">Move</span>(x,inf);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(cmd,<span class="string">&quot;Insert&quot;</span>)==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;y);</span><br><span class="line"><span class="built_in">Move</span>(x,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(cmd,<span class="string">&quot;Ask&quot;</span>)==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Splay</span>(pos[x],rt);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,siz[ch[pos[x]][<span class="number">0</span>]]<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(cmd,<span class="string">&quot;Query&quot;</span>)==<span class="number">0</span>)<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,val[<span class="built_in">Find</span>(rt,x+<span class="number">1</span>)]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 平衡树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>solution-code2131</title>
      <link href="/oi/post/solution-code2131/"/>
      <url>/oi/post/solution-code2131/</url>
      
        <content type="html"><![CDATA[<p>使用4-hash节省判重时间<br>判断就是从字符串两端搜索C和W，然后确认中间元素是否匹配target<br>暴力找COW后重新组合直接递归搜索</p><span id="more"></span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">string target=<span class="string">&quot;Begin the Escape execution at the Break of Dawn&quot;</span>,s;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> m1=<span class="number">392131</span>,m2=<span class="number">413477</span>,m3=<span class="number">9997</span>,m4=<span class="number">10001</span>,p1=<span class="number">23</span>,p2=<span class="number">31</span>,p3=<span class="number">17</span>,p4=<span class="number">37</span>,lt=target.<span class="built_in">length</span>();</span><br><span class="line"><span class="type">bool</span> hash1[m1+<span class="number">5</span>],hash2[m2+<span class="number">5</span>],hash3[m3+<span class="number">5</span>],hash4[m4+<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">check</span><span class="params">(string a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,a1=<span class="number">0</span>,a2=<span class="number">0</span>,a3=<span class="number">0</span>,a4=<span class="number">0</span>,len=a.<span class="built_in">length</span>();</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;++i)</span><br><span class="line">&#123;</span><br><span class="line">a1=(a1*p1+a[i])%m1;</span><br><span class="line">a2=(a2*p2+a[i])%m2;</span><br><span class="line">a3=(a3*p3+a[i])%m3;</span><br><span class="line">a4=(a4*p4+a[i])%m4;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(hash1[a1]&amp;&amp;hash2[a2]&amp;&amp;hash3[a3]&amp;&amp;hash4[a4])<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> hash1[a1]=hash2[a2]=hash3[a3]=hash4[a4]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dfs</span><span class="params">(string s,<span class="type">int</span> dep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">check</span>(s))<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(s==target)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1 %d\n&quot;</span>,dep);<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> i,j,k,ls=s.<span class="built_in">length</span>();</span><br><span class="line"><span class="keyword">for</span>(i=ls<span class="number">-1</span>,j=lt<span class="number">-1</span>;s[i]!=<span class="string">&#x27;C&#x27;</span>&amp;&amp;s[i]!=<span class="string">&#x27;O&#x27;</span>&amp;&amp;s[i]!=<span class="string">&#x27;W&#x27;</span>;--i,--j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]!=target[j])<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;s[i]!=<span class="string">&#x27;C&#x27;</span>&amp;&amp;s[i]!=<span class="string">&#x27;O&#x27;</span>&amp;&amp;s[i]!=<span class="string">&#x27;W&#x27;</span>;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]!=target[i])<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">string sub=<span class="string">&quot;&quot;</span>,news;</span><br><span class="line"><span class="keyword">for</span>(++i;i&lt;ls;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="string">&#x27;C&#x27;</span>||s[i]==<span class="string">&#x27;O&#x27;</span>||s[i]==<span class="string">&#x27;W&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(target.<span class="built_in">find</span>(sub)==<span class="number">-1</span>)<span class="keyword">return</span>;</span><br><span class="line">sub=<span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> sub+=s[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;ls;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]!=<span class="string">&#x27;O&#x27;</span>)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;i;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s[j]!=<span class="string">&#x27;C&#x27;</span>)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(k=ls<span class="number">-1</span>;k&gt;i;--k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s[k]!=<span class="string">&#x27;W&#x27;</span>)<span class="keyword">continue</span>;</span><br><span class="line">news=s.<span class="built_in">substr</span>(<span class="number">0</span>,j)+s.<span class="built_in">substr</span>(i+<span class="number">1</span>,k-i<span class="number">-1</span>)+s.<span class="built_in">substr</span>(j+<span class="number">1</span>,i-j<span class="number">-1</span>)+s.<span class="built_in">substr</span>(k+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">dfs</span>(news,dep+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">getline</span>(cin,s);</span><br><span class="line"><span class="built_in">dfs</span>(s,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;0 0\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>solution-code1132</title>
      <link href="/oi/post/solution-code1132/"/>
      <url>/oi/post/solution-code1132/</url>
      
        <content type="html"><![CDATA[<p>没什么好说的，$O(n)$的简单DP</p><span id="more"></span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[<span class="number">50005</span>],f[<span class="number">50005</span>],g[<span class="number">50005</span>];</span><br><span class="line"><span class="comment">///f[i]:以a[i]元素结尾的末端状态为上升</span></span><br><span class="line"><span class="comment">///g[i]:以a[i]元素结尾的末端状态为下降</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">f[<span class="number">1</span>]=g[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i<span class="number">-1</span>]&lt;a[i])</span><br><span class="line">&#123;</span><br><span class="line">f[i]=<span class="built_in">max</span>(f[i<span class="number">-1</span>],g[i<span class="number">-1</span>]+<span class="number">1</span>);</span><br><span class="line">g[i]=g[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a[i<span class="number">-1</span>]==a[i])</span><br><span class="line">&#123;</span><br><span class="line">f[i]=f[i<span class="number">-1</span>];g[i]=g[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a[i<span class="number">-1</span>]&gt;a[i])</span><br><span class="line">&#123;</span><br><span class="line">f[i]=f[i<span class="number">-1</span>];</span><br><span class="line">g[i]=<span class="built_in">max</span>(f[i<span class="number">-1</span>]+<span class="number">1</span>,g[i<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,n-<span class="built_in">max</span>(f[n],g[n]));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>solution-code3734</title>
      <link href="/oi/post/solution-code3734/"/>
      <url>/oi/post/solution-code3734/</url>
      
        <content type="html"><![CDATA[<p>环形序列：拆环为链，取maxx和sum-minn（刨去中间一块的剩余的链）的最大值<br>不能是整个序列的和：如果结果是序列的和，那么减去序列最小值<br>注意细节！</p><span id="more"></span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> L,R,sum,Lmax,Lmin,Rmax,Rmin,maxx,minn,minval;</span><br><span class="line">&#125;T[<span class="number">400005</span>];</span><br><span class="line"><span class="type">int</span> a[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T[v].sum=T[v&lt;&lt;<span class="number">1</span>].sum+T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].sum;</span><br><span class="line">T[v].minval=<span class="built_in">min</span>(T[v&lt;&lt;<span class="number">1</span>].minval,T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].minval);</span><br><span class="line">T[v].Lmax=<span class="built_in">max</span>(T[v&lt;&lt;<span class="number">1</span>].Lmax,T[v&lt;&lt;<span class="number">1</span>].sum+T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].Lmax);</span><br><span class="line">T[v].Lmin=<span class="built_in">min</span>(T[v&lt;&lt;<span class="number">1</span>].Lmin,T[v&lt;&lt;<span class="number">1</span>].sum+T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].Lmin);</span><br><span class="line">T[v].Rmax=<span class="built_in">max</span>(T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].Rmax,T[v&lt;&lt;<span class="number">1</span>].Rmax+T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].sum);</span><br><span class="line">T[v].Rmin=<span class="built_in">min</span>(T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].Rmin,T[v&lt;&lt;<span class="number">1</span>].Rmin+T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].sum);</span><br><span class="line">T[v].maxx=<span class="built_in">max</span>(<span class="built_in">max</span>(T[v&lt;&lt;<span class="number">1</span>].maxx,T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].maxx),T[v&lt;&lt;<span class="number">1</span>].Rmax+T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].Lmax);</span><br><span class="line">T[v].minn=<span class="built_in">min</span>(<span class="built_in">min</span>(T[v&lt;&lt;<span class="number">1</span>].minn,T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].minn),T[v&lt;&lt;<span class="number">1</span>].Rmin+T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].Lmin);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Build</span><span class="params">(<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T[v].L=L;T[v].R=R;</span><br><span class="line"><span class="keyword">if</span>(L==R)</span><br><span class="line">&#123;</span><br><span class="line">T[v].sum=T[v].minval=a[L];</span><br><span class="line"><span class="keyword">if</span>(a[L]&gt;=<span class="number">0</span>)T[v].Lmax=T[v].Rmax=T[v].maxx=a[L];</span><br><span class="line"><span class="keyword">else</span> T[v].Lmin=T[v].Rmin=T[v].minn=a[L];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=(L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">Build</span>(L,mid,v&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="built_in">Build</span>(mid+<span class="number">1</span>,R,(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line"><span class="built_in">pushup</span>(v);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Modify</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> val,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&gt;T[v].R||x&lt;T[v].L)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(T[v].L==T[v].R)</span><br><span class="line">&#123;</span><br><span class="line">T[v].sum=T[v].minval=val;</span><br><span class="line"><span class="keyword">if</span>(val&gt;=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">T[v].Lmax=T[v].Rmax=T[v].maxx=val;</span><br><span class="line">T[v].Lmin=T[v].Rmin=T[v].minn=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">T[v].Lmax=T[v].Rmax=T[v].maxx=<span class="number">0</span>;</span><br><span class="line">T[v].Lmin=T[v].Rmin=T[v].minn=val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Modify</span>(x,val,v&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="built_in">Modify</span>(x,val,(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line"><span class="built_in">pushup</span>(v);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,x,y,n,m,ans;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line"><span class="built_in">Build</span>(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line"><span class="built_in">Modify</span>(x,y,<span class="number">1</span>);</span><br><span class="line">ans=<span class="built_in">max</span>(T[<span class="number">1</span>].maxx,T[<span class="number">1</span>].sum-T[<span class="number">1</span>].minn);</span><br><span class="line"><span class="keyword">if</span>(ans==T[<span class="number">1</span>].sum)ans-=T[<span class="number">1</span>].minval;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>solution-code2728</title>
      <link href="/oi/post/solution-code2728/"/>
      <url>/oi/post/solution-code2728/</url>
      
        <content type="html"><![CDATA[<p>一道很麻烦的线段树模板题<br>由于要进行翻转，0和1的数量、左边最长、右边最长以及区间答案都需要处理<br>询问操作就对需要的区间进行合并，用类似pushup的方法将TreeNode传递给上一层<br>注意：</p><ul><li>翻转的时候tag标记也要做相应的改变（如果没有打标签就不能修改！）</li><li>tag标签和rev标签会冲突，由于rev标签会修改tag标签的值，那么必须先处理rev标签才能处理tag标签</li><li>Lmax和Rmax的含义，不是子树的左儿子或右儿子的最长连续值，而是子树全部的最长连续值</li><li>在线段树操作中，修改操作直接修改单层，pushdown操作修改其儿子</li></ul><span id="more"></span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Tree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> L,R,sum0,sum1,Lmax0,Lmax1,Rmax0,Rmax1,max0,max1,val,rev;</span><br><span class="line">&#125;T[<span class="number">400005</span>];</span><br><span class="line"><span class="type">int</span> a[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(T[v].rev)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">swap</span>(T[v&lt;&lt;<span class="number">1</span>].sum0,T[v&lt;&lt;<span class="number">1</span>].sum1);</span><br><span class="line"><span class="built_in">swap</span>(T[v&lt;&lt;<span class="number">1</span>].Lmax0,T[v&lt;&lt;<span class="number">1</span>].Lmax1);</span><br><span class="line"><span class="built_in">swap</span>(T[v&lt;&lt;<span class="number">1</span>].Rmax0,T[v&lt;&lt;<span class="number">1</span>].Rmax1);</span><br><span class="line"><span class="built_in">swap</span>(T[v&lt;&lt;<span class="number">1</span>].max0,T[v&lt;&lt;<span class="number">1</span>].max1);</span><br><span class="line"><span class="keyword">if</span>(T[v&lt;&lt;<span class="number">1</span>].val)T[v&lt;&lt;<span class="number">1</span>].val=<span class="number">3</span>-T[v&lt;&lt;<span class="number">1</span>].val;</span><br><span class="line"><span class="built_in">swap</span>(T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].sum0,T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].sum1);</span><br><span class="line"><span class="built_in">swap</span>(T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].Lmax0,T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].Lmax1);</span><br><span class="line"><span class="built_in">swap</span>(T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].Rmax0,T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].Rmax1);</span><br><span class="line"><span class="built_in">swap</span>(T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].max0,T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].max1);</span><br><span class="line"><span class="keyword">if</span>(T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].val)T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].val=<span class="number">3</span>-T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].val;</span><br><span class="line">T[v&lt;&lt;<span class="number">1</span>].rev^=<span class="number">1</span>;T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].rev^=<span class="number">1</span>;</span><br><span class="line">T[v].rev=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(T[v].val==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">T[v&lt;&lt;<span class="number">1</span>].sum0=T[v&lt;&lt;<span class="number">1</span>].Lmax0=T[v&lt;&lt;<span class="number">1</span>].Rmax0=T[v&lt;&lt;<span class="number">1</span>].max0=T[v&lt;&lt;<span class="number">1</span>].R-T[v&lt;&lt;<span class="number">1</span>].L+<span class="number">1</span>;</span><br><span class="line">T[v&lt;&lt;<span class="number">1</span>].sum1=T[v&lt;&lt;<span class="number">1</span>].Lmax1=T[v&lt;&lt;<span class="number">1</span>].Rmax1=T[v&lt;&lt;<span class="number">1</span>].max1=<span class="number">0</span>;</span><br><span class="line">T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].sum0=T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].Lmax0=T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].Rmax0=T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].max0=T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].R-T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].L+<span class="number">1</span>;</span><br><span class="line">T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].sum1=T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].Lmax1=T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].Rmax1=T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].max1=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(T[v].val==<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">T[v&lt;&lt;<span class="number">1</span>].sum0=T[v&lt;&lt;<span class="number">1</span>].Lmax0=T[v&lt;&lt;<span class="number">1</span>].Rmax0=T[v&lt;&lt;<span class="number">1</span>].max0=<span class="number">0</span>;</span><br><span class="line">T[v&lt;&lt;<span class="number">1</span>].sum1=T[v&lt;&lt;<span class="number">1</span>].Lmax1=T[v&lt;&lt;<span class="number">1</span>].Rmax1=T[v&lt;&lt;<span class="number">1</span>].max1=T[v&lt;&lt;<span class="number">1</span>].R-T[v&lt;&lt;<span class="number">1</span>].L+<span class="number">1</span>;</span><br><span class="line">T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].sum0=T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].Lmax0=T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].Rmax0=T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].max0=<span class="number">0</span>;</span><br><span class="line">T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].sum1=T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].Lmax1=T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].Rmax1=T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].max1=T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].R-T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].L+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(T[v].val)</span><br><span class="line">&#123;</span><br><span class="line">T[v&lt;&lt;<span class="number">1</span>].val=T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].val=T[v].val;</span><br><span class="line">T[v].val=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T[v].sum0=T[v&lt;&lt;<span class="number">1</span>].sum0+T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].sum0;</span><br><span class="line">T[v].sum1=T[v&lt;&lt;<span class="number">1</span>].sum1+T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].sum1;</span><br><span class="line"><span class="keyword">if</span>(T[v&lt;&lt;<span class="number">1</span>].sum1==<span class="number">0</span>)T[v].Lmax0=T[v&lt;&lt;<span class="number">1</span>].Lmax0+T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].Lmax0;</span><br><span class="line"><span class="keyword">else</span> T[v].Lmax0=T[v&lt;&lt;<span class="number">1</span>].Lmax0;</span><br><span class="line"><span class="keyword">if</span>(T[v&lt;&lt;<span class="number">1</span>].sum0==<span class="number">0</span>)T[v].Lmax1=T[v&lt;&lt;<span class="number">1</span>].Lmax1+T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].Lmax1;</span><br><span class="line"><span class="keyword">else</span> T[v].Lmax1=T[v&lt;&lt;<span class="number">1</span>].Lmax1;</span><br><span class="line"><span class="keyword">if</span>(T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].sum1==<span class="number">0</span>)T[v].Rmax0=T[v&lt;&lt;<span class="number">1</span>].Rmax0+T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].Rmax0;</span><br><span class="line"><span class="keyword">else</span> T[v].Rmax0=T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].Rmax0;</span><br><span class="line"><span class="keyword">if</span>(T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].sum0==<span class="number">0</span>)T[v].Rmax1=T[v&lt;&lt;<span class="number">1</span>].Rmax1+T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].Rmax1;</span><br><span class="line"><span class="keyword">else</span> T[v].Rmax1=T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].Rmax1;</span><br><span class="line">T[v].max0=<span class="built_in">max</span>(<span class="built_in">max</span>(T[v&lt;&lt;<span class="number">1</span>].max0,T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].max0),T[v&lt;&lt;<span class="number">1</span>].Rmax0+T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].Lmax0);</span><br><span class="line">T[v].max1=<span class="built_in">max</span>(<span class="built_in">max</span>(T[v&lt;&lt;<span class="number">1</span>].max1,T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].max1),T[v&lt;&lt;<span class="number">1</span>].Rmax1+T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].Lmax1);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Build</span><span class="params">(<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T[v].L=L;T[v].R=R;</span><br><span class="line"><span class="keyword">if</span>(L==R)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[L])T[v].sum1=T[v].Lmax1=T[v].Rmax1=T[v].max1=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> T[v].sum0=T[v].Lmax0=T[v].Rmax0=T[v].max0=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=(L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">Build</span>(L,mid,v&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="built_in">Build</span>(mid+<span class="number">1</span>,R,(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line"><span class="built_in">pushup</span>(v);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Set</span><span class="params">(<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> val,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L&gt;T[v].R||R&lt;T[v].L)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=T[v].L&amp;&amp;R&gt;=T[v].R)</span><br><span class="line">&#123;</span><br><span class="line">T[v].rev=<span class="number">0</span>;T[v].val=val;</span><br><span class="line"><span class="keyword">if</span>(val==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">T[v].sum0=T[v].Lmax0=T[v].Rmax0=T[v].max0=T[v].R-T[v].L+<span class="number">1</span>;</span><br><span class="line">T[v].sum1=T[v].Lmax1=T[v].Rmax1=T[v].max1=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">T[v].sum0=T[v].Lmax0=T[v].Rmax0=T[v].max0=<span class="number">0</span>;</span><br><span class="line">T[v].sum1=T[v].Lmax1=T[v].Rmax1=T[v].max1=T[v].R-T[v].L+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(v);</span><br><span class="line"><span class="built_in">Set</span>(L,R,val,v&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="built_in">Set</span>(L,R,val,(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line"><span class="built_in">pushup</span>(v);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Rev</span><span class="params">(<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L&gt;T[v].R||R&lt;T[v].L)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=T[v].L&amp;&amp;R&gt;=T[v].R)</span><br><span class="line">&#123;</span><br><span class="line">T[v].rev^=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(T[v].val)T[v].val=<span class="number">3</span>-T[v].val;</span><br><span class="line"><span class="built_in">swap</span>(T[v].sum0,T[v].sum1);</span><br><span class="line"><span class="built_in">swap</span>(T[v].Lmax0,T[v].Lmax1);</span><br><span class="line"><span class="built_in">swap</span>(T[v].Rmax0,T[v].Rmax1);</span><br><span class="line"><span class="built_in">swap</span>(T[v].max0,T[v].max1);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(v);</span><br><span class="line"><span class="built_in">Rev</span>(L,R,v&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="built_in">Rev</span>(L,R,(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line"><span class="built_in">pushup</span>(v);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Tree <span class="title">Query</span><span class="params">(<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=T[v].L&amp;&amp;R&gt;=T[v].R)<span class="keyword">return</span> T[v];</span><br><span class="line"><span class="built_in">pushdown</span>(v);</span><br><span class="line"><span class="type">int</span> mid=(T[v].L+T[v].R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(R&lt;=mid)<span class="keyword">return</span> <span class="built_in">Query</span>(L,R,v&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(L&gt;mid)<span class="keyword">return</span> <span class="built_in">Query</span>(L,R,(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">Tree now1=<span class="built_in">Query</span>(L,R,v&lt;&lt;<span class="number">1</span>),now2=<span class="built_in">Query</span>(L,R,(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>),now;</span><br><span class="line">now.sum0=now1.sum0+now2.sum0;</span><br><span class="line">now.sum1=now1.sum1+now2.sum1;</span><br><span class="line"><span class="keyword">if</span>(now1.sum1==<span class="number">0</span>)now.Lmax0=now1.Lmax0+now2.Lmax0;</span><br><span class="line"><span class="keyword">else</span> now.Lmax0=now1.Lmax0;</span><br><span class="line"><span class="keyword">if</span>(now1.sum0==<span class="number">0</span>)now.Lmax1=now1.Lmax1+now2.Lmax1;</span><br><span class="line"><span class="keyword">else</span> now.Lmax1=now1.Lmax1;</span><br><span class="line"><span class="keyword">if</span>(now2.sum1==<span class="number">0</span>)now.Rmax0=now1.Rmax0+now2.Rmax0;</span><br><span class="line"><span class="keyword">else</span> now.Rmax0=now2.Rmax0;</span><br><span class="line"><span class="keyword">if</span>(now2.sum0==<span class="number">0</span>)now.Rmax1=now1.Rmax1+now2.Rmax1;</span><br><span class="line"><span class="keyword">else</span> now.Rmax1=now2.Rmax1;</span><br><span class="line">now.max0=<span class="built_in">max</span>(<span class="built_in">max</span>(now1.max0,now2.max0),now1.Rmax0+now2.Lmax0);</span><br><span class="line">now.max1=<span class="built_in">max</span>(<span class="built_in">max</span>(now1.max1,now2.max1),now1.Rmax1+now2.Lmax1);</span><br><span class="line"><span class="keyword">return</span> now;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,j,n,m,cmd,L,R;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line"><span class="built_in">Build</span>(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;cmd,&amp;L,&amp;R);++L;++R;</span><br><span class="line"><span class="keyword">if</span>(cmd==<span class="number">0</span>)<span class="built_in">Set</span>(L,R,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(cmd==<span class="number">1</span>)<span class="built_in">Set</span>(L,R,<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(cmd==<span class="number">2</span>)<span class="built_in">Rev</span>(L,R,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(cmd==<span class="number">3</span>)<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">Query</span>(L,R,<span class="number">1</span>).sum1);</span><br><span class="line"><span class="keyword">if</span>(cmd==<span class="number">4</span>)<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">Query</span>(L,R,<span class="number">1</span>).max1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>solution-code2246</title>
      <link href="/oi/post/solution-code2246/"/>
      <url>/oi/post/solution-code2246/</url>
      
        <content type="html"><![CDATA[<p>一道很麻烦的平衡树模板题<br>注意：</p><ul><li>此题空间限制较小，必须把不需要的点计入队列q中来节省空间，同时用id数组保存位置</li><li>删除操作时必须清空所有属性，因为后面还会用到</li><li>插入多个元素必须用这些元素单独建立一颗子树再合并</li><li>对于重复的Find+Splay操作可以用一个函数替代减少代码长度</li><li>pushup的顺序有所不同！</li></ul><span id="more"></span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3F3F3F3F</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 1000005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> ch[N][<span class="number">2</span>],a[N],id[N],val[N],siz[N],sum[N],Lmax[N],Rmax[N],maxx[N],fa[N],rt,cnt;</span><br><span class="line"><span class="type">bool</span> tag[N],rev[N];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt;q;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> L=ch[x][<span class="number">0</span>],R=ch[x][<span class="number">1</span>];</span><br><span class="line">sum[x]=sum[L]+sum[R]+val[x];</span><br><span class="line">siz[x]=siz[L]+siz[R]+<span class="number">1</span>;</span><br><span class="line">maxx[x]=<span class="built_in">max</span>(<span class="built_in">max</span>(maxx[L],maxx[R]),Rmax[L]+val[x]+Lmax[R]);</span><br><span class="line">Lmax[x]=<span class="built_in">max</span>(Lmax[L],sum[L]+val[x]+Lmax[R]);</span><br><span class="line">Rmax[x]=<span class="built_in">max</span>(Rmax[R],Rmax[L]+val[x]+sum[R]);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> L=ch[x][<span class="number">0</span>],R=ch[x][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span>(tag[x])</span><br><span class="line">&#123;</span><br><span class="line">tag[x]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(L)tag[L]=<span class="number">1</span>,val[L]=val[x],sum[L]=val[x]*siz[L];</span><br><span class="line"><span class="keyword">if</span>(R)tag[R]=<span class="number">1</span>,val[R]=val[x],sum[R]=val[x]*siz[R];</span><br><span class="line"><span class="keyword">if</span>(val[x]&gt;=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(L)Lmax[L]=Rmax[L]=maxx[L]=sum[L];</span><br><span class="line"><span class="keyword">if</span>(R)Lmax[R]=Rmax[R]=maxx[R]=sum[R];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(L)Lmax[L]=Rmax[L]=<span class="number">0</span>,maxx[L]=val[x];</span><br><span class="line"><span class="keyword">if</span>(R)Lmax[R]=Rmax[R]=<span class="number">0</span>,maxx[R]=val[x];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(rev[x])</span><br><span class="line">&#123;</span><br><span class="line">rev[x]=<span class="number">0</span>;rev[L]^=<span class="number">1</span>;rev[R]^=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">swap</span>(Lmax[L],Rmax[L]);</span><br><span class="line"><span class="built_in">swap</span>(Lmax[R],Rmax[R]);</span><br><span class="line"><span class="built_in">swap</span>(ch[L][<span class="number">0</span>],ch[L][<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">swap</span>(ch[R][<span class="number">0</span>],ch[R][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Rot</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span>&amp; f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> y=fa[x],z=fa[y],L=(ch[y][<span class="number">1</span>]==x),R=L^<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(y==f)f=x;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ch[z][<span class="number">0</span>]==y)ch[z][<span class="number">0</span>]=x;</span><br><span class="line"><span class="keyword">else</span> ch[z][<span class="number">1</span>]=x;</span><br><span class="line">&#125;</span><br><span class="line">fa[ch[x][R]]=y;</span><br><span class="line">fa[y]=x;fa[x]=z;</span><br><span class="line">ch[y][L]=ch[x][R];</span><br><span class="line">ch[x][R]=y;</span><br><span class="line"><span class="built_in">pushup</span>(y);</span><br><span class="line"><span class="built_in">pushup</span>(x);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Splay</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span>&amp; f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(x!=f)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> y=fa[x],z=fa[y];</span><br><span class="line"><span class="keyword">if</span>(y!=f)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ch[y][<span class="number">0</span>]==x^ch[z][<span class="number">0</span>]==y)<span class="built_in">Rot</span>(x,f);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">Rot</span>(y,f);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Rot</span>(x,f);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Find</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> L=ch[x][<span class="number">0</span>],R=ch[x][<span class="number">1</span>];</span><br><span class="line"><span class="built_in">pushdown</span>(x);</span><br><span class="line"><span class="keyword">if</span>(siz[L]+<span class="number">1</span>==k)<span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">if</span>(siz[L]+<span class="number">1</span>&gt;k)<span class="keyword">return</span> <span class="built_in">Find</span>(L,k);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Find</span>(R,k-siz[L]<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!x)<span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> L=ch[x][<span class="number">0</span>],R=ch[x][<span class="number">1</span>];</span><br><span class="line"><span class="built_in">del</span>(L);<span class="built_in">del</span>(R);</span><br><span class="line">q.<span class="built_in">push</span>(x);</span><br><span class="line">fa[x]=ch[x][<span class="number">0</span>]=ch[x][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">tag[x]=rev[x]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Split</span><span class="params">(<span class="type">int</span> L,<span class="type">int</span> tot)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="built_in">Find</span>(rt,L),y=<span class="built_in">Find</span>(rt,L+tot+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">Splay</span>(x,rt);</span><br><span class="line"><span class="built_in">Splay</span>(y,ch[x][<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">return</span> ch[y][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Query</span><span class="params">(<span class="type">int</span> L,<span class="type">int</span> tot)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,sum[<span class="built_in">Split</span>(L,tot)]);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Modify</span><span class="params">(<span class="type">int</span> L,<span class="type">int</span> tot,<span class="type">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="built_in">Split</span>(L,tot),y=fa[x],z=fa[y];</span><br><span class="line">val[x]=value;</span><br><span class="line">tag[x]=<span class="number">1</span>;sum[x]=siz[x]*value;</span><br><span class="line"><span class="keyword">if</span>(value&gt;=<span class="number">0</span>)Lmax[x]=Rmax[x]=maxx[x]=sum[x];</span><br><span class="line"><span class="keyword">else</span> Lmax[x]=Rmax[x]=<span class="number">0</span>,maxx[x]=value;</span><br><span class="line"><span class="built_in">pushup</span>(y);</span><br><span class="line"><span class="built_in">pushup</span>(z);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Rev</span><span class="params">(<span class="type">int</span> L,<span class="type">int</span> tot)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="built_in">Split</span>(L,tot),y=fa[x],z=fa[y];</span><br><span class="line"><span class="keyword">if</span>(!tag[x])</span><br><span class="line">&#123;</span><br><span class="line">rev[x]^=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">swap</span>(ch[x][<span class="number">0</span>],ch[x][<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">swap</span>(Lmax[x],Rmax[x]);</span><br><span class="line"><span class="built_in">pushup</span>(y);</span><br><span class="line"><span class="built_in">pushup</span>(z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> L,<span class="type">int</span> tot)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="built_in">Split</span>(L,tot),y=fa[x],z=fa[y];</span><br><span class="line"><span class="built_in">del</span>(x);ch[y][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">pushup</span>(y);</span><br><span class="line"><span class="built_in">pushup</span>(z);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Build</span><span class="params">(<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L&gt;R)<span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> mid=(L+R)&gt;&gt;<span class="number">1</span>,now=id[mid],lst=id[f];</span><br><span class="line"><span class="keyword">if</span>(L==R)</span><br><span class="line">&#123;</span><br><span class="line">sum[now]=a[L];</span><br><span class="line">siz[now]=<span class="number">1</span>;</span><br><span class="line">tag[now]=rev[now]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(a[L]&gt;=<span class="number">0</span>)Lmax[now]=Rmax[now]=maxx[now]=a[L];</span><br><span class="line"><span class="keyword">else</span> Lmax[now]=Rmax[now]=<span class="number">0</span>,maxx[now]=a[L];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Build</span>(L,mid<span class="number">-1</span>,mid);</span><br><span class="line"><span class="built_in">Build</span>(mid+<span class="number">1</span>,R,mid);</span><br><span class="line">&#125;</span><br><span class="line">val[now]=a[mid];</span><br><span class="line">fa[now]=lst;</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line">ch[lst][mid&gt;=f]=now;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Insert</span><span class="params">(<span class="type">int</span> L,<span class="type">int</span> tot)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,x,y,z;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=tot;++i)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=tot;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!q.<span class="built_in">empty</span>())id[i]=q.<span class="built_in">front</span>(),q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">else</span> id[i]=++cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Build</span>(<span class="number">1</span>,tot,<span class="number">0</span>);z=id[(tot+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>];</span><br><span class="line">x=<span class="built_in">Find</span>(rt,L+<span class="number">1</span>);y=<span class="built_in">Find</span>(rt,L+<span class="number">2</span>);</span><br><span class="line"><span class="built_in">Splay</span>(x,rt);</span><br><span class="line"><span class="built_in">Splay</span>(y,ch[x][<span class="number">1</span>]);</span><br><span class="line">fa[z]=y;ch[y][<span class="number">0</span>]=z;</span><br><span class="line"><span class="built_in">pushup</span>(y);</span><br><span class="line"><span class="built_in">pushup</span>(x);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> cmd[<span class="number">15</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,n,m,L,tot,value;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">maxx[<span class="number">0</span>]=a[<span class="number">1</span>]=a[n+<span class="number">2</span>]=-inf;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i+<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n+<span class="number">2</span>;++i)id[i]=i;</span><br><span class="line"><span class="built_in">Build</span>(<span class="number">1</span>,n+<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">rt=(n+<span class="number">3</span>)&gt;&gt;<span class="number">1</span>;cnt=n+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,cmd);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(cmd,<span class="string">&quot;INSERT&quot;</span>)==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;L,&amp;tot);</span><br><span class="line"><span class="built_in">Insert</span>(L,tot);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(cmd,<span class="string">&quot;DELETE&quot;</span>)==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;L,&amp;tot);</span><br><span class="line"><span class="built_in">del</span>(L,tot);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(cmd,<span class="string">&quot;MAKE-SAME&quot;</span>)==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;L,&amp;tot,&amp;value);</span><br><span class="line"><span class="built_in">Modify</span>(L,tot,value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(cmd,<span class="string">&quot;REVERSE&quot;</span>)==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;L,&amp;tot);</span><br><span class="line"><span class="built_in">Rev</span>(L,tot);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(cmd,<span class="string">&quot;GET-SUM&quot;</span>)==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;L,&amp;tot);</span><br><span class="line"><span class="built_in">Query</span>(L,tot);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(cmd,<span class="string">&quot;MAX-SUM&quot;</span>)==<span class="number">0</span>)<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,maxx[rt]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 平衡树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DP</title>
      <link href="/oi/post/DP/"/>
      <url>/oi/post/DP/</url>
      
        <content type="html"><![CDATA[<h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><ul><li>空(<del>逃</del>)</li></ul><span id="more"></span><h2 id="下载讲义"><a href="#下载讲义" class="headerlink" title="下载讲义"></a>下载讲义</h2><p><a href="/upload/DP1.pdf">DP1.pdf</a><br><a href="/upload/DP2.pdf">DP2.pdf</a><br><a href="/upload/DP3.pdf">DP3.pdf</a><br><a href="/upload/DP4.pdf">DP4.pdf</a><br><a href="/upload/DP5.pdf">DP5.pdf</a><br><a href="/upload/DP6.pdf">DP6.pdf</a><br><a href="/upload/%E6%8F%92%E5%A4%B4DP.pdf">插头DP.pdf</a><br><a href="/upload/%E6%A6%82%E7%8E%87DP.pdf">概率DP.pdf</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 状压DP </tag>
            
            <tag> 概率DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>solution-code3134</title>
      <link href="/oi/post/solution-code3134/"/>
      <url>/oi/post/solution-code3134/</url>
      
        <content type="html"><![CDATA[<p>注意：二分起始节点不是a+1，而是a+i+1<br>可以倒叙循环，一旦找不到可匹配的人就直接输出答案</p><span id="more"></span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[<span class="number">200005</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,n,s;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> tot=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;s);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;a[i]);</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;=<span class="number">1</span>;--i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span>* t=<span class="built_in">upper_bound</span>(a+i+<span class="number">1</span>,a+n+<span class="number">1</span>,s-a[i]);</span><br><span class="line"><span class="keyword">if</span>(t==a+n+<span class="number">1</span>)<span class="keyword">break</span>;</span><br><span class="line">tot+=a+n+<span class="number">1</span>-t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,tot);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>solution-code2660</title>
      <link href="/oi/post/solution-code2660/"/>
      <url>/oi/post/solution-code2660/</url>
      
        <content type="html"><![CDATA[<p>线段树模板题，求个数时遇到set标记就返回<br>由于个数较少，可以用long long压位暴力处理</p><span id="more"></span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Tree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> L,R,col;</span><br><span class="line">&#125;T[<span class="number">400005</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(T[v].col!=<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">T[v&lt;&lt;<span class="number">1</span>].col=T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].col=T[v].col;</span><br><span class="line">T[v].col=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Build</span><span class="params">(<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T[v].L=L;T[v].R=R;</span><br><span class="line">T[v].col=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(L==R)<span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> mid=(L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">Build</span>(L,mid,v&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="built_in">Build</span>(mid+<span class="number">1</span>,R,(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Insert</span><span class="params">(<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> col,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L&gt;T[v].R||R&lt;T[v].L)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=T[v].L&amp;&amp;R&gt;=T[v].R)</span><br><span class="line">&#123;</span><br><span class="line">T[v].col=col;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(v);</span><br><span class="line"><span class="built_in">Insert</span>(L,R,col,v&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="built_in">Insert</span>(L,R,col,(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">long</span> <span class="type">long</span> <span class="title">Query</span><span class="params">(<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L&gt;T[v].R||R&lt;T[v].L)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(T[v].col!=<span class="number">-1</span>)<span class="keyword">return</span> <span class="number">1LL</span>&lt;&lt;T[v].col;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Query</span>(L,R,v&lt;&lt;<span class="number">1</span>)|<span class="built_in">Query</span>(L,R,(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,n,m,k,ch,L,R,v;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;k,&amp;m);</span><br><span class="line"><span class="built_in">Build</span>(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(ch=<span class="built_in">getchar</span>())<span class="keyword">if</span>(ch==<span class="string">&#x27;C&#x27;</span>||ch==<span class="string">&#x27;P&#x27;</span>)<span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;L,&amp;R);</span><br><span class="line"><span class="keyword">if</span>(ch==<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;v);</span><br><span class="line"><span class="built_in">Insert</span>(L,R,v,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,__builtin_popcount(<span class="built_in">Query</span>(L,R,<span class="number">1</span>)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>solution-code3586</title>
      <link href="/oi/post/solution-code3586/"/>
      <url>/oi/post/solution-code3586/</url>
      
        <content type="html"><![CDATA[<p>RMQ模板题，用b数组记录每个区段的</p><span id="more"></span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m,a[<span class="number">100005</span>],b[<span class="number">100005</span>][<span class="number">20</span>],sum[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ST</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;j)&lt;=n;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">b[i][j]=<span class="built_in">max</span>(b[i][j<span class="number">-1</span>],b[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> L,<span class="type">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L&gt;R)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> x=<span class="built_in">int</span>((<span class="built_in">log</span>(R-L+<span class="number">1</span>))/<span class="built_in">log</span>(<span class="number">2</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">max</span>(b[L][x],b[R-(<span class="number">1</span>&lt;&lt;x)+<span class="number">1</span>][x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,pos,L,R;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);pos=n;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line"><span class="keyword">if</span>(a[i]==a[i<span class="number">-1</span>])b[i][<span class="number">0</span>]=b[i<span class="number">-1</span>][<span class="number">0</span>]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> b[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=n;i&gt;=<span class="number">1</span>;--i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]==a[i+<span class="number">1</span>])sum[i]=b[pos][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">else</span> pos=i,sum[i]=b[pos][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">ST</span>();</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;L,&amp;R);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">min</span>(R-L+<span class="number">1</span>,<span class="built_in">max</span>(<span class="built_in">max</span>(sum[L]-b[L][<span class="number">0</span>]+<span class="number">1</span>,b[R][<span class="number">0</span>]),<span class="built_in">ask</span>(L+sum[L]-b[L][<span class="number">0</span>]+<span class="number">1</span>,R-b[R][<span class="number">0</span>]))));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>solution-code3329</title>
      <link href="/oi/post/solution-code3329/"/>
      <url>/oi/post/solution-code3329/</url>
      
        <content type="html"><![CDATA[<p>注意n、m和tmp的区别！<br>注意清零时候的优化，不需要的值不要清零！</p><span id="more"></span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> to,next;</span><br><span class="line">LL val;</span><br><span class="line">&#125;e[<span class="number">500005</span>];</span><br><span class="line"><span class="type">int</span> n,a[<span class="number">250005</span>],h[<span class="number">250005</span>],low[<span class="number">250005</span>],d[<span class="number">250005</span>],f[<span class="number">250005</span>][<span class="number">19</span>],st[<span class="number">250005</span>],flag[<span class="number">250005</span>],cnt,sign,qid;</span><br><span class="line">LL dp[<span class="number">250005</span>],maxv[<span class="number">250005</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Addedge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,LL v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[++cnt]=(Node)&#123;y,h[x],v&#125;;h[x]=cnt;</span><br><span class="line">e[++cnt]=(Node)&#123;x,h[y],v&#125;;h[y]=cnt;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; x,<span class="type">const</span> <span class="type">int</span>&amp; y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> low[x]&lt;low[y];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> pre,LL val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,y;</span><br><span class="line">low[x]=++sign;</span><br><span class="line">d[x]=d[pre]+<span class="number">1</span>;</span><br><span class="line">f[x][<span class="number">0</span>]=pre;</span><br><span class="line">maxv[x]=<span class="built_in">min</span>(maxv[pre],val);</span><br><span class="line"><span class="keyword">for</span>(i=h[x];i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">y=e[i].to;</span><br><span class="line"><span class="keyword">if</span>(y==pre)<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs</span>(y,x,e[i].val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=<span class="number">18</span>;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)f[i][j]=f[f[i][j<span class="number">-1</span>]][j<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">LCA</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">if</span>(d[x]&lt;d[y])<span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">18</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(d[f[x][i]]&gt;=d[y])x=f[x][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x==y)<span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">18</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(f[x][i]==f[y][i])<span class="keyword">continue</span>;</span><br><span class="line">x=f[x][i];y=f[y][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> f[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">DP</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,y;</span><br><span class="line"><span class="keyword">if</span>(flag[x]==qid)<span class="keyword">return</span> maxv[x];</span><br><span class="line"><span class="keyword">for</span>(i=h[x];i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">y=e[i].to;</span><br><span class="line"><span class="keyword">if</span>(y==pre)<span class="keyword">continue</span>;</span><br><span class="line">dp[x]+=<span class="built_in">DP</span>(y,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[x]=<span class="built_in">min</span>(dp[x],<span class="number">1LL</span>*maxv[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Printst</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=st[<span class="number">0</span>];++i)<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,st[i]);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Build</span><span class="params">(<span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,x,y,lca,tmp=m;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;++i)flag[a[i]]=qid;</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+m+<span class="number">1</span>,cmp);a[++m]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;tmp;++i)a[++m]=<span class="built_in">LCA</span>(a[i],a[i+<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+m+<span class="number">1</span>,cmp);</span><br><span class="line">tmp=m;m=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=tmp;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]==a[i<span class="number">-1</span>])<span class="keyword">continue</span>;</span><br><span class="line">a[++m]=a[i];</span><br><span class="line">&#125;</span><br><span class="line">st[st[<span class="number">0</span>]=<span class="number">1</span>]=a[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;++i)h[a[i]]=dp[a[i]]=<span class="number">0</span>;</span><br><span class="line">cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">x=a[i];y=st[st[<span class="number">0</span>]];</span><br><span class="line">lca=<span class="built_in">LCA</span>(x,y);</span><br><span class="line"><span class="keyword">while</span>(st[st[<span class="number">0</span>]]!=lca)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Addedge</span>(st[st[<span class="number">0</span>]],st[st[<span class="number">0</span>]<span class="number">-1</span>],<span class="number">0</span>);</span><br><span class="line">--st[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">st[++st[<span class="number">0</span>]]=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(st[st[<span class="number">0</span>]]!=<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Addedge</span>(st[st[<span class="number">0</span>]],st[st[<span class="number">0</span>]<span class="number">-1</span>],<span class="number">0</span>);</span><br><span class="line">--st[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Solve</span><span class="params">(<span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m=<span class="built_in">Build</span>(m);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">DP</span>(<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> m,T,i,j,x,y;</span><br><span class="line">LL v;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%lld&quot;</span>,&amp;x,&amp;y,&amp;v);</span><br><span class="line"><span class="built_in">Addedge</span>(x,y,v);</span><br><span class="line">&#125;</span><br><span class="line">maxv[<span class="number">0</span>]=<span class="number">1LL</span>&lt;&lt;<span class="number">60</span>;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>,<span class="number">1LL</span>&lt;&lt;<span class="number">60</span>);</span><br><span class="line"><span class="built_in">Init</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=T;++i)</span><br><span class="line">&#123;</span><br><span class="line">qid=i;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=m;++j)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[j]);</span><br><span class="line"><span class="built_in">Solve</span>(m);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> LCA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>solution-code1608</title>
      <link href="/oi/post/solution-code1608/"/>
      <url>/oi/post/solution-code1608/</url>
      
        <content type="html"><![CDATA[<p>二叉堆和RMQ结合的好题，不停地取Query的最大值即可</p><span id="more"></span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x,y,id;</span><br><span class="line">&#125;a[<span class="number">50005</span>];</span><br><span class="line"><span class="type">int</span> n,f[<span class="number">50005</span>][<span class="number">17</span>],pos[<span class="number">50005</span>][<span class="number">17</span>],fa[<span class="number">50005</span>],Ls[<span class="number">50005</span>],Rs[<span class="number">50005</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Init</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">f[i][<span class="number">0</span>]=a[i].y;</span><br><span class="line">pos[i][<span class="number">0</span>]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=<span class="number">16</span>;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(f[i][j<span class="number">-1</span>]&lt;f[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>])</span><br><span class="line">&#123;</span><br><span class="line">f[i][j]=f[i][j<span class="number">-1</span>];</span><br><span class="line">pos[i][j]=pos[i][j<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(f[i][j<span class="number">-1</span>]&gt;f[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>])</span><br><span class="line">&#123;</span><br><span class="line">f[i][j]=f[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>];</span><br><span class="line">pos[i][j]=pos[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Ask</span><span class="params">(<span class="type">int</span> L,<span class="type">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="built_in">log2</span>(R-L+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(f[L][x]&lt;=f[R-(<span class="number">1</span>&lt;&lt;x)+<span class="number">1</span>][x])<span class="keyword">return</span> pos[L][x];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> pos[R-(<span class="number">1</span>&lt;&lt;x)+<span class="number">1</span>][x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L&gt;R)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> mid=<span class="built_in">Ask</span>(L,R),x=a[mid].id;</span><br><span class="line">fa[x]=pre;</span><br><span class="line">Ls[x]=<span class="built_in">dfs</span>(L,mid<span class="number">-1</span>,x);</span><br><span class="line">Rs[x]=<span class="built_in">dfs</span>(mid+<span class="number">1</span>,R,x);</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> Node&amp; a,<span class="type">const</span> Node&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.x&lt;b.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,x,y,rt;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">a[i]=(Node)&#123;x,y,i&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>,cmp);</span><br><span class="line"><span class="built_in">Init</span>();</span><br><span class="line">rt=<span class="built_in">dfs</span>(<span class="number">1</span>,n,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;YES\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)<span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>,fa[i],Ls[i],Rs[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RMQ </tag>
            
            <tag> 二叉堆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>solution-code4581</title>
      <link href="/oi/post/solution-code4581/"/>
      <url>/oi/post/solution-code4581/</url>
      
        <content type="html"><![CDATA[<p>模板题，需要注意pos和节点名称的区别</p><span id="more"></span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fpos fpos2333</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> to,next;</span><br><span class="line">&#125;e[<span class="number">200005</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> L,R;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> lazy,sum;</span><br><span class="line">&#125;T[<span class="number">400005</span>];</span><br><span class="line"><span class="type">int</span> a[<span class="number">200005</span>],pos[<span class="number">200005</span>],fpos[<span class="number">200005</span>],top[<span class="number">200005</span>],siz[<span class="number">200005</span>],d[<span class="number">200005</span>],pre[<span class="number">200005</span>],h[<span class="number">200005</span>],vson[<span class="number">200005</span>],sign,cnt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Addedge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[++cnt]=(Node)&#123;y,h[x]&#125;;h[x]=cnt;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> prt,<span class="type">int</span> dep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,y;</span><br><span class="line">d[x]=dep;siz[x]=<span class="number">1</span>;</span><br><span class="line">pre[x]=prt;vson[x]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=h[x];i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">y=e[i].to;</span><br><span class="line"><span class="keyword">if</span>(y==prt)<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs1</span>(y,x,dep+<span class="number">1</span>);</span><br><span class="line">siz[x]+=siz[y];</span><br><span class="line"><span class="keyword">if</span>(vson[x]==<span class="number">-1</span>||siz[vson[x]]&lt;siz[y])vson[x]=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> sp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,y;</span><br><span class="line">pos[x]=++sign;top[x]=sp;</span><br><span class="line">fpos[sign]=x;<span class="comment">//!!!!!!!!</span></span><br><span class="line"><span class="keyword">if</span>(vson[x]!=<span class="number">-1</span>)<span class="built_in">dfs2</span>(vson[x],sp);</span><br><span class="line"><span class="keyword">for</span>(i=h[x];i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">y=e[i].to;</span><br><span class="line"><span class="keyword">if</span>(y==vson[x]||y==pre[x])<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs2</span>(y,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T[v].sum=T[v&lt;&lt;<span class="number">1</span>].sum+T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].sum;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!T[v].lazy)<span class="keyword">return</span>;</span><br><span class="line">T[v&lt;&lt;<span class="number">1</span>].sum+=<span class="number">1LL</span>*(T[v&lt;&lt;<span class="number">1</span>].R-T[v&lt;&lt;<span class="number">1</span>].L+<span class="number">1</span>)*T[v].lazy;</span><br><span class="line">T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].sum+=<span class="number">1LL</span>*(T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].R-T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].L+<span class="number">1</span>)*T[v].lazy;</span><br><span class="line">T[v&lt;&lt;<span class="number">1</span>].lazy+=T[v].lazy;</span><br><span class="line">T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].lazy+=T[v].lazy;</span><br><span class="line">T[v].lazy=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Build</span><span class="params">(<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T[v].L=L;T[v].R=R;</span><br><span class="line"><span class="keyword">if</span>(L==R)</span><br><span class="line">&#123;</span><br><span class="line">T[v].sum=a[fpos[L]];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=(L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">Build</span>(L,mid,v&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="built_in">Build</span>(mid+<span class="number">1</span>,R,(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line"><span class="built_in">pushup</span>(v);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Insert</span><span class="params">(<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> val,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L&gt;T[v].R||R&lt;T[v].L)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=T[v].L&amp;&amp;R&gt;=T[v].R)</span><br><span class="line">&#123;</span><br><span class="line">T[v].sum+=<span class="number">1LL</span>*(T[v].R-T[v].L+<span class="number">1</span>)*val;</span><br><span class="line">T[v].lazy+=val;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(v);</span><br><span class="line"><span class="built_in">Insert</span>(L,R,val,v&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="built_in">Insert</span>(L,R,val,(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line"><span class="built_in">pushup</span>(v);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">long</span> <span class="type">long</span> <span class="title">Query</span><span class="params">(<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L&gt;T[v].R||R&lt;T[v].L)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=T[v].L&amp;&amp;R&gt;=T[v].R)<span class="keyword">return</span> T[v].sum;</span><br><span class="line"><span class="built_in">pushdown</span>(v);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Query</span>(L,R,v&lt;&lt;<span class="number">1</span>)+<span class="built_in">Query</span>(L,R,(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">long</span> <span class="type">long</span> <span class="title">Query</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(d[top[x]]&lt;d[top[y]])<span class="built_in">swap</span>(x,y);</span><br><span class="line">sum+=<span class="built_in">Query</span>(pos[top[x]],pos[x],<span class="number">1</span>);</span><br><span class="line">x=pre[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(d[x]&gt;d[y])<span class="built_in">swap</span>(x,y);</span><br><span class="line">sum+=<span class="built_in">Query</span>(pos[x],pos[y],<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,x,y,n,m,cmd;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line"><span class="built_in">Addedge</span>(x,y);</span><br><span class="line"><span class="built_in">Addedge</span>(y,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">Build</span>(<span class="number">1</span>,sign,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;cmd,&amp;x);</span><br><span class="line"><span class="keyword">if</span>(cmd==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;y);</span><br><span class="line"><span class="built_in">Insert</span>(pos[x],pos[x],y,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(cmd==<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;y);</span><br><span class="line"><span class="built_in">Insert</span>(pos[x],pos[x]+siz[x]<span class="number">-1</span>,y,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">Query</span>(<span class="number">1</span>,x));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 树链剖分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>solution-code3179</title>
      <link href="/oi/post/solution-code3179/"/>
      <url>/oi/post/solution-code3179/</url>
      
        <content type="html"><![CDATA[<p>一个简单的Splay模板题，就是<strong>数组大小一定要乘2!</strong></p><span id="more"></span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[<span class="number">200005</span>],maxx[<span class="number">200005</span>],ch[<span class="number">200005</span>][<span class="number">2</span>],fa[<span class="number">200005</span>],siz[<span class="number">200005</span>],val[<span class="number">200005</span>],rt,cnt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> L=ch[x][<span class="number">0</span>],R=ch[x][<span class="number">1</span>];</span><br><span class="line">maxx[x]=<span class="built_in">max</span>(val[x],<span class="built_in">max</span>(maxx[L],maxx[R]));</span><br><span class="line">siz[x]=siz[L]+siz[R]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Rot</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span>&amp; f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> y=fa[x],z=fa[y],L=(ch[y][<span class="number">0</span>]!=x),R=(L^<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(y==f)f=x;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ch[z][<span class="number">0</span>]==y)ch[z][<span class="number">0</span>]=x;</span><br><span class="line"><span class="keyword">else</span> ch[z][<span class="number">1</span>]=x;</span><br><span class="line">&#125;</span><br><span class="line">fa[x]=z;fa[y]=x;</span><br><span class="line">fa[ch[x][R]]=y;</span><br><span class="line">ch[y][L]=ch[x][R];</span><br><span class="line">ch[x][R]=y;</span><br><span class="line"><span class="built_in">pushup</span>(y);<span class="built_in">pushup</span>(x);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Splay</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span>&amp; f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(x!=f)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> y=fa[x],z=fa[y];</span><br><span class="line"><span class="keyword">if</span>(y!=f)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ch[y][<span class="number">0</span>]==x^ch[z][<span class="number">0</span>]==y)<span class="built_in">Rot</span>(x,f);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">Rot</span>(y,f);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Rot</span>(x,f);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Find</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> L=ch[x][<span class="number">0</span>],R=ch[x][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span>(siz[L]+<span class="number">1</span>==k)<span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">if</span>(siz[L]+<span class="number">1</span>&gt;k)<span class="keyword">return</span> <span class="built_in">Find</span>(L,k);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Find</span>(R,k-siz[L]<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Build</span><span class="params">(<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L&gt;R)<span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> mid=(L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(L==R)</span><br><span class="line">&#123;</span><br><span class="line">maxx[mid]=a[mid<span class="number">-1</span>];</span><br><span class="line">siz[mid]=<span class="number">1</span>;</span><br><span class="line">ch[mid][<span class="number">0</span>]=ch[mid][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Build</span>(L,mid<span class="number">-1</span>,mid);</span><br><span class="line"><span class="built_in">Build</span>(mid+<span class="number">1</span>,R,mid);</span><br><span class="line">&#125;</span><br><span class="line">val[mid]=a[mid<span class="number">-1</span>];</span><br><span class="line">fa[mid]=pre;</span><br><span class="line"><span class="built_in">pushup</span>(mid);</span><br><span class="line">ch[pre][mid&gt;=pre]=mid;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Delete</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> L=<span class="built_in">Find</span>(rt,x),R=<span class="built_in">Find</span>(rt,x+<span class="number">2</span>);</span><br><span class="line"><span class="built_in">Splay</span>(L,rt);</span><br><span class="line"><span class="built_in">Splay</span>(R,ch[L][<span class="number">1</span>]);</span><br><span class="line"><span class="type">int</span> tmp=val[ch[R][<span class="number">0</span>]];</span><br><span class="line">siz[ch[R][<span class="number">0</span>]]=<span class="number">0</span>;</span><br><span class="line">fa[ch[R][<span class="number">0</span>]]=<span class="number">0</span>;</span><br><span class="line">ch[R][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">pushup</span>(R);</span><br><span class="line"><span class="built_in">pushup</span>(L);</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Insert</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> L=<span class="built_in">Find</span>(rt,x+<span class="number">1</span>),R=<span class="built_in">Find</span>(rt,x+<span class="number">2</span>);</span><br><span class="line"><span class="built_in">Splay</span>(L,rt);</span><br><span class="line"><span class="built_in">Splay</span>(R,ch[L][<span class="number">1</span>]);</span><br><span class="line">fa[++cnt]=R;</span><br><span class="line">val[cnt]=maxx[cnt]=value;</span><br><span class="line">siz[cnt]=<span class="number">1</span>;</span><br><span class="line">ch[R][<span class="number">0</span>]=cnt;</span><br><span class="line"><span class="built_in">pushup</span>(R);</span><br><span class="line"><span class="built_in">pushup</span>(L);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Ask</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> L=<span class="built_in">Find</span>(rt,x),R=<span class="built_in">Find</span>(rt,y+<span class="number">2</span>);</span><br><span class="line"><span class="built_in">Splay</span>(L,rt);</span><br><span class="line"><span class="built_in">Splay</span>(R,ch[L][<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">return</span> maxx[ch[R][<span class="number">0</span>]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,n,m,x,y;</span><br><span class="line"><span class="type">char</span> dir;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line"><span class="built_in">Build</span>(<span class="number">1</span>,n+<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">rt=n+<span class="number">3</span>&gt;&gt;<span class="number">1</span>;</span><br><span class="line">cnt=n+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %c %d&quot;</span>,&amp;x,&amp;dir,&amp;y);</span><br><span class="line"><span class="keyword">if</span>(dir==<span class="string">&#x27;L&#x27;</span>)<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">Ask</span>(x-y,x<span class="number">-1</span>));</span><br><span class="line"><span class="keyword">if</span>(dir==<span class="string">&#x27;D&#x27;</span>)<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">Ask</span>(x+<span class="number">1</span>,x+y));</span><br><span class="line"><span class="type">int</span> tmp=<span class="built_in">Delete</span>(x);</span><br><span class="line"><span class="keyword">if</span>(dir==<span class="string">&#x27;L&#x27;</span>)<span class="built_in">Insert</span>(x-y<span class="number">-1</span>,tmp);</span><br><span class="line"><span class="keyword">if</span>(dir==<span class="string">&#x27;D&#x27;</span>)<span class="built_in">Insert</span>(x+y<span class="number">-1</span>,tmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 平衡树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>solution-code4469</title>
      <link href="/oi/post/solution-code4469/"/>
      <url>/oi/post/solution-code4469/</url>
      
        <content type="html"><![CDATA[<p>模板题，统计更改数目就是求总数目的变化量</p><span id="more"></span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> to,next;</span><br><span class="line">&#125;e[<span class="number">200005</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Tree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> L,R,lazy,sum;</span><br><span class="line">&#125;T[<span class="number">400005</span>];</span><br><span class="line"><span class="type">int</span> siz[<span class="number">200005</span>],d[<span class="number">200005</span>],h[<span class="number">200005</span>],pre[<span class="number">200005</span>],vson[<span class="number">200005</span>],pos[<span class="number">200005</span>],top[<span class="number">200005</span>],sign,cnt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Addedge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[++cnt]=(Node)&#123;y,h[x]&#125;;h[x]=cnt;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> dep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,y;</span><br><span class="line">d[x]=dep;siz[x]=<span class="number">1</span>;</span><br><span class="line">vson[x]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=h[x];i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">y=e[i].to;</span><br><span class="line"><span class="built_in">dfs1</span>(y,dep+<span class="number">1</span>);</span><br><span class="line">siz[x]+=siz[y];</span><br><span class="line"><span class="keyword">if</span>(vson[x]==<span class="number">-1</span>||siz[vson[x]]&lt;siz[y])vson[x]=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> sp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,y;</span><br><span class="line">pos[x]=++sign;top[x]=sp;</span><br><span class="line"><span class="keyword">if</span>(vson[x]!=<span class="number">-1</span>)<span class="built_in">dfs2</span>(vson[x],sp);</span><br><span class="line"><span class="keyword">for</span>(i=h[x];i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">y=e[i].to;</span><br><span class="line"><span class="keyword">if</span>(y==vson[x])<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs2</span>(y,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Build</span><span class="params">(<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T[v].L=L;T[v].R=R;</span><br><span class="line">T[v].lazy=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(L==R)<span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> mid=(L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">Build</span>(L,mid,v&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="built_in">Build</span>(mid+<span class="number">1</span>,R,(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(T[v].lazy==<span class="number">-1</span>)<span class="keyword">return</span>;</span><br><span class="line">T[v&lt;&lt;<span class="number">1</span>].sum=(T[v&lt;&lt;<span class="number">1</span>].R-T[v&lt;&lt;<span class="number">1</span>].L+<span class="number">1</span>)*T[v].lazy;</span><br><span class="line">T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].sum=(T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].R-T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].L+<span class="number">1</span>)*T[v].lazy;</span><br><span class="line">T[v&lt;&lt;<span class="number">1</span>].lazy=T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].lazy=T[v].lazy;</span><br><span class="line">T[v].lazy=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T[v].sum=T[v&lt;&lt;<span class="number">1</span>].sum+T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].sum;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Insert</span><span class="params">(<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> val,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L&gt;T[v].R||R&lt;T[v].L)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=T[v].L&amp;&amp;R&gt;=T[v].R)</span><br><span class="line">&#123;</span><br><span class="line">T[v].sum=(T[v].R-T[v].L+<span class="number">1</span>)*val;</span><br><span class="line">T[v].lazy=val;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(v);</span><br><span class="line"><span class="built_in">Insert</span>(L,R,val,v&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="built_in">Insert</span>(L,R,val,(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line"><span class="built_in">pushup</span>(v);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Insert</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(d[top[x]]&lt;d[top[y]])<span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="built_in">Insert</span>(pos[top[x]],pos[x],val,<span class="number">1</span>);</span><br><span class="line">x=pre[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(d[x]&gt;d[y])<span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="built_in">Insert</span>(pos[x],pos[y],val,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> cmd[<span class="number">15</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,n,m,x,lst;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;pre[i]);++pre[i];</span><br><span class="line"><span class="built_in">Addedge</span>(pre[i],i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">Build</span>(<span class="number">1</span>,sign,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s%d&quot;</span>,cmd,&amp;x);++x;</span><br><span class="line">lst=T[<span class="number">1</span>].sum;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(cmd,<span class="string">&quot;install&quot;</span>)==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Insert</span>(<span class="number">1</span>,x,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,T[<span class="number">1</span>].sum-lst);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Insert</span>(pos[x],pos[x]+siz[x]<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,lst-T[<span class="number">1</span>].sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 树链剖分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>solution-code4575</title>
      <link href="/oi/post/solution-code4575/"/>
      <url>/oi/post/solution-code4575/</url>
      
        <content type="html"><![CDATA[<p>树形DP模板题，注意用tmp数组和t变量来减短代码篇幅</p><span id="more"></span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> to,next,val;</span><br><span class="line">&#125;e[<span class="number">4005</span>];</span><br><span class="line">LL f[<span class="number">2005</span>][<span class="number">2005</span>],tmp[<span class="number">2005</span>];</span><br><span class="line"><span class="type">int</span> n,m,siz[<span class="number">2005</span>],h[<span class="number">2005</span>],cnt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Addedge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[++cnt]=(Node)&#123;y,h[x],v&#125;;h[x]=cnt;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">DP</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,j,k,y;</span><br><span class="line">siz[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=h[x];i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">y=e[i].to;</span><br><span class="line"><span class="keyword">if</span>(y==pre)<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">DP</span>(y,x);</span><br><span class="line"><span class="built_in">memset</span>(tmp,<span class="number">0</span>,<span class="built_in">sizeof</span>(tmp));</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;=siz[x];++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;=siz[y];++k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j+k&gt;m)<span class="keyword">break</span>;</span><br><span class="line">LL t=<span class="number">1LL</span>*e[i].val*(<span class="number">1LL</span>*(m-k)*k+<span class="number">1LL</span>*(siz[y]-k)*(n-siz[y]-(m-k)));</span><br><span class="line">tmp[j+k]=<span class="built_in">max</span>(tmp[j+k],f[x][j]+f[y][k]+t);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">siz[x]+=siz[y];</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;=siz[x];++j)f[x][j]=tmp[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,x,y,v;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;v);</span><br><span class="line"><span class="built_in">Addedge</span>(x,y,v);</span><br><span class="line"><span class="built_in">Addedge</span>(y,x,v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">DP</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,f[<span class="number">1</span>][m]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树形DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>solution-code3935</title>
      <link href="/oi/post/solution-code3935/"/>
      <url>/oi/post/solution-code3935/</url>
      
        <content type="html"><![CDATA[<p>题意：给你n个插入操作，第i次操作在指定位置插入i，要求每次操作后输出最长上升子序列的长度。<br>由于插入元素一定是在区间最大的，所以每次操作的答案就是在这个元素前面的最大答案+1即可。<br>由于插入元素的顺序不确定，所以用平衡树来维护最大值。</p><span id="more"></span><h3 id="平衡树-Treap"><a href="#平衡树-Treap" class="headerlink" title="平衡树(Treap):"></a>平衡树(Treap):</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,siz[<span class="number">100005</span>],L[<span class="number">100005</span>],R[<span class="number">100005</span>],rnd[<span class="number">100005</span>],v[<span class="number">100005</span>],ans[<span class="number">100005</span>],mn[<span class="number">100005</span>],rt,cnt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">siz[x]=siz[L[x]]+siz[R[x]]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Rturn</span><span class="params">(<span class="type">int</span>&amp; k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> tmp=L[k];</span><br><span class="line">L[k]=R[tmp];</span><br><span class="line">R[tmp]=k;</span><br><span class="line"><span class="built_in">pushup</span>(k);</span><br><span class="line"><span class="built_in">pushup</span>(tmp);</span><br><span class="line">k=tmp;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Lturn</span><span class="params">(<span class="type">int</span>&amp; k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> tmp=R[k];</span><br><span class="line">R[k]=L[tmp];</span><br><span class="line">L[tmp]=k;</span><br><span class="line"><span class="built_in">pushup</span>(k);</span><br><span class="line"><span class="built_in">pushup</span>(tmp);</span><br><span class="line">k=tmp;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Insert</span><span class="params">(<span class="type">int</span>&amp; x,<span class="type">int</span> rank)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!x)</span><br><span class="line">&#123;</span><br><span class="line">x=++cnt;</span><br><span class="line">rnd[x]=<span class="built_in">rand</span>();siz[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">++siz[x];</span><br><span class="line"><span class="keyword">if</span>(siz[L[x]]&lt;rank)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Insert</span>(R[x],rank-siz[L[x]]<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span>(rnd[R[x]]&lt;rnd[x])<span class="built_in">Lturn</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Insert</span>(L[x],rank);</span><br><span class="line"><span class="keyword">if</span>(rnd[L[x]]&lt;rnd[x])<span class="built_in">Rturn</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!x)<span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">dfs</span>(L[x]);</span><br><span class="line">v[++v[<span class="number">0</span>]]=x;</span><br><span class="line"><span class="built_in">dfs</span>(R[x]);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,maxx=<span class="number">0</span>,tmp;</span><br><span class="line"><span class="built_in">memset</span>(mn,<span class="number">0x3F</span>,<span class="built_in">sizeof</span>(mn));</span><br><span class="line">mn[<span class="number">0</span>]=<span class="number">-0x3F3F3F3F</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">tmp=<span class="built_in">upper_bound</span>(mn,mn+maxx+<span class="number">1</span>,v[i])-mn;</span><br><span class="line"><span class="keyword">if</span>(mn[tmp<span class="number">-1</span>]&lt;=v[i])</span><br><span class="line">&#123;</span><br><span class="line">mn[tmp]=<span class="built_in">min</span>(mn[tmp],v[i]);</span><br><span class="line">ans[v[i]]=tmp;</span><br><span class="line">maxx=<span class="built_in">max</span>(maxx,tmp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans[i]=<span class="built_in">max</span>(ans[i],ans[i<span class="number">-1</span>]));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line"><span class="built_in">Insert</span>(rt,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(rt);</span><br><span class="line"><span class="built_in">Solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="平衡树-Splay-："><a href="#平衡树-Splay-：" class="headerlink" title="平衡树(Splay)："></a>平衡树(Splay)：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> val[<span class="number">100005</span>],ch[<span class="number">100005</span>][<span class="number">2</span>],fa[<span class="number">100005</span>],siz[<span class="number">100005</span>],maxx[<span class="number">100005</span>],rt,cnt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> L=ch[x][<span class="number">0</span>],R=ch[x][<span class="number">1</span>];</span><br><span class="line">siz[x]=siz[L]+siz[R]+<span class="number">1</span>;</span><br><span class="line">maxx[x]=<span class="built_in">max</span>(val[x],<span class="built_in">max</span>(maxx[L],maxx[R]));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Rot</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span>&amp; f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> y=fa[x],z=fa[y],L=(ch[y][<span class="number">0</span>]!=x),R=(L^<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(y==f)f=x;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ch[z][<span class="number">0</span>]==y)ch[z][<span class="number">0</span>]=x;</span><br><span class="line"><span class="keyword">else</span> ch[z][<span class="number">1</span>]=x;</span><br><span class="line">&#125;</span><br><span class="line">fa[x]=z;fa[y]=x;</span><br><span class="line">fa[ch[x][R]]=y;</span><br><span class="line">ch[y][L]=ch[x][R];</span><br><span class="line">ch[x][R]=y;</span><br><span class="line"><span class="built_in">pushup</span>(y);</span><br><span class="line"><span class="built_in">pushup</span>(x);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Splay</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span>&amp; f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(x!=f)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> y=fa[x],z=fa[y];</span><br><span class="line"><span class="keyword">if</span>(y!=f)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ch[z][<span class="number">0</span>]==y^ch[y][<span class="number">0</span>]==x)<span class="built_in">Rot</span>(x,f);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">Rot</span>(y,f);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Rot</span>(x,f);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Find</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> L=ch[x][<span class="number">0</span>],R=ch[x][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span>(siz[L]+<span class="number">1</span>==k)<span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">if</span>(siz[L]+<span class="number">1</span>&gt;k)<span class="keyword">return</span> <span class="built_in">Find</span>(L,k);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Find</span>(R,k-siz[L]<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Insert</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> L=<span class="built_in">Find</span>(rt,x),R=<span class="built_in">Find</span>(rt,x+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">Splay</span>(L,rt);</span><br><span class="line"><span class="built_in">Splay</span>(R,ch[L][<span class="number">1</span>]);</span><br><span class="line">fa[++cnt]=R;</span><br><span class="line">val[cnt]=maxx[cnt]=value;</span><br><span class="line">siz[cnt]=<span class="number">1</span>;</span><br><span class="line">ch[R][<span class="number">0</span>]=cnt;</span><br><span class="line"><span class="built_in">pushup</span>(R);</span><br><span class="line"><span class="built_in">pushup</span>(L);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Getmax</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> L=<span class="built_in">Find</span>(rt,x<span class="number">-1</span>),R=<span class="built_in">Find</span>(rt,y+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">Splay</span>(L,rt);</span><br><span class="line"><span class="built_in">Splay</span>(R,ch[L][<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">return</span> maxx[ch[R][<span class="number">0</span>]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Init</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">rt=<span class="number">1</span>;cnt=<span class="number">2</span>;</span><br><span class="line">val[<span class="number">1</span>]=val[<span class="number">2</span>]=<span class="number">-0x3FFFFFFF</span>;</span><br><span class="line">ch[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">2</span>;fa[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">siz[<span class="number">1</span>]=<span class="number">2</span>;siz[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">Init</span>();</span><br><span class="line"><span class="type">int</span> i,n,x,ans,Ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">ans=<span class="built_in">Getmax</span>(<span class="number">2</span>,x+<span class="number">1</span>)+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,Ans=<span class="built_in">max</span>(Ans,ans));</span><br><span class="line"><span class="built_in">Insert</span>(x+<span class="number">1</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="神奇的树状数组-二分"><a href="#神奇的树状数组-二分" class="headerlink" title="神奇的树状数组+二分"></a>神奇的树状数组+二分</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,a[<span class="number">100005</span>],ans[<span class="number">100005</span>],c[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="keyword">return</span> x&amp;(-x);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">getsum</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;<span class="keyword">return</span> x+y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">getmax</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;<span class="keyword">return</span> x&gt;y?x:y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Insert</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> val,<span class="type">int</span> oper(<span class="type">int</span>,<span class="type">int</span>))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(x&lt;=n)c[x]=<span class="built_in">oper</span>(c[x],val),x+=<span class="built_in">lowbit</span>(x);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Query</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> oper(<span class="type">int</span>,<span class="type">int</span>))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x&gt;=<span class="number">1</span>)sum=<span class="built_in">oper</span>(sum,c[x]),x-=<span class="built_in">lowbit</span>(x);</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Query</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> L=<span class="number">1</span>,R=n-x,mid;</span><br><span class="line"><span class="keyword">while</span>(L&lt;=R)</span><br><span class="line">&#123;</span><br><span class="line">mid=(L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">Query</span>(a[x]+mid,getsum)&gt;mid)L=mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> R=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);++a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=n;i&gt;=<span class="number">1</span>;--i)<span class="built_in">Insert</span>(a[i]+=<span class="built_in">Query</span>(i),<span class="number">1</span>,getsum);</span><br><span class="line"><span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="built_in">sizeof</span>(c));</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Insert</span>(a[i],ans[i]=<span class="built_in">Query</span>(a[i]<span class="number">-1</span>,getmax)+<span class="number">1</span>,getmax);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans[i]=<span class="built_in">max</span>(ans[i],ans[i<span class="number">-1</span>]));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="vector-树状数组出奇迹"><a href="#vector-树状数组出奇迹" class="headerlink" title="vector+树状数组出奇迹:"></a>vector+树状数组出奇迹:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> b[<span class="number">100005</span>],c[<span class="number">100005</span>],ans[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="keyword">return</span> x&amp;(-x);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(x&lt;=<span class="number">100002</span>)c[x]=<span class="built_in">max</span>(c[x],y),x+=<span class="built_in">lowbit</span>(x);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Sum</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x&gt;=<span class="number">1</span>)sum=<span class="built_in">max</span>(sum,c[x]),x-=<span class="built_in">lowbit</span>(x);</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;a;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,x,n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">a.<span class="built_in">insert</span>(a.<span class="built_in">begin</span>()+x,i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;++i)b[a[i]]=i+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Add</span>(b[i],ans[i]=<span class="built_in">Sum</span>(b[i]<span class="number">-1</span>)+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans[i]=<span class="built_in">max</span>(ans[i],ans[i<span class="number">-1</span>]));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 平衡树 </tag>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>费用流</title>
      <link href="/oi/post/%E8%B4%B9%E7%94%A8%E6%B5%81/"/>
      <url>/oi/post/%E8%B4%B9%E7%94%A8%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><ul><li>（无）</li></ul><span id="more"></span><h2 id="下载讲义"><a href="#下载讲义" class="headerlink" title="下载讲义"></a>下载讲义</h2><p><a href="/upload/%E8%B4%B9%E7%94%A8%E6%B5%81.pdf">费用流.pdf</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 费用流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AC自动机</title>
      <link href="/oi/post/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
      <url>/oi/post/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><ul><li>根节点的编号（0和1均可，但是不能混乱）</li><li>建立fail指针时，根据题目要求累加或者不累加cnt的值</li></ul><span id="more"></span><h2 id="下载讲义"><a href="#下载讲义" class="headerlink" title="下载讲义"></a>下载讲义</h2><p><a href="/upload/AC%E8%87%AA%E5%8A%A8%E6%9C%BA.pdf">AC自动机.pdf</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AC自动机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KMP</title>
      <link href="/oi/post/KMP/"/>
      <url>/oi/post/KMP/</url>
      
        <content type="html"><![CDATA[<h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><ul><li>（无）</li></ul><span id="more"></span><h2 id="下载讲义"><a href="#下载讲义" class="headerlink" title="下载讲义"></a>下载讲义</h2><p><a href="/upload/KMP.pdf">KMP.pdf</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>上下界网络流</title>
      <link href="/oi/post/%E4%B8%8A%E4%B8%8B%E7%95%8C%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
      <url>/oi/post/%E4%B8%8A%E4%B8%8B%E7%95%8C%E7%BD%91%E7%BB%9C%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><ul><li>cnt的初始值为1</li><li>源点和汇点的编号</li><li>求SAP时要清零</li><li>需要求down数组！！！</li><li>注意最大流是加法，最小流是减法</li></ul><span id="more"></span><h2 id="下载讲义"><a href="#下载讲义" class="headerlink" title="下载讲义"></a>下载讲义</h2><p><a href="/upload/%E4%B8%8A%E4%B8%8B%E7%95%8C%E7%BD%91%E7%BB%9C%E6%B5%81.pdf">上下界网络流.pdf</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 上下界网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>概率和期望DP</title>
      <link href="/oi/post/%E6%A6%82%E7%8E%87%E5%92%8C%E6%9C%9F%E6%9C%9BDP/"/>
      <url>/oi/post/%E6%A6%82%E7%8E%87%E5%92%8C%E6%9C%9F%E6%9C%9BDP/</url>
      
        <content type="html"><![CDATA[<p>这类题比较简单，跟着题目的要求去设方程就可以了</p><h2 id="注意！"><a href="#注意！" class="headerlink" title="注意！"></a>注意！</h2><ul><li>概率DP是正着设，期望DP是反着设</li><li>一定要注意环，有环就要用高斯消元</li></ul><span id="more"></span><h2 id="下载讲义"><a href="#下载讲义" class="headerlink" title="下载讲义"></a>下载讲义</h2><p><a href="/upload/%E6%A6%82%E7%8E%87%E5%92%8C%E6%9C%9F%E6%9C%9BDP.pdf">概率和期望DP.pdf</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概率DP </tag>
            
            <tag> 期望DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[BZOJ1430]小猴打架</title>
      <link href="/oi/post/solution-code1826/"/>
      <url>/oi/post/solution-code1826/</url>
      
        <content type="html"><![CDATA[<p>树的prufer编码的弱版模板题。</p><span id="more"></span><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>一开始森林里面有$N$只互不相识的小猴子，它们经常打架，但打架的双方都必须不是好朋友。每次打完架后，打架的双方以及它们的好朋友就会互相认识，成为好朋友。经过$N-1$次打架之后，整个森林的小猴都会成为好朋友。现在的问题是，总共有多少种不同的打架过程。比如当$N&#x3D;3$时，就有{1-2,1-3}{1-2,2-3}{1-3,1-2}{1-3,2-3}{2-3,1-2}{2-3,1-3}六种不同的打架过程。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>一个整数$N$。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>一行，方案数$\mod 9999991$。</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">96</span><br></pre></td></tr></table></figure><h3 id="说明-提示"><a href="#说明-提示" class="headerlink" title="说明&#x2F;提示"></a>说明&#x2F;提示</h3><p>$50\%$的数据$N\le 10^3$。<br>$100\%$的数据$N\le 10^6$。</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 9999991</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">quickpow</span><span class="params">(LL a,LL b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LL ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(b&amp;<span class="number">1</span>)ans=(ans*a)%mod;</span><br><span class="line">a=(a*a)%mod;</span><br><span class="line">b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,n;</span><br><span class="line">LL ans;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">ans=<span class="built_in">quickpow</span>(n,n<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;++i)ans=(ans*i)%mod;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树的prufer编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[HNOI2004]树的计数</title>
      <link href="/oi/post/solution-code2503/"/>
      <url>/oi/post/solution-code2503/</url>
      
        <content type="html"><![CDATA[<h2 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h2><ul><li>度数为1一定无解</li><li>度数减一的和不等于点数-2一定无解</li><li>数据保证满足条件的树不超过$10^{17}$个，但要用高精<del>(然而并不需要，呵呵)</del></li></ul><p>其他的就跟模板题一样了～</p><span id="more"></span><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>一个有$n$个结点的树，设它的结点分别为$v_1,v_2,\cdots ,v_n$，已知第$i$个结点$v_i$的度数为$d_i$，问满足这样的条件的不同的树有多少棵。给定$n,d_1,d_2,\cdots ,d_n$，编程需要输出满足$d(v_i)&#x3D;d_i$的树的个数。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行是一个正整数$n$，表示树有$n$个结点。第二行有$n$个数，第$i$个数表示$d_i$，即树的第$i$个结点的度数。其中$1\le n\le 150$，输入数据保证满足条件的树不超过$10^{17}$个。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出满足条件的树有多少棵。</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">2 1 2 1</span><br></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">bigint</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">mutable</span> <span class="type">int</span> a[<span class="number">1005</span>];</span><br><span class="line">    <span class="keyword">inline</span> <span class="type">int</span>&amp; <span class="keyword">operator</span>[](<span class="type">size_t</span> pos)<span class="type">const</span>&#123;<span class="keyword">return</span> a[pos];&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="title">bigint</span><span class="params">()</span></span>&#123;<span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="built_in">sizeof</span>(a));a[<span class="number">0</span>]=<span class="number">1</span>;&#125;</span><br><span class="line">    <span class="keyword">inline</span> bigint&amp; <span class="keyword">operator</span>*=(<span class="type">int</span> b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=a[<span class="number">0</span>];++i)a[i]*=b;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=a[<span class="number">0</span>]||a[i];++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&gt;=<span class="number">10000</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                a[i+<span class="number">1</span>]+=a[i]/<span class="number">10000</span>;</span><br><span class="line">                a[i]%=<span class="number">10000</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        a[<span class="number">0</span>]=i<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;ans;</span><br><span class="line"><span class="keyword">inline</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os,<span class="type">const</span> bigint&amp; a)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[a[<span class="number">0</span>]]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=a[<span class="number">0</span>]<span class="number">-1</span>;i&gt;=<span class="number">1</span>;--i)<span class="built_in">printf</span>(<span class="string">&quot;%04d&quot;</span>,a[i]);</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> num[<span class="number">1005</span>],d[<span class="number">1005</span>],p[<span class="number">1005</span>],cnt;</span><br><span class="line"><span class="type">bool</span> vis[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Solve</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> del)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i,j,s;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=cnt&amp;&amp;p[i]&lt;=x;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        s=p[i];</span><br><span class="line">        <span class="keyword">while</span>(s&lt;=x)</span><br><span class="line">        &#123;</span><br><span class="line">            num[i]+=(x/s)*del;</span><br><span class="line">            s*=p[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=<span class="number">1000</span>;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i])p[++cnt]=i;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=cnt&amp;&amp;i*p[j]&lt;=<span class="number">1000</span>;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            vis[i*p[j]]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%p[j]==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">Init</span>();</span><br><span class="line">    <span class="type">int</span> i,j,x,n,m=<span class="number">0</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">        <span class="keyword">if</span>(!x)<span class="built_in">printf</span>(<span class="string">&quot;1\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;0\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;d[i]);</span><br><span class="line">        <span class="keyword">if</span>(d[i]==<span class="number">0</span>)&#123;<span class="built_in">printf</span>(<span class="string">&quot;0\n&quot;</span>);<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">        --d[i];sum+=d[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sum!=n<span class="number">-2</span>)&#123;<span class="built_in">printf</span>(<span class="string">&quot;0\n&quot;</span>);<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="built_in">Solve</span>(n<span class="number">-2</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">Solve</span>(n-sum<span class="number">-2</span>,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(d[i]&gt;<span class="number">0</span>)<span class="built_in">Solve</span>(d[i],<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ans[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=cnt;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=num[i];++j)ans*=p[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n-sum<span class="number">-2</span>;++i)ans*=m;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树的prufer编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[HNOI2008]明明的烦恼</title>
      <link href="/oi/post/solution-code2425/"/>
      <url>/oi/post/solution-code2425/</url>
      
        <content type="html"><![CDATA[<p>详见<a href="../prufer-encoding#%E9%A2%98%E7%9B%AE%E5%88%86%E6%9E%90">Prufer编码例题</a></p><span id="more"></span><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>自从明明学了树的结构，就对奇怪的树产生了兴趣……给出标号为$1$到$N$的点，以及某些点最终的度数，允许在任意两点间连线，可产生多少棵度数满足要求的树？</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行为$N(0\lt N\le 1000)$，接下来$N$行，第$i+1$行给出第$i$个节点的度数$D_i$，如果对度数不要求，则输入<code>-1</code></p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>一个整数,表示不同的满足要求的树的个数，无解输出<code>0</code></p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1</span><br><span class="line">-1</span><br><span class="line">-1</span><br></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><h3 id="说明-提示"><a href="#说明-提示" class="headerlink" title="说明&#x2F;提示"></a>说明&#x2F;提示</h3><p>两棵树分别为1-2-3;1-3-2</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">bigint</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">mutable</span> <span class="type">int</span> a[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">inline</span> <span class="type">int</span>&amp; <span class="keyword">operator</span>[](<span class="type">size_t</span> pos)<span class="type">const</span>&#123;<span class="keyword">return</span> a[pos];&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="title">bigint</span><span class="params">()</span></span>&#123;<span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="built_in">sizeof</span>(a));a[<span class="number">0</span>]=<span class="number">1</span>;&#125;</span><br><span class="line"><span class="keyword">inline</span> bigint&amp; <span class="keyword">operator</span>*=(<span class="type">int</span> b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=a[<span class="number">0</span>];++i)a[i]*=b;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=a[<span class="number">0</span>]||a[i];++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;=<span class="number">10000</span>)</span><br><span class="line">&#123;</span><br><span class="line">a[i+<span class="number">1</span>]+=a[i]/<span class="number">10000</span>;</span><br><span class="line">a[i]%=<span class="number">10000</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">0</span>]=i<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;ans;</span><br><span class="line"><span class="keyword">inline</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os,<span class="type">const</span> bigint&amp; a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[a[<span class="number">0</span>]]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=a[<span class="number">0</span>]<span class="number">-1</span>;i&gt;=<span class="number">1</span>;--i)<span class="built_in">printf</span>(<span class="string">&quot;%04d&quot;</span>,a[i]);</span><br><span class="line"><span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> num[<span class="number">1005</span>],d[<span class="number">1005</span>],p[<span class="number">1005</span>],cnt;</span><br><span class="line"><span class="type">bool</span> vis[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Solve</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> del)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,j,s;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=cnt&amp;&amp;p[i]&lt;=x;++i)</span><br><span class="line">&#123;</span><br><span class="line">s=p[i];</span><br><span class="line"><span class="keyword">while</span>(s&lt;=x)</span><br><span class="line">&#123;</span><br><span class="line">num[i]+=(x/s)*del;</span><br><span class="line">s*=p[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=<span class="number">1000</span>;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i])p[++cnt]=i;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=cnt&amp;&amp;i*p[j]&lt;=<span class="number">1000</span>;++j)</span><br><span class="line">&#123;</span><br><span class="line">vis[i*p[j]]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(i%p[j]==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">Init</span>();</span><br><span class="line"><span class="type">int</span> i,j,n,m=<span class="number">0</span>,sum=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;d[i]);</span><br><span class="line"><span class="keyword">if</span>(d[i]==<span class="number">-1</span>)++m;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">--d[i];sum+=d[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(sum&gt;n<span class="number">-2</span>)&#123;<span class="built_in">printf</span>(<span class="string">&quot;0\n&quot;</span>);<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line"><span class="built_in">Solve</span>(n<span class="number">-2</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">Solve</span>(n-sum<span class="number">-2</span>,<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(d[i]&gt;<span class="number">0</span>)<span class="built_in">Solve</span>(d[i],<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">ans[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=cnt;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=num[i];++j)ans*=p[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n-sum<span class="number">-2</span>;++i)ans*=m;</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树的prufer编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树的prufer编码</title>
      <link href="/oi/post/prufer-encoding/"/>
      <url>/oi/post/prufer-encoding/</url>
      
        <content type="html"><![CDATA[<h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><ul><li>高精度！</li></ul><span id="more"></span><h2 id="实现树的Prufer编码"><a href="#实现树的Prufer编码" class="headerlink" title="实现树的Prufer编码"></a>实现树的Prufer编码</h2><p>Prufer编码是用另外一种形式来描述一棵树，这棵树是无根树，它可以和无根树之间形成一一对应关系。已知树，如何求Prufer编码？<br>首先选这棵树叶子中编号最小的点，将这个点删除，并且把它的邻接点加入一个数组中，例如第一个删除的节点为$1$，并且把$5$加入数组中。删除节点后形成一棵新的树，再在新树中删除最小的节点，并且把邻接点加入数组中，这样重复以上步骤，直到树中最后剩余两个点的时候终止操作。这时候数组中的便是Prufer编码。</p><img src="/oi/post/prufer-encoding/1.png" class="" title="1.png"><p>例如上图是一棵无根树，这棵树的Prufer编码为$(5,5,4,4,4,6)$。</p><h2 id="将Prufer编码还原为一棵树"><a href="#将Prufer编码还原为一棵树" class="headerlink" title="将Prufer编码还原为一棵树"></a>将Prufer编码还原为一棵树</h2><p>假如Prufer编码为$(a_1,a_2,a_3,\cdots a_{n-2})$在上述数组中，在数组最后加入$n$这个值，这样便形成了数组中包含$n-1$个节点，例如上述为$(5,5,4,4,4,6,8)$。<br>然后取不在数组中的最小值为$b_1$，则$b_1$与$a_1$是邻接点，在数组中删除$a_1$，再在剩下的数中选取不为$b_1$，且不在数组中的最小值为$b_2$，则$b_2$与$a_2$是邻接点，这样依次循环下去直到结束，这样便形成了一棵树。</p><h2 id="Prufer编码的性质"><a href="#Prufer编码的性质" class="headerlink" title="Prufer编码的性质"></a>Prufer编码的性质</h2><p><strong>Cayley 定理</strong>：不同的$n$节点标号树的数量为$n^{n-2}$。<br>任意一棵$n$节点的树都可唯一的用长度为$n-2$的Prufer编码表示；度数为$m$的节点的序号在Prufer编码中出现的次数为$m-1$；</p><h2 id="例题：-HNOI2008-明明的烦恼"><a href="#例题：-HNOI2008-明明的烦恼" class="headerlink" title="例题：[HNOI2008]明明的烦恼"></a>例题：[HNOI2008]明明的烦恼</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>自从明明学了树的结构，就对奇怪的树产生了兴趣……给出标号为$1$到$N$的点，以及某些点最终的度数，允许在任意两点间连线，可产生多少棵度数满足要求的树？</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行为$N(0\lt N\le 1000)$，接下来$N$行，第$i+1$行给出第$i$个节点的度数$D_i$，如果对度数不要求，则输入<code>-1</code></p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>一个整数,表示不同的满足要求的树的个数，无解输出<code>0</code></p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1</span><br><span class="line">-1</span><br><span class="line">-1</span><br></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><h3 id="说明-提示"><a href="#说明-提示" class="headerlink" title="说明&#x2F;提示"></a>说明&#x2F;提示</h3><p>两棵树分别为1-2-3;1-3-2</p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>该题需要将树转化为prufer编码：<br>$n$为树的节点数，$d_i$为各节点的度数，$m$为无限制度数的节点数。<br>则有度数的点出现次数为：$\begin{split}tot&#x3D;\sum_{i&#x3D;1}^n (d_i-1)\end{split}$，因为度数为$d_i$的点出现了$d_i-1$次<br>所以要求在$n-2$大小的数组中插入$tot$个序号，共有$\begin{split}C_{n-2}^{tot}\end{split}$种插法；<br>在$tot$个序号排列中，插第一个节点的方法有$\begin{split}C_{tot}^{d_1-1}\end{split}$种插法；<br>插第二个节点的方法有$\begin{split}C_{tot}^{d_2-1}\end{split}$种插法；<br>…………<br>另外还有$m$个节点无度数限制，所以它们可任意排列在剩余的$n-2-tot$的空间中，排列方法总数为$\begin{split}m^{n-2-tot}\end{split}$<br>根据乘法原理：</p>$\begin{split}ans&=C_{n-2}^{tot}\cdot C_{tot}^{d_1-1}\cdot C_{tot-(d_1-1)}^{d_2-1}\cdots C_{d_n-1}^{d_n-1}\cdot m^{n-2-tot}\\&=\frac{(n-2)!}{(n-2-tot)!\cdot tot!}\cdot \frac{tot!}{(d_1-1)!\cdot (tot-d_1+1)!}\cdots \frac{(d_n-1)!}{(d_n-1)!\cdot 0!}\cdot m^{n-2-tot}\\&=\frac{(n-2)!\cdot m^{n-2-tot}}{(n-2-tot)!\cdot (d_1-1)!\cdot (d_2-1)!\cdots(d_n-1)!}\end {split}$<p>然后就要高精度了……但高精度除法太麻烦了，显而易见的排列组合一定是整数，所以可以进行质因数分解，再做一下相加减。<br>关于 $n!$质因数分解有两种方法，第一种暴力分解，这里着重讲第二种。<br>若$p$为素数，则$n!$可分解为一个数$\cdot p^x$，其中$\begin{split} x&#x3D;\left\lfloor\frac np\right\rfloor+\left\lfloor\frac n{p^2}\right\rfloor+\cdots+\left\lfloor\frac n{p^t}\right\rfloor\end{split}$且$\begin{split}p^t\lt n\end{split}$<br>所以$\begin {split} n!&#x3D;p_1^{x_1}\cdot p_2^{x_2}\cdot p_3^{x_3}\cdots p_m^{x_m}\qquad(p_m\lt n)\end{split}$<br>代码详见<a href="../solution-code2425#Code">Code</a></p><h2 id="模板题"><a href="#模板题" class="headerlink" title="模板题"></a>模板题</h2><ul><li><a href="../solution-code2503/">[HNOI2004]树的计数</a></li><li><a href="../solution-code1826/">小猴打架</a></li></ul><h2 id="讲义下载"><a href="#讲义下载" class="headerlink" title="讲义下载"></a>讲义下载</h2><ul><li><a href="/upload/%E6%A0%91%E7%9A%84prufer%E7%BC%96%E7%A0%81.pdf">树的prufer编码.pdf</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树的prufer编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最小割树</title>
      <link href="/oi/post/Gomory-Hutree/"/>
      <url>/oi/post/Gomory-Hutree/</url>
      
        <content type="html"><![CDATA[<h2 id="注意！"><a href="#注意！" class="headerlink" title="注意！"></a>注意！</h2><ul><li>在边很多的时候用邻接矩阵，边很少时要用前向星</li><li>从2开始循环！</li></ul><span id="more"></span><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一个无向图$G&#x3D;(V,E)$，多次询问两点之间的最小割</p><h2 id="朴素做法"><a href="#朴素做法" class="headerlink" title="朴素做法"></a>朴素做法</h2><p>对于每次询问，我们做一次最大流，复杂度$O(Q\cdot maxflow-time)$，$Q$太大的时候显然无法承受。<br>这时我们可以先预处理出所有点对的最大流，然后根据每个询问输出答案。<br>朴素预处理的复杂度$O(n^2\cdot maxflow-time)$，$n$太大的时候我们挂掉了！</p><h2 id="提出问题"><a href="#提出问题" class="headerlink" title="提出问题"></a>提出问题</h2><p>那么我们如何快速预处理出所有点对的最大流呢？这就是这题所要考察的内容。按照惯例，我们考虑问题要从简单入手，然后推到一般化。注意图是无向的。<br>那图的简化是什么？没错，是<strong>树</strong>。<br>那么假设现在<strong>有一颗无向树</strong>，求所有点对的最大流用LCA+RMQ即可解决。（例如：2857–TT的身体）<br>那么对于图，我们理所当然想到要去构造一棵等价于原图的最大流树。</p><h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><p>Gomory-Hutree是一颗代表了所有源目节点对间的最小割的树。求解出Gomory-Hutree就可以了解两两节点对之间的最大流（最大流最小割定理）。<br>举例：一个有$6$个节点的无向图，节点间的权重皆为$1$，节点间的最小割如下图所示：</p><img src="/oi/post/Gomory-Hutree/1.png" class="" title="1.png"><p>步骤一：创建一棵星型树，节点$1$为中心节点，其他节点为叶子节点，如下图左侧所示。<br>步骤二：分别选编号为$2$至$6$的节点为源节点$S$，重复做步骤三和步骤四。<br>步骤三：在星型树中令与$S$节点相邻的节点为目的节点$T$，计算$S$与$T$之间的最大流，并由此得到最小割。将最大流标注在星型树中$S$节点与$T$节点间的链路上。<br>步骤四：对于每一个编号大于$S$的节点$i$，如果在原图中$S$与$i$是邻居，且$i$与$S$在同一割集中，则去除星型图中$i$与$T$的连接，增加$i$与$S$的连接，如下图中间所示。</p><img src="/oi/post/Gomory-Hutree/2.png" class="" title="2.png"><p>最后可得到如上图右侧所示的Gomory-Hutree。</p><h2 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h2><ol><li>首先任选一个点为根。设以结点$1$为根，标记$1$已经check，把所有的结点都连到根$1$。</li><li>按顺序枚举未check的节点$T$，比如以从小到大的顺序。</li></ol><ul><li>设$S$为此时结点$T$的父亲，在原图中求$S-T$的最大流</li><li>从结点$S$开始DFS；</li><li>把在$S-T$割中属于$T$侧的未check结点设为$T$结点的儿子；标记$T$为check。</li><li>重复直到所有的点都被check。注意$S-S$的最大流为$0$。</li></ul><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>由于$1$事先被我check了，所以我们最后只要check$|V|-1$次就可以了。<br>所以复杂度是$O((|V|-1)\cdot maxflow-time)$<br>预处理所以点对的最大流可以在更新树的同时一起更新，而无需最后再LCA+RMQ；</p><h2 id="模板题"><a href="#模板题" class="headerlink" title="模板题:"></a>模板题:</h2><ul><li><a href="../solution-code2864/">[ZJOI2011]最小割</a></li><li><a href="../solution-code4604/">[CQOI2016]不同的最小割</a></li></ul><h2 id="下载讲义"><a href="#下载讲义" class="headerlink" title="下载讲义"></a>下载讲义</h2><p><a href="/upload/%E6%9C%80%E5%B0%8F%E5%89%B2%E6%A0%91.pdf">最小割树.pdf</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 无向图任意点对最大流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[ZJOI2011]最小割</title>
      <link href="/oi/post/solution-code2864/"/>
      <url>/oi/post/solution-code2864/</url>
      
        <content type="html"><![CDATA[<p>无向图任意点对最大流的模板题，把所有元素放进num数组里排序+二分即可。</p><span id="more"></span><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>小白在图论课上学到了一个新的概念——最小割，下课后小白在笔记本上写下了如下这段话：“对于一个图，某个对图中结点的划分将图中所有结点分成两个部分，如果结点$s,t$不在同一个部分中，则称这个划分是关于$s,t$的割。对于带权图来说，将所有顶点处在不同部分的边的权值相加所得到的值定义为这个割的容量，而s,t的最小割指的是在关于$s,t$的割中容量最小的割”<br>现给定一张无向图，小白有若干个形如“图中有多少对点它们的最小割的容量不超过$x$呢”的疑问，小蓝虽然很想回答这些问题，但小蓝最近忙着挖木块，于是作为仍然是小蓝的好友，你又有任务了。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>输入文件第一行有且只有一个正整数$T$，表示测试数据的组数。<br>对于每组测试数据，第一行包含两个整数$n$,$m$，表示图的点数和边数。<br>下面$m$行，每行$3$个正整数$u$,$v$,$c$，表示有一条权为$c$的无向边$(u,v)$<br>接下来一行，包含一个整数$q$，表示询问的个数<br>下面$q$行，每行一个整数$x$，其含义同题目描述。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>对于每组测试数据，输出应包括$q$行，第$i$行表示第$i$个问题的答案。对于点对$(p,q)$和$(q,p)$，只统计一次（见样例）。<br>两组测试数据之间用空行隔开。</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">5 0</span><br><span class="line">1</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure><h3 id="说明-提示"><a href="#说明-提示" class="headerlink" title="说明&#x2F;提示"></a>说明&#x2F;提示</h3><p>对于$100\%$的数据，$1\le T\le 10$，$1\le n\le 150$，$0\le m\le 3000$，$0\le x\le 2^{31}-1$，$0\le q\le 30$。</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3FFFFFFF</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> to,next,v;</span><br><span class="line">&#125;e[<span class="number">6005</span>],mp[<span class="number">6005</span>];</span><br><span class="line"><span class="type">int</span> s,t,n,m,h[<span class="number">155</span>],f[<span class="number">155</span>][<span class="number">155</span>],d[<span class="number">155</span>],gap[<span class="number">155</span>],fa[<span class="number">155</span>],num[<span class="number">22505</span>],cnt=<span class="number">1</span>;</span><br><span class="line"><span class="type">bool</span> vis[<span class="number">155</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Addedge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">mp[++cnt]=(Node)&#123;y,h[x],v&#125;;h[x]=cnt;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> maxf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,y,ret=<span class="number">0</span>,delta;</span><br><span class="line"><span class="keyword">if</span>(x==t)<span class="keyword">return</span> maxf;</span><br><span class="line"><span class="keyword">for</span>(i=h[x];i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">y=e[i].to;</span><br><span class="line"><span class="keyword">if</span>(e[i].v&amp;&amp;d[x]==d[y]+<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">delta=<span class="built_in">dfs</span>(y,<span class="built_in">min</span>(maxf,e[i].v));</span><br><span class="line">e[i].v-=delta;</span><br><span class="line">e[i^<span class="number">1</span>].v+=delta;</span><br><span class="line">ret+=delta;</span><br><span class="line">maxf-=delta;</span><br><span class="line"><span class="keyword">if</span>(!maxf||d[x]==n)<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!(--gap[d[x]]))d[s]=n;</span><br><span class="line">++gap[++d[x]];</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,y;</span><br><span class="line">vis[x]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(i=h[x];i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">y=e[i].to;</span><br><span class="line"><span class="keyword">if</span>(e[i].v&amp;&amp;!vis[y])<span class="built_in">dfs</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Gusfield</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,j,ans;</span><br><span class="line"><span class="built_in">memset</span>(f,<span class="number">0x3F</span>,<span class="built_in">sizeof</span>(f));</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;++i)fa[i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memcpy</span>(e,mp,<span class="built_in">sizeof</span>(mp));</span><br><span class="line"><span class="built_in">memset</span>(gap,<span class="number">0</span>,<span class="built_in">sizeof</span>(gap));</span><br><span class="line"><span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="built_in">sizeof</span>(d));</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">s=fa[i];t=i;ans=<span class="number">0</span>;</span><br><span class="line">gap[<span class="number">0</span>]=n;</span><br><span class="line"><span class="keyword">while</span>(d[s]&lt;n)ans+=<span class="built_in">dfs</span>(s,inf);</span><br><span class="line"><span class="built_in">dfs</span>(s);</span><br><span class="line"><span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[j]&amp;&amp;fa[j]==fa[i])fa[j]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;i;++j)f[i][j]=f[j][i]=<span class="built_in">min</span>(f[fa[i]][j],ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,j,q,T,x,y,v;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(h,<span class="number">0</span>,<span class="built_in">sizeof</span>(h));cnt=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;v);</span><br><span class="line"><span class="built_in">Addedge</span>(x,y,v);</span><br><span class="line"><span class="built_in">Addedge</span>(y,x,v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Gusfield</span>();num[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line">&#123;</span><br><span class="line">num[++num[<span class="number">0</span>]]=f[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(num+<span class="number">1</span>,num+num[<span class="number">0</span>]+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;q);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=q;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">upper_bound</span>(num+<span class="number">1</span>,num+num[<span class="number">0</span>]+<span class="number">1</span>,x)-num<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 无向图任意点对最大流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[CQOI2016]不同的最小割</title>
      <link href="/oi/post/solution-code4604/"/>
      <url>/oi/post/solution-code4604/</url>
      
        <content type="html"><![CDATA[<p>无向图任意点对最大流的模板题，暴力把所有元素用 bitset 排重即可。</p><span id="more"></span><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>学过图论的同学都知道最小割的概念：对于一个图，某个对图中结点的划分将图中所有结点分成两个部分，如果结点 $s,t$ 不在同一个部分中，则称这个划分是关于 $s,t$ 的割。对于带权图来说，将所有顶点处在不同部分的边的权值相加所得到的值定义为这个割的容量，而 $s,t$ 的最小割指的是在关于 $s,t$ 的割中容量最小的割。<br>而对冲刺 NOI 竞赛的选手而言，求带权图中两点的最小割已经不是什么难事了。我们可以把视野放宽，考虑有 $N$ 个点的无向连通图中所有点对的最小割的容量，共能得到 $\dfrac{N(N-1)}2$ 个数值。这些数值中互不相同的有多少个呢？这似乎是个有趣的问题。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行包含两个数 $N,M$，表示点数和边数。<br>接下来$M$行，每行三个数 $u,v,w$，表示点 $u$ 和点 $v$ (从 $1$ 开始标号)之间有一条权值是 $w$ 的边。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>第一行为一个整数，表示不同的最小割容量的个数。</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4 4</span><br><span class="line">1 2 3</span><br><span class="line">1 3 6</span><br><span class="line">2 4 5</span><br><span class="line">3 4 4</span><br></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h3 id="说明-提示"><a href="#说明-提示" class="headerlink" title="说明&#x2F;提示"></a>说明&#x2F;提示</h3><p>$1\le N\le 850,1\le M\le 8500,1\le w\le 100000$。</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3FFFFFFF</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> to,next,v;</span><br><span class="line">&#125;e[<span class="number">17005</span>],mp[<span class="number">17005</span>];</span><br><span class="line"><span class="type">int</span> s,t,n,m,h[<span class="number">855</span>],f[<span class="number">855</span>][<span class="number">855</span>],d[<span class="number">855</span>],gap[<span class="number">855</span>],fa[<span class="number">855</span>],cnt=<span class="number">1</span>;</span><br><span class="line"><span class="type">bool</span> vis[<span class="number">855</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Addedge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">mp[++cnt]=(Node)&#123;y,h[x],v&#125;;h[x]=cnt;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> maxf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,y,ret=<span class="number">0</span>,delta;</span><br><span class="line"><span class="keyword">if</span>(x==t)<span class="keyword">return</span> maxf;</span><br><span class="line"><span class="keyword">for</span>(i=h[x];i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">y=e[i].to;</span><br><span class="line"><span class="keyword">if</span>(e[i].v&amp;&amp;d[x]==d[y]+<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">delta=<span class="built_in">dfs</span>(y,<span class="built_in">min</span>(maxf,e[i].v));</span><br><span class="line">e[i].v-=delta;</span><br><span class="line">e[i^<span class="number">1</span>].v+=delta;</span><br><span class="line">ret+=delta;</span><br><span class="line">maxf-=delta;</span><br><span class="line"><span class="keyword">if</span>(!maxf||d[x]==n)<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!(--gap[d[x]]))d[s]=n;</span><br><span class="line">++gap[++d[x]];</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,y;</span><br><span class="line">vis[x]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(i=h[x];i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">y=e[i].to;</span><br><span class="line"><span class="keyword">if</span>(e[i].v&amp;&amp;!vis[y])<span class="built_in">dfs</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Gusfield</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,j,ans;</span><br><span class="line"><span class="built_in">memset</span>(f,<span class="number">0x3F</span>,<span class="built_in">sizeof</span>(f));</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;++i)fa[i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memcpy</span>(e,mp,<span class="built_in">sizeof</span>(mp));</span><br><span class="line"><span class="built_in">memset</span>(gap,<span class="number">0</span>,<span class="built_in">sizeof</span>(gap));</span><br><span class="line"><span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="built_in">sizeof</span>(d));</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">s=fa[i];t=i;ans=<span class="number">0</span>;</span><br><span class="line">gap[<span class="number">0</span>]=n;</span><br><span class="line"><span class="keyword">while</span>(d[s]&lt;n)ans+=<span class="built_in">dfs</span>(s,inf);</span><br><span class="line"><span class="built_in">dfs</span>(s);</span><br><span class="line"><span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[j]&amp;&amp;fa[j]==fa[i])fa[j]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;i;++j)f[i][j]=f[j][i]=<span class="built_in">min</span>(f[fa[i]][j],ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">bitset&lt;23333333&gt;H;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,j,x,y,v,ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;v);</span><br><span class="line"><span class="built_in">Addedge</span>(x,y,v);</span><br><span class="line"><span class="built_in">Addedge</span>(y,x,v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Gusfield</span>();</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i==j)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(!H[f[i][j]])&#123;++ans;H[f[i][j]]=<span class="literal">true</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 无向图任意点对最大流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>welcome</title>
      <link href="/oi/post/welcome/"/>
      <url>/oi/post/welcome/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>403</title>
      <link href="/oi/403.html"/>
      <url>/oi/403.html</url>
      
        <content type="html"><![CDATA[<h2 id="想偷窥我的秘密吗？"><a href="#想偷窥我的秘密吗？" class="headerlink" title="想偷窥我的秘密吗？"></a>想偷窥我的秘密吗？</h2>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>404</title>
      <link href="/oi/404.html"/>
      <url>/oi/404.html</url>
      
        <content type="html"><![CDATA[<h2 id="你是怎么进来的？"><a href="#你是怎么进来的？" class="headerlink" title="你是怎么进来的？"></a>你是怎么进来的？</h2>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/oi/categories/index.html"/>
      <url>/oi/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>friends</title>
      <link href="/oi/friends/index.html"/>
      <url>/oi/friends/index.html</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://oi.men.ci/">menci</a></li><li><a href="http://hzwer.com/">hzwer</a></li><li><a href="https://blog.bill.moe/">yangming</a></li></ul>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/oi/api/status.html"/>
      <url>/oi/api/status.html</url>
      
        <content type="html"><![CDATA[<p>OK</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/oi/tags/index.html"/>
      <url>/oi/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
