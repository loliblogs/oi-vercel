<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>loli&#39;s oi blog</title>
  
  
  <link href="https://blog.lolifamily.js.org/oi/atom.xml" rel="self"/>
  
  <link href="https://blog.lolifamily.js.org/oi/"/>
  <updated>2021-02-08T11:52:19.612Z</updated>
  <id>https://blog.lolifamily.js.org/oi/</id>
  
  <author>
    <name>lolifamily</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>solution-code2869</title>
    <link href="https://blog.lolifamily.js.org/oi/post/solution-code2869/"/>
    <id>https://blog.lolifamily.js.org/oi/post/solution-code2869/</id>
    <published>2018-08-20T09:41:26.000Z</published>
    <updated>2021-02-08T11:52:19.612Z</updated>
    
    <content type="html"><![CDATA[<p>有顺序的树链剖分模板题，注意Node中ans初始值为0（否则相当于空序列中有一种颜色）并且Lval和Rval的值不能存在于序列之中</p><span id="more"></span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Ls (v&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Rs ((v&lt;&lt;1)|1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fpos fpos233</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> Lval,Rval,ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="title">Node</span><span class="params">()</span>:Lval(<span class="number">0</span>),Rval(<span class="number">0</span>),ans(<span class="number">0</span>)&#123;</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="title">Node</span><span class="params">(<span class="type">int</span> val)</span>:Lval(val),Rval(val),ans(<span class="number">1</span>)&#123;</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Tree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> L,R,lazy;</span><br><span class="line">Node Lval,Rval;</span><br><span class="line">&#125;T[<span class="number">400005</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> to,next;</span><br><span class="line">&#125;e[<span class="number">200005</span>];</span><br><span class="line"><span class="type">int</span> a[<span class="number">100005</span>],d[<span class="number">100005</span>],h[<span class="number">100005</span>],pre[<span class="number">100005</span>],siz[<span class="number">100005</span>],vson[<span class="number">100005</span>],top[<span class="number">100005</span>],pos[<span class="number">100005</span>],fpos[<span class="number">100005</span>],cnt,sign;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Addedge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[++cnt]=(Edge)&#123;y,h[x]&#125;;h[x]=cnt;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> dep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,y;</span><br><span class="line">d[x]=dep;siz[x]=<span class="number">1</span>;</span><br><span class="line">vson[x]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=h[x];i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">y=e[i].to;</span><br><span class="line"><span class="keyword">if</span>(y==pre[x])<span class="keyword">continue</span>;</span><br><span class="line">pre[y]=x;</span><br><span class="line"><span class="built_in">dfs1</span>(y,dep+<span class="number">1</span>);</span><br><span class="line">siz[x]+=siz[y];</span><br><span class="line"><span class="keyword">if</span>(vson[x]==<span class="number">-1</span>||siz[vson[x]]&lt;siz[y])vson[x]=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> sp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,y;</span><br><span class="line">pos[x]=++sign;top[x]=sp;</span><br><span class="line">fpos[sign]=x;</span><br><span class="line"><span class="keyword">if</span>(vson[x]!=<span class="number">-1</span>)<span class="built_in">dfs2</span>(vson[x],sp);</span><br><span class="line"><span class="keyword">for</span>(i=h[x];i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">y=e[i].to;</span><br><span class="line"><span class="keyword">if</span>(y==pre[x]||y==vson[x])<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs2</span>(y,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Node <span class="keyword">operator</span>+(<span class="type">const</span> Node&amp; a,<span class="type">const</span> Node&amp; b)</span><br><span class="line">&#123;</span><br><span class="line">Node ans;</span><br><span class="line">ans.Lval=a.Lval;</span><br><span class="line">ans.Rval=b.Rval;</span><br><span class="line">ans.ans=a.ans+b.ans-(a.Rval==b.Lval);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T[v].Lval=T[Ls].Lval+T[Rs].Lval;</span><br><span class="line">T[v].Rval=T[Rs].Rval+T[Ls].Rval;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!T[v].lazy)<span class="keyword">return</span>;</span><br><span class="line">T[Ls].Lval=T[Ls].Rval=T[Rs].Lval=T[Rs].Rval=<span class="built_in">Node</span>(T[v].lazy);</span><br><span class="line">T[Ls].lazy=T[Rs].lazy=T[v].lazy;</span><br><span class="line">T[v].lazy=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Build</span><span class="params">(<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T[v].L=L;T[v].R=R;</span><br><span class="line"><span class="keyword">if</span>(L==R)</span><br><span class="line">&#123;</span><br><span class="line">T[v].Lval=T[v].Rval=<span class="built_in">Node</span>(a[fpos[L]]);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=(L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">Build</span>(L,mid,Ls);</span><br><span class="line"><span class="built_in">Build</span>(mid+<span class="number">1</span>,R,Rs);</span><br><span class="line"><span class="built_in">pushup</span>(v);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Modify</span><span class="params">(<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> val,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L&gt;T[v].R||R&lt;T[v].L)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=T[v].L&amp;&amp;R&gt;=T[v].R)</span><br><span class="line">&#123;</span><br><span class="line">T[v].Lval=T[v].Rval=<span class="built_in">Node</span>(val);</span><br><span class="line">T[v].lazy=val;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(v);</span><br><span class="line"><span class="built_in">Modify</span>(L,R,val,Ls);</span><br><span class="line"><span class="built_in">Modify</span>(L,R,val,Rs);</span><br><span class="line"><span class="built_in">pushup</span>(v);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Node <span class="title">QueryL</span><span class="params">(<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L==T[v].L&amp;&amp;R==T[v].R)<span class="keyword">return</span> T[v].Lval;</span><br><span class="line"><span class="type">int</span> mid=(T[v].L+T[v].R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">pushdown</span>(v);</span><br><span class="line"><span class="keyword">if</span>(R&lt;=mid)<span class="keyword">return</span> <span class="built_in">QueryL</span>(L,R,Ls);</span><br><span class="line"><span class="keyword">if</span>(L&gt;mid)<span class="keyword">return</span> <span class="built_in">QueryL</span>(L,R,Rs);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">QueryL</span>(L,mid,Ls)+<span class="built_in">QueryL</span>(mid+<span class="number">1</span>,R,Rs);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Node <span class="title">QueryR</span><span class="params">(<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L==T[v].L&amp;&amp;R==T[v].R)<span class="keyword">return</span> T[v].Rval;</span><br><span class="line"><span class="type">int</span> mid=(T[v].L+T[v].R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">pushdown</span>(v);</span><br><span class="line"><span class="keyword">if</span>(R&lt;=mid)<span class="keyword">return</span> <span class="built_in">QueryR</span>(L,R,Ls);</span><br><span class="line"><span class="keyword">if</span>(L&gt;mid)<span class="keyword">return</span> <span class="built_in">QueryR</span>(L,R,Rs);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">QueryR</span>(mid+<span class="number">1</span>,R,Rs)+<span class="built_in">QueryR</span>(L,mid,Ls);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Modify</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(d[top[x]]&lt;d[top[y]])<span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="built_in">Modify</span>(pos[top[x]],pos[x],val,<span class="number">1</span>);</span><br><span class="line">x=pre[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(d[x]&gt;d[y])<span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="built_in">Modify</span>(pos[x],pos[y],val,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Node <span class="title">Query</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node ansL,ansR;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(d[top[x]]&gt;=d[top[y]])</span><br><span class="line">&#123;</span><br><span class="line">ansL=ansL+<span class="built_in">QueryR</span>(pos[top[x]],pos[x],<span class="number">1</span>);</span><br><span class="line">x=pre[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ansR=<span class="built_in">QueryL</span>(pos[top[y]],pos[y],<span class="number">1</span>)+ansR;</span><br><span class="line">y=pre[top[y]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(d[x]&gt;d[y])<span class="keyword">return</span> ansL+<span class="built_in">QueryR</span>(pos[y],pos[x],<span class="number">1</span>)+ansR;</span><br><span class="line"><span class="keyword">return</span> ansL+<span class="built_in">QueryL</span>(pos[x],pos[y],<span class="number">1</span>)+ansR;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> siz=<span class="number">40</span>&lt;&lt;<span class="number">20</span>;<span class="comment">//40M</span></span><br><span class="line"><span class="comment">//__asm__ (&quot;movl %0,%%esp\n&quot;::&quot;r&quot;((char*)malloc(siz)+siz));//调试用这个</span></span><br><span class="line">__asm__ (<span class="string">&quot;movq %0,%%rsp\n&quot;</span>::<span class="string">&quot;r&quot;</span>((<span class="type">char</span>*)<span class="built_in">malloc</span>(siz)+siz));<span class="comment">//提交用这个</span></span><br><span class="line"><span class="type">int</span> i,n,m,x,y,v,ch;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line"><span class="built_in">Addedge</span>(x,y);</span><br><span class="line"><span class="built_in">Addedge</span>(y,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">Build</span>(<span class="number">1</span>,sign,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(ch=<span class="built_in">getchar</span>())<span class="keyword">if</span>(ch==<span class="string">&#x27;C&#x27;</span>||ch==<span class="string">&#x27;Q&#x27;</span>)<span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line"><span class="keyword">if</span>(ch==<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;v);<span class="built_in">Modify</span>(x,y,v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">Query</span>(x,y).ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;有顺序的树链剖分模板题，注意Node中ans初始值为0（否则相当于空序列中有一种颜色）并且Lval和Rval的值不能存在于序列之中&lt;/p&gt;</summary>
    
    
    
    <category term="题解" scheme="https://blog.lolifamily.js.org/oi/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="线段树" scheme="https://blog.lolifamily.js.org/oi/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    <category term="树链剖分" scheme="https://blog.lolifamily.js.org/oi/tags/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>useful-codes</title>
    <link href="https://blog.lolifamily.js.org/oi/post/useful-codes/"/>
    <id>https://blog.lolifamily.js.org/oi/post/useful-codes/</id>
    <published>2018-08-20T04:35:17.000Z</published>
    <updated>2021-12-11T07:12:16.130Z</updated>
    
    <content type="html"><![CDATA[<h2 id="手工栈"><a href="#手工栈" class="headerlink" title="手工栈"></a>手工栈</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> siz=<span class="number">40</span>&lt;&lt;<span class="number">20</span>;<span class="comment">//40M</span></span><br><span class="line">__asm__(<span class="string">&quot;movl %0,%%esp\n&quot;</span>::<span class="string">&quot;r&quot;</span>((<span class="type">char</span>*)<span class="built_in">malloc</span>(siz)+siz));<span class="comment">//windows用这个</span></span><br><span class="line">__asm__(<span class="string">&quot;movq %0,%%rsp\n&quot;</span>::<span class="string">&quot;r&quot;</span>((<span class="type">char</span>*)<span class="built_in">malloc</span>(siz)+siz));<span class="comment">//linux用这个</span></span><br></pre></td></tr></table></figure><p>记住要 <code>exit(0)</code></p><span id="more"></span><h2 id="fread"><a href="#fread" class="headerlink" title="fread"></a>fread</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="fwrite"><a href="#fwrite" class="headerlink" title="fwrite"></a>fwrite</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;手工栈&quot;&gt;&lt;a href=&quot;#手工栈&quot; class=&quot;headerlink&quot; title=&quot;手工栈&quot;&gt;&lt;/a&gt;手工栈&lt;/h2&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; siz=&lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//40M&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;__asm__(&lt;span class=&quot;string&quot;&gt;&amp;quot;movl %0,%%esp&#92;n&amp;quot;&lt;/span&gt;::&lt;span class=&quot;string&quot;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;((&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt;*)&lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt;(siz)+siz));&lt;span class=&quot;comment&quot;&gt;//windows用这个&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;__asm__(&lt;span class=&quot;string&quot;&gt;&amp;quot;movq %0,%%rsp&#92;n&amp;quot;&lt;/span&gt;::&lt;span class=&quot;string&quot;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;((&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt;*)&lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt;(siz)+siz));&lt;span class=&quot;comment&quot;&gt;//linux用这个&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;记住要 &lt;code&gt;exit(0)&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>独木桥</title>
    <link href="https://blog.lolifamily.js.org/oi/post/solution-code2260/"/>
    <id>https://blog.lolifamily.js.org/oi/post/solution-code2260/</id>
    <published>2018-08-14T15:02:44.000Z</published>
    <updated>2021-02-08T11:52:19.588Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>你在桥上看风景，看风景的人在轰炸机上看着你。</p></blockquote><p>一句话：两个人相遇后可以看做互换身份然后走和没相遇直接穿过去是一样的</p><span id="more"></span><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h3><p>战争已经进入到紧要时间。你是运输小队长，正在率领运输部队向前线运送物资。运输任务像做题一样的无聊。你希望找些刺激，于是命令你的士兵们到前方的一座独木桥上欣赏风景，而你留在桥下欣赏士兵们。士兵们十分愤怒，因为这座独木桥十分狭窄，只能容纳$1$个人通过。假如有$2$个人相向而行在桥上相遇，那么他们$2$个人将无妨绕过对方，只能有$1$个人回头下桥，让另一个人先通过。但是，可以有多个人同时呆在同一个位置。</p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>突然，你收到从指挥部发来的信息，敌军的轰炸机正朝着你所在的独木桥飞来！为了安全，你的部队必须撤下独木桥。独木桥的长度为$L$，士兵们只能呆在坐标为整数的地方。所有士兵的速度都为$1$，但一个士兵某一时刻来到了坐标为$0$或$L+1$的位置，他就离开了独木桥。<br>每个士兵都有一个初始面对的方向，他们会以匀速朝着这个方向行走，中途不会自己改变方向。但是，如果两个士兵面对面相遇，他们无法彼此通过对方，于是就分别转身，继续行走。转身不需要任何的时间。<br>由于先前的愤怒，你已不能控制你的士兵。甚至，你连每个士兵初始面对的方向都不知道。因此，你想要知道你的部队最少需要多少时间就可能全部撤离独木桥。另外，总部也在安排阻拦敌人的进攻，因此你还需要知道你的部队最多需要多少时间才能全部撤离独木桥。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行：一个整数$L$，表示独木桥的长度。桥上的坐标为$1\cdots L$<br>第二行：一个整数$N$，表示初始时留在桥上的士兵数目<br>第三行：有$N$个整数，分别表示每个士兵的初始坐标。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>只有一行，输出$2$个整数，分别表示部队撤离独木桥的最小时间和最大时间。$2$个整数由一个空格符分开。</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">2</span><br><span class="line">1 3</span><br></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 4</span><br></pre></td></tr></table></figure><h3 id="说明-提示"><a href="#说明-提示" class="headerlink" title="说明&#x2F;提示"></a>说明&#x2F;提示</h3><p>初始时，没有两个士兵同在一个坐标。<br>数据范围$N\le L\le 5000$。</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,n,m,x,ans1=<span class="number">0</span>,ans2=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;m,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">ans1=<span class="built_in">max</span>(ans1,<span class="built_in">min</span>(x,m-x+<span class="number">1</span>));</span><br><span class="line">ans2=<span class="built_in">max</span>(ans2,<span class="built_in">max</span>(x,m-x+<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,ans1,ans2);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;&lt;p&gt;你在桥上看风景，看风景的人在轰炸机上看着你。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一句话：两个人相遇后可以看做互换身份然后走和没相遇直接穿过去是一样的&lt;/p&gt;</summary>
    
    
    
    <category term="题解" scheme="https://blog.lolifamily.js.org/oi/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="杂题" scheme="https://blog.lolifamily.js.org/oi/tags/%E6%9D%82%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>[FJOI2007] 轮状病毒</title>
    <link href="https://blog.lolifamily.js.org/oi/post/solution-code2422/"/>
    <id>https://blog.lolifamily.js.org/oi/post/solution-code2422/</id>
    <published>2018-08-12T14:52:06.000Z</published>
    <updated>2022-03-10T13:23:51.178Z</updated>
    
    <content type="html"><![CDATA[<p>由于内容过长、公式较多，暂时将内容隐藏，请公式恐惧症们做好心理准备。</p><span id="more"></span><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>轮状病毒有很多变种，所有轮状病毒的变种都是从一个轮状基产生的。一个 $N$ 轮状基由圆环上 $N$ 个不同的基原子<br>和圆心处一个核原子构成的，$2$ 个原子之间的边表示这 $2$ 个原子之间的信息通道。如下图所示</p><img src="/oi/post/solution-code2422/1.png" class="" title="1.png"><p>$N$ 轮状病毒的产生规律是在一个 $N$ 轮状基中删去若干条边，使得各原子之间有唯一的信息通道，例如共有 $16$ 个不<br>同的 $3$ 轮状病毒，如下图所示：</p><img src="/oi/post/solution-code2422/2.png" class="" title="2.png"><p>现给定 $N (N\le 100)$，编程计算有多少个不同的 $N$ 轮状病毒</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>第一行有 $1$ 个正整数 $N$</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>计算出的不同的 $N$ 轮状病毒数输出</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">16</span><br></pre></td></tr></table></figure><h2 id="法一-行列式"><a href="#法一-行列式" class="headerlink" title="法一: 行列式"></a>法一: 行列式</h2><p>转载自 <a href="http://vfleaking.blog.163.com/blog/static/17480763420119685112649/">vfleaking</a>，<a href="/oi/post/solution-code2422/bakup.png" title="题解备份">题解备份</a><br>对于新手还是建议去看看基尔霍夫矩阵，这一篇 <a href="https://wenku.baidu.com/view/0c086741be1e650e52ea990e.html">论文</a> 挺不错的<br>用基尔霍夫矩阵使用高斯消元解行列式，时间复杂度 $O(n^3)$ 似乎可以 AC。<br>首先行列式有很多性质，第 $a$ 行 $\times k$ 加到第 $b$ 行上去，行列式的值不变。<br>三角行列式的值等于对角线元素之积。<br>第 $a$ 行与第 $b$ 行互换，行列式的值取反。<br>常数 $\times$ 行列式，可以把常数乘到某一行里去。<br>如果你行列式不是很熟，建议先搜搜行列式～不然下面会看晕～</p><p>其实如果你仔细观察矩阵，可以发现它是这样的：（消去了病毒中央）</p>$\begin{vmatrix}3&-1&0&0&\cdots&0&0&0&-1\\-1&3&-1&0&\cdots&0&0&0&0\\0&-1&3&-1&\cdots&0&0&0&0\\0&0&-1&3&\cdots&0&0&0&0\\0&0&0&-1&\cdots&0&0&0&0\\\vdots&\vdots&\vdots&\vdots&\ddots&\vdots&\vdots&\vdots&\vdots\\0&0&0&0&\cdots&3&-1&0&0\\0&0&0&0&\cdots&-1&3&-1&0\\0&0&0&0&\cdots&0&-1&3&-1\\-1&0&0&0&\cdots&0&0 &-1&3\end{vmatrix}$<p>那么我们现在对行列式进行变换，我们把第 $1$ 行与第 $2$ 行交换，再把第 $2$ 行与第 $3$ 行交换……，再把第 $n-1$ 行与第 $n$ 行变换，得到新的行列式：</p>$\begin{vmatrix}-1&3&-1&0&\cdots&0&0&0&0\\0&-1&3&-1&\cdots&0&0&0&0\\0&0&-1&3&\cdots&0&0&0&0\\0&0&0&-1&\cdots&0&0&0&0\\\vdots&\vdots&\vdots&\vdots&\ddots&\vdots&\vdots&\vdots&\vdots\\0&0&0&0&\cdots&3&-1&0&0\\0&0&0&0&\cdots&-1&3&-1&0\\0&0&0&0&\cdots&0&-1&3&-1\\-1&0&0&0&\cdots&0&0 &-1&3\\3&-1&0&0&\cdots&0&0&0&-1\end{vmatrix}$<p>这个行列式跟一开始的那个行列式的值不一定相等。<br>因为我们是通过 $n-1$ 次交换行的操作得到的，<br>为了说话方便我们称一开始的行列式为 $A$，上面刚写的行列式为 $B$<br>那么由行列式性质得：$A&#x3D;(-1)^{n-1}\cdot B$<br>现在就可以正大光明地处理 $B$ 了～</p><p>利用行列式性质，来手算这个行列式。之所以刚才有那么一步，就是为了方便手算。<br>因为观察 $B$ 矩阵，发现就只剩下左下角的 $-1$、$3$、$-1$ 三个倒霉了。</p>$\begin{matrix}\text{倒数第二行：}&-1&0&0&0&\cdots&0&0 &-1&3\\\text{用第一行的：}&-1&3&-1&0&\cdots&0&0&0&0\\\text{乘以}-1\text{ 来消：}&0&-3&1&0&\cdots&0&0 &-1&3\\\text{再用第二行：}&0&-1&3&-1&\cdots&0&0&0&0\\\text{乘以}-3\text{ 来消：}&0&0&-8&3&\cdots&0&0 &-1&3\end{matrix}$<p>这样就有了初步感觉了～</p><p>现在把这个过程一般化：</p>$\begin{matrix}\text{第 }k\text{ 个和第 }k+1\text{ 个：}&0&0&\cdots&F(k)&G(k)&0&0&\cdots&-1&3\\\text{总能找到上面的某一行}&0&0&\cdots&-1\quad&3~~~&-1&0&\cdots&0&0\\\text{乘以 }F(k)\text{ 来消：}&0&0&\cdots&0&F(k+1)&G(k+1)&0&\cdots&-1&3\\\end{matrix}$<p>于是得到：</p>$\begin{cases}F(k+1)=G(k)+3F(k)\\G(k+1)=-F(k)\end{cases}$<p>整合一下：$F(k+1)&#x3D;3F(k)-F(k-1)$<br>从初始的行和消了一次之后的行中取得边界条件：$F(1)&#x3D;-1,F(2)&#x3D;-3$<br>最终一定会变为下面这种情况：</p>$\begin{matrix}\text{倒数第二行：}&0&0&0&0&\cdots&F(n-3)&G(n-3)&-1&3\\\text{用倒数第四行：}&0&0&0&0&\cdots&-1&3&-1&0\\\text{乘以 }F(n - 3)\text{ 来消：}&0&0&0&0&\cdots&0&F(n-2)&G(n-2)-1&3\\\text{用倒数第三行：}&0&0&0&0&\cdots&0&-1&3&-1\\\text{乘以 }F(n - 2)\text{ 来消：}&0&0&0&0&\cdots&0&0&F(n-1)-1&G(n-1)+3\end{matrix}$<p>好现在搞定了倒数第二行，来看看成果：$(f&#x3D;F(n-1)-1,g&#x3D;G(n-1)+3)$</p>$\begin{vmatrix}-1&3&-1&0&\cdots&0&0&0&0\\0&-1&3&-1&\cdots&0&0&0&0\\0&0&-1&3&\cdots&0&0&0&0\\0&0&0&-1&\cdots&0&0&0&0\\\vdots&\vdots&\vdots&\vdots&\ddots&\vdots&\vdots&\vdots&\vdots\\0&0&0&0&\cdots&3&-1&0&0\\0&0&0&0&\cdots&-1&3&-1&0\\0&0&0&0&\cdots&0&-1&3&-1\\0&0&0&0&\cdots&0&0 &f&g\\3&-1&0&0&\cdots&0&0&0&-1\end{vmatrix}$<p>好，现在来搞倒数第一行。<br>和倒数第二行的方法是类似的。<br>再设函数 $H(k)$ 和 $I(k)$，意义与 $F(k)$、$G(k)$ 类似,得：</p>$\begin{cases}H(k+1)=I(k)+3H(k)\\I(k+1)=-H(k)\end{cases}$<p>其实跟 $F$、$G$的递推式是一样的我会乱说？$H(k+1)&#x3D;3H(k)-H(k-1)$<br>边界条件是：$H(1)&#x3D;3,H(2)&#x3D;8$<br>最后使劲搞一搞，倒数第一行就成了：</p>$\begin{matrix}0&0&0&0&0&\cdots&0&0&H(n - 1)&I(n - 1)-1\end{matrix}$<p>再来看成果：$(h&#x3D;H(n-1),i&#x3D;I(n-1)-1)$</p>$\begin{vmatrix}-1&3&-1&0&\cdots&0&0&0&0\\0&-1&3&-1&\cdots&0&0&0&0\\0&0&-1&3&\cdots&0&0&0&0\\0&0&0&-1&\cdots&0&0&0&0\\\vdots&\vdots&\vdots&\vdots&\ddots&\vdots&\vdots&\vdots&\vdots\\0&0&0&0&\cdots&3&-1&0&0\\0&0&0&0&\cdots&-1&3&-1&0\\0&0&0&0&\cdots&0&-1&3&-1\\0&0&0&0&\cdots&0&0 &f&g\\0&0&0&0&\cdots&0&0&h&i\end{vmatrix}$<p>用倒数第二行来消倒数第一行，得：</p>$\begin{matrix}0&0&0&0&\cdots&0&0&0&i-g\cdot \frac hf )\end{matrix}$<p>现在这个行列式已经是三角行列式了，它的值就是对角线元素之积。<br>于是：$B &#x3D;(-1)\times (-1)\times (-1)\times \cdots\times f(i-g\cdot \frac hf )$<br>一共有 $n-2$ 个 $-1$<br>如前文所述：$A&#x3D;(-1)^{n-1}B$<br>又因为：$B&#x3D;(-1)^{n-2}(f\cdot i-g\cdot h)$<br>于是有：$A&#x3D;(-1)^{2n-3}(f\cdot i-g\cdot h)&#x3D;-f\cdot i+g\cdot h$</p><p>带入 $f$、$g$、$h$、$i$ 的值得：<br>$A&#x3D;-(F(n-1)-1)(I(n-1)-1)+(G(n-1)+3)H(n-1)$<br>带入 $H$、$I$ 的值：<br>$A&#x3D;-(F(n-1)-1)(-H(n-2)-1)+(-F(n-2)+3)H(n-1)$<br>然后再展开……回忆下 $F$、$H$ 的递推式</p>$\begin{align*}A&=F(n-1)H(n-2)+F(n-1)-H(n-2)-1-F(n-2)H(n-1)+3H(n-1)\\&=H(n)+F(n-1)+F(n-1)H(n-2)-F(n-2)H(n-1)-1\\&=H(n)+F(n-1)+\begin{vmatrix}F(n-1) &H(n-1)\\F(n-2) &H(n-2)\end{vmatrix}-1\end{align*}$<p>发现不能化简了？<br>没关系！在行列式上动动手脚吧！</p><h3 id="FH-定理"><a href="#FH-定理" class="headerlink" title="FH 定理"></a>FH 定理</h3><p>对于任意大于 $2$ 的 $k$ 有：</p>$\begin{vmatrix}F(k-1) &H(k-1)\\F(k-2) &H(k-2)\end{vmatrix}=\begin{vmatrix}F(2) &H(2)\\F(1) &H(1)\end{vmatrix}$<p><strong>证明</strong>：<br>对于行列式：$\begin{vmatrix}F(k-1) &H(k-1)\\F(k-2) &H(k - 2)\end{vmatrix}$<br>把行列式最下面的行取反，则行列式的值取反：$-\begin{vmatrix}F(k-1) &H(k-1)\\-F(k-2) &-H(k-2)\end{vmatrix}$<br>把行列式的上面的行乘以 $3$ 加到下面去：$-\begin{vmatrix}F(k-1) &H(k-1)\\3F(k-1)-F(k-2) &3H(k-1)-H(k-2)\end{vmatrix}$<br>特意构造的递推式出现了：$-\begin{vmatrix}F(k-1) &H(k-1)\\F(k) &H(k)\end{vmatrix}$<br>有点眉目了~ 把第一行与第二行调换位置，行列式的值取反：$\begin{vmatrix}F(k) &H(k)\\F(k-1) &H(k-1)\end{vmatrix}$<br>一目了然，这是 <code>k++</code> 后的行列式的样子。（ <strong>pascal同学早日转C++</strong> ）<br>那么立即推出：$\begin{vmatrix}F(k-1) &H(k-1)\\F(k-2) &H(k-2)\end{vmatrix}=\begin{vmatrix}F(2) &H(2)\\F(1) &H(1)\end{vmatrix}$<br>FH 定理得证。</p><p>利用 FH 定理，把 $F(1)&#x3D;-1,F(2)&#x3D;-3,H(1)&#x3D;3,H(2)&#x3D;8$带入：$\begin{vmatrix}F(n-1) &H(n-1)\\F(n-2) &H(n-2)\end{vmatrix}=-1$</p><p>于是就爽了嘛！</p>$\begin{align*}\therefore A&=H(n)+F(n-1)+(-1)-1\\&=H(n)+F(n-1)-2\end{align*}$<p>进一步我们发现……<br>设 $R(n)&#x3D;H(n)+F(n-1)-2$<br>那么立即有：</p>$\begin{align*}R(n)&=3H(n-1)-H(n-2)+3F(n-2)-F(n-3)-2\\&= 3(R(n-1)+2)-(R(n-2)+2)-2\\&= 3R(n-1)-R(n-2)+2\end{align*}$<p>所以，轮状病毒的方案数满足递推式 $F(n)&#x3D;3F(n-1)-F(n-2)+2$ ，其中 $F(1)&#x3D;1,F(2)&#x3D;5$<br>然后随手写一个高精度就可以过了～</p><h2 id="法二：DP"><a href="#法二：DP" class="headerlink" title="法二：DP"></a>法二：DP</h2><p>转载自 <a href="https://www.luogu.org/blog/boshi/solution-p2144">boshi</a><br>如果用 $f[x]$ 表示加入了 $x$ 个周围的点后的方案数，我们首先想到的递推式是：$f[i]&#x3D;\sum_{j&#x3D;1}^i f[i-j]\cdot j$<br>解释：最后加入的 $j$ 个点每个都可能与中心点连边，将所有方案数累加即可。<br>但是，第一个点永远不会与第 $n$ 个点连边，因此方案数统计并不准确。<br>我们再设：$g[i]&#x3D;\sum_{j&#x3D;2}^i f[i-j]\cdot j\cdot (j-1)$<br>解释：如果有 $j$ 个周围的点连成一条，且跨越了 $1$ 和 $n$，我们将所有这样的情况累加到答案中去。如果这样的点有 $j$ 个，剩下的点肯定不与这 $j$ 个点相连，所以连边方案数就是 $f[i-j]$，这 $j$ 个点有 $(j-1)$ 种选法(跨越 $1$ 和 $n$ )，与中心点连边的方案数是 $j$ ，根据乘法原理，答案要累加 $f[i-j]\cdot j\cdot (j-1)$ 。<br>这样的 <code>f[n]+g[n]</code> 就是我们要求的轮状病毒的数量。</p><p>下面我们思考如何快速求出 $f$ 和 $g$。</p><h3 id="多阶差分"><a href="#多阶差分" class="headerlink" title="多阶差分"></a>多阶差分</h3><p>首先分析 $f[i]$。如果我们可以求出所有 $f[i-j]\cdot j$ 的前缀和，这个问题就变得非常方便了。问题是对于不同的 $i$，这个前缀和中每一项都会发生变化。<br>那如果我们知道了变化的量是多少呢？于是我们就对前缀和进行差分。</p>$\begin{align*}\Delta f[i]&=\sum_{j=1}^i f[i-j]\cdot j - \sum_{j=1}^{i-1} f[i-1-j]\cdot j\\&=\sum_{j=0}^i f[i-j]\cdot j - \sum_{j=0}^{i-1} f[i-1-j]\cdot j\qquad (f[i]\cdot 0=f[i-1]\cdot 0=0)\\&=\sum_{j=0}^i f[j]\cdot (i-j) - \sum_{j=0}^{i-1} f[j]\cdot (i-1-j)\qquad (\text{交换枚举顺序})\\&=\sum_{j=0}^i f[i]\\g[i]&=\sum_{j=2}^i f[i-j]\cdot j \cdot (j-1)\\&=\sum_{j=0}^i f[i-j]\cdot j \cdot (j-1)\qquad(f[i-1]\cdot 1\cdot 0=0)\\\Delta g[i]&=\sum_{j=0}^i f[i-j]\cdot j \cdot (j-1)-\sum_{j=0}^{i-1} f[i-j-1]\cdot (j-1) \cdot (j-2)\\&=\sum_{j=0}^i f[j]\cdot (i-j)\cdot (i-j+1)-\sum_{j=0}^{i-1} f[j]\cdot (i-j)\cdot (i-j-1)\\&=\sum_{j=0}^i f[j]\cdot (i-j)\cdot 2\qquad(i-i=0)\\\Delta^2 g[i]&= \sum_{j=0}^i f[j]\cdot (i-j)\cdot 2-\sum_{j=0}^{i-1} f[j]\cdot (i-j-1)\cdot 2\\&=\sum_{j=0}^i 2f[j]\qquad(i-i=0)\\\therefore \Delta^3 &=2f[i]\end{align*}$<p>我们维护 $f[i]$ 的前缀和，以及 $f[i-j]\cdot j$ 的前缀和，每次将 $f[i]$ 累加进 $f[i]$ 的前缀和，将 $f[i]$ 的前缀和累加进 $f[i-j]\cdot j$ 的前缀和，$g[i]$ 同理</p><!--more--><h2 id="行列式解法："><a href="#行列式解法：" class="headerlink" title="行列式解法："></a>行列式解法：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> digit 100000000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">bigint</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">mutable</span> <span class="type">int</span> a[<span class="number">205</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="title">bigint</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="built_in">sizeof</span>(a));</span><br><span class="line">a[<span class="number">0</span>]=<span class="number">1</span>;a[<span class="number">1</span>]=<span class="number">0</span>;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="title">bigint</span><span class="params">(<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="built_in">sizeof</span>(a));</span><br><span class="line">a[<span class="number">0</span>]=<span class="number">1</span>;a[<span class="number">1</span>]=b;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">int</span>&amp; <span class="keyword">operator</span>[](<span class="type">size_t</span> pos)<span class="type">const</span>&#123;<span class="keyword">return</span> a[pos];&#125;</span><br><span class="line"><span class="keyword">inline</span> bigint <span class="keyword">operator</span>+(<span class="type">int</span> b)<span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i;bigint c=*<span class="keyword">this</span>;</span><br><span class="line">c[<span class="number">1</span>]+=b;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=c[<span class="number">0</span>];++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(c[i]&gt;=digit)</span><br><span class="line">&#123;</span><br><span class="line">++c[i+<span class="number">1</span>];c[i]-=digit;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(c[c[<span class="number">0</span>]+<span class="number">1</span>])++c[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> bigint <span class="keyword">operator</span>-(<span class="type">const</span> bigint&amp; b)<span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i;bigint c;c[<span class="number">0</span>]=a[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=c[<span class="number">0</span>];++i)c[i]=a[i]-b[i];</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=c[<span class="number">0</span>];++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(c[i]&lt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">c[i]+=digit;--c[i+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!c[c[<span class="number">0</span>]]&amp;&amp;c[<span class="number">0</span>]&gt;<span class="number">1</span>)--c[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> bigint <span class="keyword">operator</span>*(<span class="type">int</span> b)<span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i;bigint c;c[<span class="number">0</span>]=a[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=c[<span class="number">0</span>];++i)c[i]=a[i]*b;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=c[<span class="number">0</span>]||c[i];++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(c[i]&gt;=digit)</span><br><span class="line">&#123;</span><br><span class="line">c[i+<span class="number">1</span>]+=c[i]/digit;c[i]%=digit;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">c[<span class="number">0</span>]=i<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os,<span class="type">const</span> bigint&amp; a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[a[<span class="number">0</span>]]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=a[<span class="number">0</span>]<span class="number">-1</span>;i&gt;=<span class="number">1</span>;--i)<span class="built_in">printf</span>(<span class="string">&quot;%08d&quot;</span>,a[i]);</span><br><span class="line"><span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line">&#125;f[<span class="number">3005</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">f[<span class="number">1</span>]=<span class="number">1</span>;f[<span class="number">2</span>]=<span class="number">5</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">3</span>;i&lt;=n;++i)f[i]=f[i<span class="number">-1</span>]*<span class="number">3</span>-f[i<span class="number">-2</span>]+<span class="number">2</span>;</span><br><span class="line">cout&lt;&lt;f[n]&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DP解法："><a href="#DP解法：" class="headerlink" title="DP解法："></a>DP解法：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> digit 1000000000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">bigint</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">mutable</span> <span class="type">int</span> a[<span class="number">205</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="title">bigint</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="built_in">sizeof</span>(a));</span><br><span class="line">a[<span class="number">0</span>]=<span class="number">1</span>;a[<span class="number">1</span>]=<span class="number">0</span>;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="title">bigint</span><span class="params">(<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="built_in">sizeof</span>(a));</span><br><span class="line">a[<span class="number">0</span>]=<span class="number">1</span>;a[<span class="number">1</span>]=b;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">int</span>&amp; <span class="keyword">operator</span>[](<span class="type">size_t</span> pos)<span class="type">const</span>&#123;<span class="keyword">return</span> a[pos];&#125;</span><br><span class="line"><span class="keyword">inline</span> bigint&amp; <span class="keyword">operator</span>+=(<span class="type">const</span> bigint&amp; b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i;a[<span class="number">0</span>]=<span class="built_in">max</span>(a[<span class="number">0</span>],b[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=a[<span class="number">0</span>];++i)a[i]+=b[i];</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=a[<span class="number">0</span>];++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;=digit)</span><br><span class="line">&#123;</span><br><span class="line">++a[i+<span class="number">1</span>];a[i]-=digit;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a[a[<span class="number">0</span>]+<span class="number">1</span>])++a[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os,<span class="type">const</span> bigint&amp; a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[a[<span class="number">0</span>]]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=a[<span class="number">0</span>]<span class="number">-1</span>;i&gt;=<span class="number">1</span>;--i)<span class="built_in">printf</span>(<span class="string">&quot;%09d&quot;</span>,a[i]);</span><br><span class="line"><span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line">&#125;F=<span class="number">1</span>,F1=<span class="number">1</span>,F2=<span class="number">1</span>,G=<span class="number">0</span>,G1=<span class="number">0</span>,G2=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i)G2+=F,G2+=F;</span><br><span class="line"><span class="keyword">if</span>(i&lt;n)G1+=G2,G+=G1;</span><br><span class="line">F=F1;F2+=F;F1+=F2;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;(F+=G)&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完结撒花！★,°:.☆(￣▽￣)&#x2F;$:.°★</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;由于内容过长、公式较多，暂时将内容隐藏，请公式恐惧症们做好心理准备。&lt;/p&gt;</summary>
    
    
    
    <category term="题解" scheme="https://blog.lolifamily.js.org/oi/categories/%E9%A2%98%E8%A7%A3/"/>
    
    <category term="FJOI" scheme="https://blog.lolifamily.js.org/oi/categories/%E9%A2%98%E8%A7%A3/FJOI/"/>
    
    <category term="2007" scheme="https://blog.lolifamily.js.org/oi/categories/%E9%A2%98%E8%A7%A3/FJOI/2007/"/>
    
    
    <category term="DP" scheme="https://blog.lolifamily.js.org/oi/tags/DP/"/>
    
    <category term="矩阵树" scheme="https://blog.lolifamily.js.org/oi/tags/%E7%9F%A9%E9%98%B5%E6%A0%91/"/>
    
    <category term="差分" scheme="https://blog.lolifamily.js.org/oi/tags/%E5%B7%AE%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>[BZOJ3771]Triple</title>
    <link href="https://blog.lolifamily.js.org/oi/post/solution-code4705/"/>
    <id>https://blog.lolifamily.js.org/oi/post/solution-code4705/</id>
    <published>2018-08-12T13:49:05.000Z</published>
    <updated>2021-02-08T11:52:19.576Z</updated>
    
    <content type="html"><![CDATA[<h2 id="不同情况的生成函数"><a href="#不同情况的生成函数" class="headerlink" title="不同情况的生成函数"></a>不同情况的生成函数</h2><p>我们先设$\begin {split}a(x)\end {split}$为丢失一把斧头的生成函数，$\begin {split}b(x)\end {split}$位丢失两把一样的斧头的生成函数，$\begin {split}c(x)\end {split}$位丢失三把一样的斧头的生成函数<br>对于样例来说：$\begin {split}a(x)&= x^4+x^5+x^6+x^7\\b(x)&= x^8+x^{10}+x^{12}+x^{14}\\c(x)&= x^{12}+x^{15}+x^{18}+x^{21}\end {split}$<br>再设$\begin {split}A(x)\end {split}$为丢失一把斧头的生成函数，$\begin {split}B(x)\end {split}$位丢失两把不同的斧头的生成函数，$\begin {split}C(x)\end {split}$位丢失三把不同的斧头的生成函数<br>对于样例来说：$\begin {split}A(x)& =a(x)\\B(x)& =a^2(x)-b(x)\\C(x)& =a^3(x)-3a(x)b(x)+2c(x)\end {split}$<br>解释一下$\begin {split} C(x) \end {split}$，首先随意的选择三个斧头（可以相同），然后减去选出两把相同的斧头和另一把斧头（也可以相同），但是三个相同的被减了三次，所以要加2<br>由于数据范围较大，需要用FFT或NTT优化</p><span id="more"></span><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>我们讲一个悲伤的故事。<br>从前有一个贫穷的樵夫在河边砍柴。<br>这时候河里出现了一个水神，夺过了他的斧头，说：<br>“这把斧头，是不是你的？”<br>樵夫一看：“是啊是啊！”<br>水神把斧头扔在一边，又拿起一个东西问：<br>“这把斧头，是不是你的？”<br>樵夫看不清楚，但又怕真的是自己的斧头，只好又答：“是啊是啊！”<br>水神又把手上的东西扔在一边，拿起第三个东西问：<br>“这把斧头，是不是你的？”<br>樵夫还是看不清楚，但是他觉得再这样下去他就没法砍柴了。<br>于是他又一次答：“是啊是啊！真的是！”<br>水神看着他，哈哈大笑道：<br>“你看看你现在的样子，真是丑陋！”<br>之后就消失了。<br>樵夫觉得很坑爹，他今天不仅没有砍到柴，还丢了一把斧头给那个水神。<br>于是他准备回家换一把斧头。<br>回家之后他才发现真正坑爹的事情才刚开始。<br>水神拿着的的确是他的斧头。<br>但是不一定是他拿出去的那把，还有可能是水神不知道怎么偷偷从他家里拿走的。<br>换句话说，水神可能拿走了他的一把，两把或者三把斧头。<br>樵夫觉得今天真是倒霉透了，但不管怎么样日子还得过。<br>他想统计他的损失。<br>樵夫的每一把斧头都有一个价值，不同斧头的价值不同。总损失就是丢掉的斧头价值和。<br>他想对于每个可能的总损失，计算有几种可能的方案。<br>注意：如果水神拿走了两把斧头$a$和$b$，$(a,b)$和$(b,a)$视为一种方案。拿走三把斧头时，$(a,b,c)$,$(b,c,a)$,$(c,a,b)$,$(c,b,a)$,$(b,a,c)$,$(a,c,b)$视为一种方案。</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>第一行是整数N，表示有$N$把斧头。<br>接下来$N$行升序输入$N$个数字$A_i$，表示每把斧头的价值。</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>若干行，按升序对于所有可能的总损失输出一行$x$ $y$，$x$为损失值，$y$为方案数。</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">4 1</span><br><span class="line">5 1</span><br><span class="line">6 1</span><br><span class="line">7 1</span><br><span class="line">9 1</span><br><span class="line">10 1</span><br><span class="line">11 2</span><br><span class="line">12 1</span><br><span class="line">13 1</span><br><span class="line">15 1</span><br><span class="line">16 1</span><br><span class="line">17 1</span><br><span class="line">18 1</span><br></pre></td></tr></table></figure><h3 id="HINT"><a href="#HINT" class="headerlink" title="HINT"></a>HINT</h3><p>$11$有两种方案是$4+7$和$5+6$，其他损失值都有唯一方案，例如$4&#x3D;4$,$5&#x3D;5$,$10&#x3D;4+6$,$18&#x3D;5+6+7$。<br>所有数据满足：$A_i\le 40000$</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> complex&lt;<span class="type">double</span>&gt;cp;</span><br><span class="line"><span class="type">int</span> rev[<span class="number">140005</span>];</span><br><span class="line">cp a[<span class="number">140005</span>],b[<span class="number">140005</span>],c[<span class="number">140005</span>],wi[<span class="number">140005</span>],ans[<span class="number">140005</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Make</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,L=<span class="built_in">log2</span>(n)+<span class="number">1</span>;n=<span class="number">1</span>&lt;&lt;L;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;++i)rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(L<span class="number">-1</span>));</span><br><span class="line"><span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">FFT</span><span class="params">(cp A[],<span class="type">int</span> n,<span class="type">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,j,k;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;++i)<span class="keyword">if</span>(rev[i]&lt;i)<span class="built_in">swap</span>(A[i],A[rev[i]]);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">cp <span class="title">wn</span><span class="params">(cos(M_PI/i),f*sin(M_PI/i))</span></span>;</span><br><span class="line">wi[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;i;++j)wi[j]=wi[j<span class="number">-1</span>]*wn;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j+=i&lt;&lt;<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;i;++k)</span><br><span class="line">&#123;</span><br><span class="line">cp x=A[j+k],y=wi[k]*A[i+j+k];</span><br><span class="line">A[j+k]=x+y;A[i+j+k]=x-y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(f==<span class="number">-1</span>)<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;++i)A[i]=A[i]/<span class="built_in">double</span>(n);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,x,n,m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">a[x]=b[x*<span class="number">2</span>]=c[x*<span class="number">3</span>]=<span class="built_in">cp</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">m=<span class="built_in">Make</span>(<span class="number">131071</span>);</span><br><span class="line"><span class="built_in">FFT</span>(a,m,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">FFT</span>(b,m,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">FFT</span>(c,m,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;++i)</span><br><span class="line">&#123;</span><br><span class="line">ans[i]=a[i]+(a[i]*a[i]-b[i])/<span class="number">2.0</span>+(a[i]*a[i]*a[i]-a[i]*b[i]*<span class="number">3.0</span>+c[i]*<span class="number">2.0</span>)/<span class="number">6.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">FFT</span>(ans,m,<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ans[i].<span class="built_in">real</span>()&gt;<span class="number">0.9</span>)<span class="built_in">printf</span>(<span class="string">&quot;%d %.0f\n&quot;</span>,i,<span class="built_in">round</span>(ans[i].<span class="built_in">real</span>()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;不同情况的生成函数&quot;&gt;&lt;a href=&quot;#不同情况的生成函数&quot; class=&quot;headerlink&quot; title=&quot;不同情况的生成函数&quot;&gt;&lt;/a&gt;不同情况的生成函数&lt;/h2&gt;&lt;p&gt;我们先设$&#92;begin {split}a(x)&#92;end {split}$为丢失一把斧头的生成函数，$&#92;begin {split}b(x)&#92;end {split}$位丢失两把一样的斧头的生成函数，$&#92;begin {split}c(x)&#92;end {split}$位丢失三把一样的斧头的生成函数&lt;br&gt;对于样例来说：
$&#92;begin {split}
a(x)&amp;= x^4+x^5+x^6+x^7&#92;&#92;
b(x)&amp;= x^8+x^{10}+x^{12}+x^{14}&#92;&#92;
c(x)&amp;= x^{12}+x^{15}+x^{18}+x^{21}
&#92;end {split}$&lt;br&gt;再设$&#92;begin {split}A(x)&#92;end {split}$为丢失一把斧头的生成函数，$&#92;begin {split}B(x)&#92;end {split}$位丢失两把不同的斧头的生成函数，$&#92;begin {split}C(x)&#92;end {split}$位丢失三把不同的斧头的生成函数&lt;br&gt;对于样例来说：$&#92;begin {split}
A(x)&amp; =a(x)&#92;&#92;
B(x)&amp; =a^2(x)-b(x)&#92;&#92;
C(x)&amp; =a^3(x)-3a(x)b(x)+2c(x)
&#92;end {split}$&lt;br&gt;解释一下$&#92;begin {split} C(x) &#92;end {split}$，首先随意的选择三个斧头（可以相同），然后减去选出两把相同的斧头和另一把斧头（也可以相同），但是三个相同的被减了三次，所以要加2&lt;br&gt;由于数据范围较大，需要用FFT或NTT优化&lt;/p&gt;</summary>
    
    
    
    <category term="题解" scheme="https://blog.lolifamily.js.org/oi/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="NTT" scheme="https://blog.lolifamily.js.org/oi/tags/NTT/"/>
    
    <category term="生成函数" scheme="https://blog.lolifamily.js.org/oi/tags/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/"/>
    
    <category term="FFT" scheme="https://blog.lolifamily.js.org/oi/tags/FFT/"/>
    
  </entry>
  
  <entry>
    <title>生成函数</title>
    <link href="https://blog.lolifamily.js.org/oi/post/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/"/>
    <id>https://blog.lolifamily.js.org/oi/post/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/</id>
    <published>2018-08-11T14:58:20.000Z</published>
    <updated>2021-12-11T07:57:19.984Z</updated>
    
    <content type="html"><![CDATA[<h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><span id="more"></span><h2 id="法一：广义二项式定理"><a href="#法一：广义二项式定理" class="headerlink" title="法一：广义二项式定理"></a>法一：广义二项式定理</h2><p>由数式二项式定理可得$\begin {split}(1+x)^n&#x3D;\sum_{i&#x3D;0}^n C_{n+i-1}^i\cdot x^i \end {split}$<br>这里的n是正数，当指数为负整数时 $−1\le x\le 1$，且n为正整数时$\begin {split}(1−x)^{−n}&#x3D;\sum_{i&#x3D;0}^{\infty}C_{n+i-1}^i\cdot x^i \end {split}$</p><h2 id="法二-一会儿补充"><a href="#法二-一会儿补充" class="headerlink" title="法二(一会儿补充)"></a>法二(一会儿补充)</h2><h2 id="模板题"><a href="#模板题" class="headerlink" title="模板题"></a>模板题</h2><ul><li><a href="/oi/post/solution-code4763/" title="solution-code4763">code4763</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;注意：&quot;&gt;&lt;a href=&quot;#注意：&quot; class=&quot;headerlink&quot; title=&quot;注意：&quot;&gt;&lt;/a&gt;注意：&lt;/h2&gt;</summary>
    
    
    
    <category term="算法" scheme="https://blog.lolifamily.js.org/oi/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="生成函数" scheme="https://blog.lolifamily.js.org/oi/tags/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>[BZOJ3759] Hungergame</title>
    <link href="https://blog.lolifamily.js.org/oi/post/solution-code5822/"/>
    <id>https://blog.lolifamily.js.org/oi/post/solution-code5822/</id>
    <published>2018-08-11T14:50:06.000Z</published>
    <updated>2021-02-08T11:52:19.596Z</updated>
    
    <content type="html"><![CDATA[<p>转载自<a href="https://www.cnblogs.com/joyouth/p/5334906.html">joyouth</a><br>首先我们不难看出如果存在一个异或和为0的子集，那么先手必胜，否则先手必败<br>证明如下：<br>1、首先如果至少存在一个异或和为0的子集，那么一定存在一个异或和为0的子集使得选取之后剩下的数的任意子集异或和不为0<br>2、假设我们已经选取了一个异或和为0的子集，无论后手怎么做，我们总是有办法使得当前选取的子集异或和为0，因为后手无论是拿石子还是取石子之后，当前子集异或和不等于0，根据Nim游戏可知，此时先手一定有方案使得异或和为0<br>至此，我们证明了如果至少存在一个异或和为0的子集，先手必胜<br>那么题目就转化为求是否存在一个子集异或和为0，用线性基即可</p><span id="more"></span><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>由于施惠国的统治极其残暴，每年从13个区中每个区中选出2名“贡品”参加饥饿游戏，而参加游戏的人必须在险恶的自然环境中杀死其余的人才能存活。游戏只会有一个人活下来。凯特尼斯•伊夫狄恩和同区的皮塔•麦拉克在历经千难万阻后活了下来，然而残忍的游戏只允许一人存活，正当两人准备同时吃下有毒的果实自杀的时候，统治者被打动了，他说：你们两个人跟我玩一个游戏，你赢了，我就让你们两个都活下来。女主角凯特尼斯•伊夫狄恩接受了挑战。<br>这个游戏是这样的，有$n(n\le 20)$个箱子，每个箱子里面有$a_i(a_i\le 10^9)$个石头（怎么放进去的我就不知道了），两个人轮流进行操作（女主角先手），每一次操作可以将任意个（大于0个）未打开的箱子打开（一开始所有的箱子都是关闭的），或者在已经打开的一个箱子里拿走任意个（大于0个）石头（不能超过这个箱子现有的石头数）。最后谁无法操作谁就输了。<br>现在给出$n$，和这$n$个箱子里的石头数$a_i$，女主角想知道她是否有绝对的把握取得胜利（很明显她的对手“统治者”是绝顶聪明的）。</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>第一行有一个正整数$T$（表示有$T$组测试数据），对于每组测试数据有两行，第一行为一个正整数$n$，接下来有$n$个数，第$i$个数表示$a_i$.</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p> 有T行：对于每一个测试数据，如果先手可以必胜则输出“Yes”，否则输出“No”（没有引号）。</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">5</span><br><span class="line">18 11 16 19 15</span><br><span class="line">5</span><br><span class="line">18 12 17 10 18</span><br><span class="line">5</span><br><span class="line">17 7 1 10 1</span><br><span class="line">5</span><br><span class="line">19 5 16 19 8</span><br><span class="line">5</span><br><span class="line">18 18 7 4 9</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">No</span><br><span class="line">Yes</span><br><span class="line">Yes</span><br><span class="line">Yes</span><br><span class="line">Yes</span><br></pre></td></tr></table></figure><h3 id="HINT"><a href="#HINT" class="headerlink" title="HINT"></a>HINT</h3><p>$100%$的数据：$n\le 20$，$T\le 10$，$a_i$不超过$10^9$；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> pos[<span class="number">35</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">Insert</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">31</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((x&gt;&gt;i)&amp;<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!pos[i])&#123;pos[i]=x;<span class="keyword">break</span>;&#125;</span><br><span class="line"><span class="keyword">else</span> x^=pos[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,T,n,x,ans;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(pos,<span class="number">0</span>,<span class="built_in">sizeof</span>(pos));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">ans+=<span class="built_in">Insert</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans)<span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;转载自&lt;a href=&quot;https://www.cnblogs.com/joyouth/p/5334906.html&quot;&gt;joyouth&lt;/a&gt;&lt;br&gt;首先我们不难看出如果存在一个异或和为0的子集，那么先手必胜，否则先手必败&lt;br&gt;证明如下：&lt;br&gt;1、首先如果至少存在一个异或和为0的子集，那么一定存在一个异或和为0的子集使得选取之后剩下的数的任意子集异或和不为0&lt;br&gt;2、假设我们已经选取了一个异或和为0的子集，无论后手怎么做，我们总是有办法使得当前选取的子集异或和为0，因为后手无论是拿石子还是取石子之后，当前子集异或和不等于0，根据Nim游戏可知，此时先手一定有方案使得异或和为0&lt;br&gt;至此，我们证明了如果至少存在一个异或和为0的子集，先手必胜&lt;br&gt;那么题目就转化为求是否存在一个子集异或和为0，用线性基即可&lt;/p&gt;</summary>
    
    
    
    <category term="题解" scheme="https://blog.lolifamily.js.org/oi/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="线性基" scheme="https://blog.lolifamily.js.org/oi/tags/%E7%BA%BF%E6%80%A7%E5%9F%BA/"/>
    
    <category term="Nim" scheme="https://blog.lolifamily.js.org/oi/tags/Nim/"/>
    
  </entry>
  
  <entry>
    <title>solution-code2593</title>
    <link href="https://blog.lolifamily.js.org/oi/post/solution-code2593/"/>
    <id>https://blog.lolifamily.js.org/oi/post/solution-code2593/</id>
    <published>2018-08-11T12:06:00.000Z</published>
    <updated>2021-02-08T11:52:19.612Z</updated>
    
    <content type="html"><![CDATA[<h2 id="每种水的生成函数"><a href="#每种水的生成函数" class="headerlink" title="每种水的生成函数"></a>每种水的生成函数</h2><p>第1种: $\begin {split}1+x+x^2+\cdots&#x3D;\frac 1{1-x} \end {split}$<br>第2种: $\begin {split}1+x&#x3D;\frac{1-x^2}{1-x} \end {split}$<br>第3种: $\begin {split}1+x+x^2+x^3+x^4&#x3D;\frac{1-x^5}{1-x} \end {split}$<br>第4种: $\begin {split}1+x^5+x^{10}+\cdots&#x3D;<br>\frac 1{1-x^5} \end {split}$<br>第5种: $\begin {split}1+x^2+x^4+\cdots&#x3D;\frac 1{1-x^2} \end {split}$</p><p>乘在一起得到: $\begin {split}\frac 1{(1-x)^3}&#x3D;(1-x)^{-3} \end {split}$<br>带入广义二项式定理得: $\begin {split} f(x)&#x3D;\sum_{i&#x3D;0}^{\infty} C_{i+2}^i \cdot x^i \end {split}$<br>当$\begin {split}i&#x3D;n \end{split}$时第$n$项为 $\begin {split} x\cdot C_{n+2}^n \cdot x^n&#x3D;C_{n+2}^2\cdot x^n\end{split}$<br>所以答案就为$\begin {split} ans&#x3D;\frac{(n+1)(n+2)}2 \end {split}$</p><span id="more"></span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="number">1LL</span>*(n+<span class="number">1</span>)*(n+<span class="number">2</span>)/<span class="number">2</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;每种水的生成函数&quot;&gt;&lt;a href=&quot;#每种水的生成函数&quot; class=&quot;headerlink&quot; title=&quot;每种水的生成函数&quot;&gt;&lt;/a&gt;每种水的生成函数&lt;/h2&gt;&lt;p&gt;第1种: $&#92;begin {split}1+x+x^2+&#92;cdots&amp;#x3D;&#92;frac 1{1-x} &#92;end {split}$&lt;br&gt;第2种: $&#92;begin {split}1+x&amp;#x3D;&#92;frac{1-x^2}{1-x} &#92;end {split}$&lt;br&gt;第3种: $&#92;begin {split}1+x+x^2+x^3+x^4&amp;#x3D;&#92;frac{1-x^5}{1-x} &#92;end {split}$&lt;br&gt;第4种: $&#92;begin {split}1+x^5+x^{10}+&#92;cdots&amp;#x3D;&lt;br&gt;&#92;frac 1{1-x^5} &#92;end {split}$&lt;br&gt;第5种: $&#92;begin {split}1+x^2+x^4+&#92;cdots&amp;#x3D;&#92;frac 1{1-x^2} &#92;end {split}$&lt;/p&gt;
&lt;p&gt;乘在一起得到: $&#92;begin {split}&#92;frac 1{(1-x)^3}&amp;#x3D;(1-x)^{-3} &#92;end {split}$&lt;br&gt;带入广义二项式定理得: $&#92;begin {split} f(x)&amp;#x3D;&#92;sum_{i&amp;#x3D;0}^{&#92;infty} C_{i+2}^i &#92;cdot x^i &#92;end {split}$&lt;br&gt;当$&#92;begin {split}i&amp;#x3D;n &#92;end{split}$时第$n$项为 $&#92;begin {split} x&#92;cdot C_{n+2}^n &#92;cdot x^n&amp;#x3D;C_{n+2}^2&#92;cdot x^n&#92;end{split}$&lt;br&gt;所以答案就为$&#92;begin {split} ans&amp;#x3D;&#92;frac{(n+1)(n+2)}2 &#92;end {split}$&lt;/p&gt;</summary>
    
    
    
    <category term="题解" scheme="https://blog.lolifamily.js.org/oi/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="生成函数" scheme="https://blog.lolifamily.js.org/oi/tags/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Treap</title>
    <link href="https://blog.lolifamily.js.org/oi/post/Treap/"/>
    <id>https://blog.lolifamily.js.org/oi/post/Treap/</id>
    <published>2018-08-11T10:31:13.000Z</published>
    <updated>2021-02-08T11:52:19.588Z</updated>
    
    <content type="html"><![CDATA[<h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><ul><li>空(<del>逃</del>)</li></ul><span id="more"></span><h2 id="下载讲义"><a href="#下载讲义" class="headerlink" title="下载讲义"></a>下载讲义</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;注意：&quot;&gt;&lt;a href=&quot;#注意：&quot; class=&quot;headerlink&quot; title=&quot;注意：&quot;&gt;&lt;/a&gt;注意：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;空(&lt;del&gt;逃&lt;/del&gt;)&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="算法" scheme="https://blog.lolifamily.js.org/oi/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="平衡树" scheme="https://blog.lolifamily.js.org/oi/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
    <category term="Treap" scheme="https://blog.lolifamily.js.org/oi/tags/Treap/"/>
    
  </entry>
  
  <entry>
    <title>solution-code4763</title>
    <link href="https://blog.lolifamily.js.org/oi/post/solution-code4763/"/>
    <id>https://blog.lolifamily.js.org/oi/post/solution-code4763/</id>
    <published>2018-08-11T08:46:17.000Z</published>
    <updated>2021-02-08T11:52:19.576Z</updated>
    
    <content type="html"><![CDATA[<h2 id="每种食物的生成函数"><a href="#每种食物的生成函数" class="headerlink" title="每种食物的生成函数"></a>每种食物的生成函数</h2><p>汉堡: $\begin {split}1+x^2+x^4+\cdots&#x3D;\frac 1{1-x^2} \end {split}$<br>可乐: $\begin {split}1+x&#x3D;\frac{1-x^2}{1-x}\end {split}$<br>鸡腿: $\begin {split}1+x+x^2&#x3D;\frac{1-x^3}{1-x} \end {split}$<br>蜜桃多: $\begin {split}x+x^3+x^5+\cdots&#x3D;\frac x{1-x^2} \end {split}$<br>鸡块: $\begin {split}1+x^4+x^8+\cdots&#x3D;\frac 1{1-x^4} \end {split}$<br>包子: $\begin {split}1+x+x^2+x^3&#x3D;\frac{1-x^4}{1-x} \end {split}$<br>土豆片炒肉: $\begin {split}1+x&#x3D;\frac{1-x^2}{1-x} \end {split}$<br>面包: $\begin {split}1+x^3+x^6+\cdots&#x3D;\frac 1{1-x^3} \end {split}$</p><p>乘在一起得到: $\begin {split}f(x)&#x3D;\frac x{(1-x)^4}&#x3D;x\cdot (1-x)^{-4} \end {split}$<br>带入广义二项式定理得 $\begin {split} f(x)&#x3D;x\cdot \sum_{i&#x3D;0}^\infty C_{i+3}^i \cdot x^i \end {split}$<br>当$\begin {split}i&#x3D;n-1 \end{split}$时第$n-1$项为 $\begin {split} x\cdot C_{n+2}^n \cdot x^n&#x3D;C_{n+2}^3\cdot x^n\end{split}$<br>所以答案就为$\begin {split} ans&#x3D;\frac{n(n+1)(n+2)}6 \end {split}$</p><span id="more"></span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 10007</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inv6 1668</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">GetInt</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> ch,num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(ch=<span class="built_in">getchar</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">num=(num*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>)%mod;</span><br><span class="line">ch=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n=<span class="built_in">GetInt</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,n*(n+<span class="number">1</span>)%mod*(n+<span class="number">2</span>)%mod*inv6%mod);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;每种食物的生成函数&quot;&gt;&lt;a href=&quot;#每种食物的生成函数&quot; class=&quot;headerlink&quot; title=&quot;每种食物的生成函数&quot;&gt;&lt;/a&gt;每种食物的生成函数&lt;/h2&gt;&lt;p&gt;汉堡: $&#92;begin {split}1+x^2+x^4+&#92;cdots&amp;#x3D;&#92;frac 1{1-x^2} &#92;end {split}$&lt;br&gt;可乐: $&#92;begin {split}1+x&amp;#x3D;&#92;frac{1-x^2}{1-x}&#92;end {split}$&lt;br&gt;鸡腿: $&#92;begin {split}1+x+x^2&amp;#x3D;&#92;frac{1-x^3}{1-x} &#92;end {split}$&lt;br&gt;蜜桃多: $&#92;begin {split}x+x^3+x^5+&#92;cdots&amp;#x3D;&#92;frac x{1-x^2} &#92;end {split}$&lt;br&gt;鸡块: $&#92;begin {split}1+x^4+x^8+&#92;cdots&amp;#x3D;&#92;frac 1{1-x^4} &#92;end {split}$&lt;br&gt;包子: $&#92;begin {split}1+x+x^2+x^3&amp;#x3D;&#92;frac{1-x^4}{1-x} &#92;end {split}$&lt;br&gt;土豆片炒肉: $&#92;begin {split}1+x&amp;#x3D;&#92;frac{1-x^2}{1-x} &#92;end {split}$&lt;br&gt;面包: $&#92;begin {split}1+x^3+x^6+&#92;cdots&amp;#x3D;&#92;frac 1{1-x^3} &#92;end {split}$&lt;/p&gt;
&lt;p&gt;乘在一起得到: $&#92;begin {split}f(x)&amp;#x3D;&#92;frac x{(1-x)^4}&amp;#x3D;x&#92;cdot (1-x)^{-4} &#92;end {split}$&lt;br&gt;带入广义二项式定理得 $&#92;begin {split} f(x)&amp;#x3D;x&#92;cdot &#92;sum_{i&amp;#x3D;0}^&#92;infty C_{i+3}^i &#92;cdot x^i &#92;end {split}$&lt;br&gt;当$&#92;begin {split}i&amp;#x3D;n-1 &#92;end{split}$时第$n-1$项为 $&#92;begin {split} x&#92;cdot C_{n+2}^n &#92;cdot x^n&amp;#x3D;C_{n+2}^3&#92;cdot x^n&#92;end{split}$&lt;br&gt;所以答案就为$&#92;begin {split} ans&amp;#x3D;&#92;frac{n(n+1)(n+2)}6 &#92;end {split}$&lt;/p&gt;</summary>
    
    
    
    <category term="题解" scheme="https://blog.lolifamily.js.org/oi/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="生成函数" scheme="https://blog.lolifamily.js.org/oi/tags/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>solution-code4837</title>
    <link href="https://blog.lolifamily.js.org/oi/post/solution-code4837/"/>
    <id>https://blog.lolifamily.js.org/oi/post/solution-code4837/</id>
    <published>2018-08-10T12:28:18.000Z</published>
    <updated>2021-02-08T11:52:19.596Z</updated>
    
    <content type="html"><![CDATA[<p>模板题，多注意细节即可</p><span id="more"></span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> to,next;</span><br><span class="line">&#125;e[<span class="number">1000005</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> L,R,maxx,addv;</span><br><span class="line">&#125;T[<span class="number">2000005</span>];</span><br><span class="line"><span class="type">int</span> n,m,siz[<span class="number">500005</span>],d[<span class="number">500005</span>],h[<span class="number">500005</span>],pre[<span class="number">500005</span>],vson[<span class="number">500005</span>],pos[<span class="number">500005</span>],top[<span class="number">500005</span>],sign,cnt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Addedge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[++cnt]=(Node)&#123;y,h[x]&#125;;h[x]=cnt;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> dep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,y;</span><br><span class="line">d[x]=dep;siz[x]=<span class="number">1</span>;</span><br><span class="line">vson[x]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=h[x];i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">y=e[i].to;</span><br><span class="line"><span class="keyword">if</span>(y==pre[x])<span class="keyword">continue</span>;</span><br><span class="line">pre[y]=x;</span><br><span class="line"><span class="built_in">dfs1</span>(y,dep+<span class="number">1</span>);</span><br><span class="line">siz[x]+=siz[y];</span><br><span class="line"><span class="keyword">if</span>(vson[x]==<span class="number">-1</span>||siz[vson[x]]&lt;siz[y])vson[x]=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> sp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,y;</span><br><span class="line">pos[x]=++sign;top[x]=sp;</span><br><span class="line"><span class="keyword">if</span>(vson[x]!=<span class="number">-1</span>)<span class="built_in">dfs2</span>(vson[x],sp);</span><br><span class="line"><span class="keyword">for</span>(i=h[x];i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">y=e[i].to;</span><br><span class="line"><span class="keyword">if</span>(y==pre[x]||y==vson[x])<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs2</span>(y,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Build</span><span class="params">(<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T[v].L=L;T[v].R=R;</span><br><span class="line"><span class="keyword">if</span>(L==R)<span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> mid=(L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">Build</span>(L,mid,v&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="built_in">Build</span>(mid+<span class="number">1</span>,R,(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T[v].maxx=<span class="built_in">max</span>(T[v&lt;&lt;<span class="number">1</span>].maxx,T[(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].maxx)+T[v].addv;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Insert</span><span class="params">(<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L&gt;T[v].R||R&lt;T[v].L)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=T[v].L&amp;&amp;R&gt;=T[v].R)</span><br><span class="line">&#123;</span><br><span class="line">++T[v].addv;++T[v].maxx;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Insert</span>(L,R,v&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="built_in">Insert</span>(L,R,(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line"><span class="built_in">pushup</span>(v);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Insertpath</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(d[top[x]]&lt;d[top[y]])<span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="built_in">Insert</span>(pos[top[x]],pos[x],<span class="number">1</span>);</span><br><span class="line">x=pre[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(d[x]&gt;d[y])<span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="built_in">Insert</span>(pos[x],pos[y],<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,n,m,x,y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line"><span class="built_in">Addedge</span>(x,y);</span><br><span class="line"><span class="built_in">Addedge</span>(y,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">Build</span>(<span class="number">1</span>,sign,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line"><span class="built_in">Insertpath</span>(x,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,T[<span class="number">1</span>].maxx);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;模板题，多注意细节即可&lt;/p&gt;</summary>
    
    
    
    <category term="题解" scheme="https://blog.lolifamily.js.org/oi/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="线段树" scheme="https://blog.lolifamily.js.org/oi/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    <category term="树链剖分" scheme="https://blog.lolifamily.js.org/oi/tags/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>[NOI2008]志愿者招募</title>
    <link href="https://blog.lolifamily.js.org/oi/post/solution-code2361/"/>
    <id>https://blog.lolifamily.js.org/oi/post/solution-code2361/</id>
    <published>2018-08-10T12:09:23.000Z</published>
    <updated>2021-02-08T11:52:19.588Z</updated>
    
    <content type="html"><![CDATA[<p>转载自<a href="https://www.byvoid.com/zhs/blog/noi-2008-employee">byvoid</a><br>这道题正确的解法是构造网络，求网络最小费用最大流，但是模型隐藏得较深，不易想到。构造网络是该题的关键，以下面一个例子说明构图的方法和解释。</p><span id="more"></span><p>例如一共需要4天，四天需要的人数依次是4,2,5,3。有5类志愿者，如下表所示：</p><table><thead><tr><th>种类</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr><td>时间</td><td>1-2</td><td>1-1</td><td>2-3</td><td>3-3</td><td>3-4</td></tr><tr><td>费用</td><td>3</td><td>4</td><td>3</td><td>5</td><td>6</td></tr></tbody></table><p>设雇佣第i类志愿者的人数为$X_i$，每个志愿者的费用为$V_i$，第j天雇佣的人数为$P_j$，则每天的雇佣人数应满足一个不等式，如上表所述，可以列出</p>$\begin{cases}P_1 = X_1 + X_2 \le 4\\P_2 = X_1 + X_3 \le 2\\P_3 = X_3 + X_4 +X_5 \le 5\\P_4 = X_5 \le 3\end{cases}$<p>对于第i个不等式，添加辅助变量$Y_i(Y_i\le 0)$ ，可以使其变为等式</p>$\begin{cases}P_1 = X_1 + X_2 - Y_1 = 4\\P_2 = X_1 + X_3 - Y_2 = 2\\P_3 = X_3 + X_4 +X_5 - Y_3 = 5\\P_4 = X_5 - Y_4 = 3\end{cases}$<p>在上述四个等式上下添加$P_0&#x3D;0~P_5&#x3D;0$，每次用下边的式子减去上边的式子，得出</p>$\begin{cases}P_1 - P_0 = X_1 + X_2 - Y_1 = 4\\P_2 - P_1 = X_3 - X_2 -Y_2 +Y_1 = -2\\P_3 - P_2 = X_4 + X_5 - X_1 - Y_3 + Y_2 =3\\P_4 - P_3 = - X_3 - X_4 + Y_3 - Y_4 = -2\\P_5 - P_4 = - X_5 + Y_4 = -3\end{cases}$<p>观察发现，每个变量都在两个式子中出现了，而且一次为正，一次为负。所有等式右边和为0。接下来，根据上面五个等式构图。<br>每个等式为图中一个顶点，添加源点$S$和汇点$T$。<br>如果一个等式右边为非负整数$c$，从源点$S$向该等式对应的顶点连接一条容量为$c$，权值为0的有向边；如果一个等式右边为负整数$c$，从该等式对应的顶点向汇点$T$连接一条容量为$c$，权值为0的有向边。<br>如果一个变量$X_i$在第$j$个等式中出现为$X_i$，在第k个等式中出现为$-X_i$，从顶点j向顶点k连接一条容量为$\infty$，权值为$V_i$的有向边。<br>如果一个变量$Y_i$在第$j$个等式中出现为$Y_i$，在第k个等式中出现为$-Y_i$，从顶点j向顶点k连接一条容量为$\infty$，权值为0的有向边。<br>构图以后，求从源点S到汇点T的最小费用最大流，费用值就是结果。<br>根据上面的例子可以构造出如下网络，红色的边为每个变量$X$代表的边，蓝色的边为每个变量$Y$代表的边，边的容量和权值标已经标出(蓝色没有标记，因为都是容量$\infty$，权值0)。</p><img src="/oi/post/solution-code2361/1.gif" class="" title="1.gif"><p>在这个图中求最小费用最大流，流量网络如下图，每个红色边的流量就是对应的变量$X$的值。</p><img src="/oi/post/solution-code2361/2.gif" class="" title="2.gif"><p>所以，答案为$43+23+3\times 6&#x3D;36$。<br>上面的方法很神奇得求出了结果，思考为什么这样构图。我们将最后的五个等式进一步变形，得出以下结果</p>$\begin{cases}- X_1 - X_2 + Y_1 + 4 = 0\\- X_3 + X_2 + Y_2 - Y_1 - 2 = 0\\- X_4 - X_5 + X_1 + Y_3 - Y_2 + 3 = 0\\X_3 + X_4 - Y_3 + Y_4 - 2 = 0\\X_5 - Y_4 - 3 = 0\end{cases}$<p>可以发现，每个等式左边都是几个变量和一个常数相加减，右边都为0，恰好就像网络流中除了源点和汇点的顶点都满足<strong>流量平衡</strong>。每个正的变量相当于流入该顶点的流量，负的变量相当于流出该顶点的流量，而正常数可以看作来自附加源点的流量，负的常数是流向附加汇点的流量。因此可以据此构造网络，求出从附加源到附加汇的网络最大流，即可满足所有等式。而我们还要求$\begin{split}\sum_{i&#x3D;1}^M X_i\cdot V_i\end{split}$最小，所以要在$X$变量相对应的边上加上权值，然后求<strong>最小费用最大流</strong>。<br>然而在NOI的现场上，该题得分的平均分12.56，只有高逸涵大牛拿到了满分。不能不说这是一道难题，难就难在抽象出问题的数学模型，设计有效的算法。而信息学竞赛正朝着这个方向发展，数学建模将是解决问题的共同关键步骤。</p><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>申奥成功后，布布经过不懈努力，终于成为奥组委下属公司人力资源部门的主管。布布刚上任就遇到了一个难题：为即将启动的奥运新项目招募一批短期志愿者。经过估算，这个项目需要$N$天才能完成，其中第$i$天至少需要$A_i$个人。布布通过了解得知，一共有$M$类志愿者可以招募。其中第$i$类可以从第$S_i$天工作到第$T_i$天，招募费用是每人$C_i$元。新官上任三把火，为了出色地完成自己的工作，布布希望用尽量少的费用招募足够的志愿者，但这并不是他的特长！于是布布找到了你，希望你帮他设计一种最优的招募方案。</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>第一行包含两个整数$N$,$M$，表示完成项目的天数和可以招募的志愿者的种类。接下来的一行中包含$N$个非负整数，表示每天至少需要的志愿者人数。 接下来的$M$行中每行包含三个整数$S_i$, $T_i$, $C_i$，含义如上文所述。为了方便起见，我们可以认为每类志愿者的数量都是无限多的。</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>仅包含一个整数，表示你所设计的最优方案的总费用。</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">3 3</span><br><span class="line">2 3 4</span><br><span class="line">1 2 2</span><br><span class="line">2 3 5</span><br><span class="line">3 3 2</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">14</span><br></pre></td></tr></table></figure><h3 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h3><p>$1\le N\le 1000$，$1\le M\le 10000$，题目中其他所涉及的数据均 不超过$2^{31}-1$。</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3F3F3F3F</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> to,next,v,c;</span><br><span class="line">&#125;e[<span class="number">100005</span>];</span><br><span class="line"><span class="type">int</span> S,T,ans,a[<span class="number">1005</span>],h[<span class="number">1005</span>],d[<span class="number">1005</span>],pre[<span class="number">1005</span>],cnt=<span class="number">1</span>;</span><br><span class="line"><span class="type">bool</span> vis[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Addedge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> v,<span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[++cnt]=(Node)&#123;y,h[x],v,c&#125;;h[x]=cnt;</span><br><span class="line">e[++cnt]=(Node)&#123;x,h[y],<span class="number">0</span>,-c&#125;;h[y]=cnt;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">SPFA</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,x,y;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt;q;q.<span class="built_in">push</span>(S);</span><br><span class="line"><span class="built_in">memset</span>(d,<span class="number">0x3F</span>,<span class="built_in">sizeof</span>(d));d[S]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">x=q.<span class="built_in">front</span>();q.<span class="built_in">pop</span>();</span><br><span class="line">vis[x]=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(i=h[x];i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">y=e[i].to;</span><br><span class="line"><span class="keyword">if</span>(e[i].v&amp;&amp;d[y]&gt;d[x]+e[i].c)</span><br><span class="line">&#123;</span><br><span class="line">d[y]=d[x]+e[i].c;</span><br><span class="line">pre[y]=i;</span><br><span class="line"><span class="keyword">if</span>(!vis[y])&#123;q.<span class="built_in">push</span>(y);vis[y]=<span class="literal">true</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> d[T]&lt;inf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Adjust</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,j=T,delta=inf;</span><br><span class="line"><span class="keyword">while</span>(pre[j])</span><br><span class="line">&#123;</span><br><span class="line">i=pre[j];</span><br><span class="line"><span class="keyword">if</span>(e[i].v&lt;delta)delta=e[i].v;</span><br><span class="line">j=e[i^<span class="number">1</span>].to;</span><br><span class="line">&#125;</span><br><span class="line">ans+=delta*d[T];j=T;</span><br><span class="line"><span class="keyword">while</span>(pre[j])</span><br><span class="line">&#123;</span><br><span class="line">i=pre[j];</span><br><span class="line">e[i].v-=delta;</span><br><span class="line">e[i^<span class="number">1</span>].v+=delta;</span><br><span class="line">j=e[i^<span class="number">1</span>].to;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,x,y,v,n,m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;v);</span><br><span class="line"><span class="built_in">Addedge</span>(x,y+<span class="number">1</span>,inf,v);</span><br><span class="line">&#125;</span><br><span class="line">S=n+<span class="number">2</span>;T=n+<span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n+<span class="number">1</span>;++i)</span><br><span class="line">&#123;</span><br><span class="line">v=a[i]-a[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">if</span>(v&gt;=<span class="number">0</span>)<span class="built_in">Addedge</span>(S,i,v,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">Addedge</span>(i,T,-v,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)<span class="built_in">Addedge</span>(i+<span class="number">1</span>,i,inf,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">SPFA</span>())<span class="built_in">Adjust</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;转载自&lt;a href=&quot;https://www.byvoid.com/zhs/blog/noi-2008-employee&quot;&gt;byvoid&lt;/a&gt;&lt;br&gt;这道题正确的解法是构造网络，求网络最小费用最大流，但是模型隐藏得较深，不易想到。构造网络是该题的关键，以下面一个例子说明构图的方法和解释。&lt;/p&gt;</summary>
    
    
    
    <category term="题解" scheme="https://blog.lolifamily.js.org/oi/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="网络流" scheme="https://blog.lolifamily.js.org/oi/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>树链剖分</title>
    <link href="https://blog.lolifamily.js.org/oi/post/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
    <id>https://blog.lolifamily.js.org/oi/post/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/</id>
    <published>2018-08-09T10:42:00.000Z</published>
    <updated>2021-12-11T07:57:40.056Z</updated>
    
    <content type="html"><![CDATA[<h2 id="注意！"><a href="#注意！" class="headerlink" title="注意！"></a>注意！</h2><ul><li>如果在线段树Build的时候要初始化根节点的值，一定要用fpos！</li></ul><span id="more"></span><p>模板题:</p><ul><li><a href="/oi/post/solution-code4837/" title="solution-code4837">code4837-最大流</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;注意！&quot;&gt;&lt;a href=&quot;#注意！&quot; class=&quot;headerlink&quot; title=&quot;注意！&quot;&gt;&lt;/a&gt;注意！&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;如果在线段树Build的时候要初始化根节点的值，一定要用fpos！&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="算法" scheme="https://blog.lolifamily.js.org/oi/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="树链剖分" scheme="https://blog.lolifamily.js.org/oi/tags/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>[luogu4834]萨塔尼亚的期末考试</title>
    <link href="https://blog.lolifamily.js.org/oi/post/solution-luogu4834/"/>
    <id>https://blog.lolifamily.js.org/oi/post/solution-luogu4834/</id>
    <published>2018-08-05T05:15:27.000Z</published>
    <updated>2021-02-08T11:52:19.588Z</updated>
    
    <content type="html"><![CDATA[<p>这里有<a href="https://oeis.org/A014286">oeis</a>的解释，但是我看不懂<br>题目大意：快速地求$\begin {split}ans=\frac{\sum_{i=1}^n(i\cdot fib(i))}{\frac{n(n+1)}2}\end {split}$$\begin {split}\because \sum_{i=1}^n fib(i)&=1+fib(1)+fib(2)+\cdots+fib(n)-1 \qquad\qquad\quad [1+(-1)==0] \\& =(fib(2)+fib(1))+fib(3)+\cdots+fib(n)-1 \qquad [fib(1)==fib(2)] \\& =(fib(3)+fib(2))+fib(4)+\cdots+fib(n)-1 \qquad [fib(1)+fib(2)==fib(3)] \\& =\cdots \\& = fib(n+2)-1 \\\end {split}$$\begin {split}\therefore \sum_{i=1}^n i\cdot fib(i)&=n\sum_{i=1}^n fib(i)-\sum_{i=1}^{n-1}\sum_{j=1}^i fib(j) \\& = n(fib(n+2)-1)-\sum_{i=1}^{n-1}(fib(i+2)-1) \\& = n\cdot fib(n+2)-n-(\sum_{i=1}^{n-1}fib(i+2))+(n-1) \\& = n\cdot fib(n+2)-(\sum_{i=1}^{n+1}fib(i)-2)-1 \\& = n\cdot fib(n+2)-(fib(n+3)-1-2)-1 \\& = n\cdot fib(n+2)-fib(n+3)+2\end {split}$<br>写一个矩阵快速幂就可以解决问题，时间复杂度$\begin {split} O(T\cdot log_2(n))\end {split}$，但是不出意料的T掉了<br>观察一下结果，可以发现我们分别对ans中两个相邻的fib值进行计算，这并没有利用好矩阵乘法的性质<br>回想一下最初学习矩阵快速幂的时候，老师演算fib的时候是一个$1\times 2$的矩阵乘上$2\times 2$的矩阵，像这样：$\begin {bmatrix}fib(n)\\fib(n-1)\end {bmatrix}\begin {bmatrix}1&1\\1&0\end {bmatrix}=\begin {bmatrix}fib(n-1)\\fib(n-2)\end {bmatrix}$<br>我们用老师最初讲的方法来计算fib的值，可以节省一半的时间，在加上$2\times 2$的矩阵乘法不用for循环，就可以轻松切过这道题了～</p><p><strong>UPD</strong>: 老师最后写的方法并不是错的，在只求一次或者不相邻的项中会显得更快一些，但这并不代表我们可以忘掉原来讲的那种方法（这真的是一道好题）<br>最终的矩阵为：$\begin {bmatrix}1\\0\end {bmatrix}\begin {bmatrix}1&1\\1&0\end {bmatrix}^{n+3}$</p><span id="more"></span><h3 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h3><p>“呐，珈百璃，我说，暑假我们去哪里玩呢？”薇奈特拍拍珈百璃的肩膀<br>“哈？暑假当然是在家里打游戏啦”珈百璃无精打采地回答道<br>“怎么能这样呢？你好歹也是天使啊，给我拿出天使的样子来啊”<br>“真麻烦”<br>“所以，暑假我们去海边玩吧？”<br>“赞成赞成！去海边玩的话，就可以好好调戏珈百璃了。”菈菲尔不知道什么时候凑进来<br>“麻烦死了。”<br>这边一群人正讨论着暑假去哪玩，然而萨塔尼亚在旁边听得很纠结，因为没有人邀请她……<br>“哼哼哼哼，吾乃神魔萨塔尼亚，怎么可能主动去加入呢，我必须等她们邀请我”萨塔尼亚心理打着小算盘<br>“呐，我说，萨塔尼亚貌似有点小不开心呀”<br>“已经不是貌似了吧，她这表情完全没有掩盖的意思啊……”<br>“呐，我说，要不要邀请她去啊？”<br>拉菲尓说着，走向了萨塔尼亚。“萨塔尼亚桑，暑假我们要去海边玩哟～”<br>“哼哼哼，终于来邀请我了吗”萨塔尼亚心里有点小开心，小声嘀咕道<br>“萨塔尼亚桑就好好待在这里哟～”<br>“额……”萨塔尼亚受到了成吨的暴击，“喂，我说，哪有你这样的啊”<br>“恩？因为，萨塔尼亚桑，暑假如果要出去玩的话，就要通过期末考试哟，不然会被留下来补课的”<br>“补……补课……”萨塔尼亚貌似意会到了什么，脸色大变，“补课……呐，拉菲尓……你……你能帮我……补习吗？”<br>“恩？可以呀～但是期末考试如何就得看你自己了”<br>“谢谢，那帮我看看这些哪里错了吧？我完全不懂诶”<br>“我看看……” 拉菲尓丢下珈百璃和薇奈特独自给萨塔尼亚开始了补习。<br>终于，期末考来了，萨塔尼亚努力的这么久，就看这次考试了！经过长期的努力，期末考一切顺利，除了还没考的数学其他学科都及格啦！<br>终于到了最后一场考试——物理考试。很不错的是，萨塔尼亚已经答完了59分而且全对，但是她遇到了一道绝世难题，而且她很惊奇的发现，总分100分，这题41分，如果不写出来，就会挂科。<br>“期末考如果有某人有挂科，那么那个人的暑假要参加补课以及补考！”班主任的话萦绕在她的耳旁，这可怎么办啊……</p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>有一个由$n$个点电荷形成的电场，我们假定每个点电荷放出的电场都是匀强电场而不是点电荷电场，第i个点电荷的电场强度$E_i&#x3D;i$，现放一个带负电的试探电荷到这个电场中，这个试探电荷只要触碰到任何一个点电荷就会和这个点电荷发生聚变放出巨大能量，因为点电荷放出的电场强度不同，所以试探电荷被吸引到每个点电荷的概率也不同，点电荷给试探电荷的吸引力越大被吸到这个点电荷的概率就越大，且成正比，我们假设最小的点电荷给试探电荷的吸引力为$F$，那么对于其他点电荷给试探电荷和吸引力就是$i\cdot F$，那么假设触碰最小的点电荷的概率为$P$，则每个点的概率就是$i\cdot P$，触碰到点电荷后发出的能量为$fib(E\cdot i)$，求期望放出的能量<br>好消息是，只要这道题拿到分，萨塔尼亚就能及格啦！</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行一个整数$T$，表示$T$组测试数据<br>接下来T行每行一个整数$n$，表示有$n$个点电荷</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>对于每次询问输出一行一个整数表示期望能量，为了避免精度问题，我们输出的数都是$\mod 998244353$下的</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>样例解释：$\begin {split}\frac 13\cdot fib(1)+\frac 23\cdot fib(2)&#x3D;1\end {split}$<br>请结合样例仔细再仔细的读题！<br>对于10%的数据，$T&#x3D;1，n&#x3D;2$<br>对于30%的数据，$T\le 10，n\le 10^6$<br>对于60%的数据，$T\le 10^6，n\le 10^6$<br>对于100%的数据，$T\le 10^6，n\le 10^9$<br>$fib(i)$为斐波那契数列，$fib(1)&#x3D;fib(2)&#x3D;1,fib(n)&#x3D;fib(n-2)+fib(n-1)\quad(n\le 3)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">quickpow</span><span class="params">(LL a,LL b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LL ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(b&amp;<span class="number">1</span>)ans=(ans*a)%mod;</span><br><span class="line">a=(a*a)%mod;b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;这里有&lt;a href=&quot;https://oeis.org/A014286&quot;&gt;oeis&lt;/a&gt;的解释，但是我看不懂&lt;br&gt;题目大意：快速地求
$&#92;begin {split}
ans=&#92;frac{&#92;sum_{i=1}^n(i&#92;cdot fib(i))}{&#92;frac{n(n+1)}2}
&#92;end {split}$
$&#92;begin {split}
&#92;because &#92;sum_{i=1}^n fib(i)&amp;=1+fib(1)+fib(2)+&#92;cdots+fib(n)-1 &#92;qquad&#92;qquad&#92;quad [1+(-1)==0] &#92;&#92;
&amp; =(fib(2)+fib(1))+fib(3)+&#92;cdots+fib(n)-1 &#92;qquad [fib(1)==fib(2)] &#92;&#92;
&amp; =(fib(3)+fib(2))+fib(4)+&#92;cdots+fib(n)-1 &#92;qquad [fib(1)+fib(2)==fib(3)] &#92;&#92;
&amp; =&#92;cdots &#92;&#92;
&amp; = fib(n+2)-1 &#92;&#92;
&#92;end {split}$
$&#92;begin {split}
&#92;therefore &#92;sum_{i=1}^n i&#92;cdot fib(i)&amp;=n&#92;sum_{i=1}^n fib(i)-&#92;sum_{i=1}^{n-1}&#92;sum_{j=1}^i fib(j) &#92;&#92;
&amp; = n(fib(n+2)-1)-&#92;sum_{i=1}^{n-1}(fib(i+2)-1) &#92;&#92;
&amp; = n&#92;cdot fib(n+2)-n-(&#92;sum_{i=1}^{n-1}fib(i+2))+(n-1) &#92;&#92;
&amp; = n&#92;cdot fib(n+2)-(&#92;sum_{i=1}^{n+1}fib(i)-2)-1 &#92;&#92;
&amp; = n&#92;cdot fib(n+2)-(fib(n+3)-1-2)-1 &#92;&#92;
&amp; = n&#92;cdot fib(n+2)-fib(n+3)+2
&#92;end {split}$&lt;br&gt;写一个矩阵快速幂就可以解决问题，时间复杂度$&#92;begin {split} O(T&#92;cdot log_2(n))&#92;end {split}$，但是不出意料的T掉了&lt;br&gt;观察一下结果，可以发现我们分别对ans中两个相邻的fib值进行计算，这并没有利用好矩阵乘法的性质&lt;br&gt;回想一下最初学习矩阵快速幂的时候，老师演算fib的时候是一个$1&#92;times 2$的矩阵乘上$2&#92;times 2$的矩阵，像这样：
$&#92;begin {bmatrix}fib(n)&#92;&#92;fib(n-1)&#92;end {bmatrix}
&#92;begin {bmatrix}1&amp;1&#92;&#92;1&amp;0&#92;end {bmatrix}=
&#92;begin {bmatrix}fib(n-1)&#92;&#92;fib(n-2)&#92;end {bmatrix}$&lt;br&gt;我们用老师最初讲的方法来计算fib的值，可以节省一半的时间，在加上$2&#92;times 2$的矩阵乘法不用for循环，就可以轻松切过这道题了～&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UPD&lt;/strong&gt;: 老师最后写的方法并不是错的，在只求一次或者不相邻的项中会显得更快一些，但这并不代表我们可以忘掉原来讲的那种方法（这真的是一道好题）&lt;br&gt;最终的矩阵为：
$&#92;begin {bmatrix}1&#92;&#92;0&#92;end {bmatrix}
&#92;begin {bmatrix}1&amp;1&#92;&#92;1&amp;0&#92;end {bmatrix}^{n+3}$&lt;/p&gt;</summary>
    
    
    
    <category term="题解" scheme="https://blog.lolifamily.js.org/oi/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="unsolved" scheme="https://blog.lolifamily.js.org/oi/tags/unsolved/"/>
    
    <category term="矩阵快速幂" scheme="https://blog.lolifamily.js.org/oi/tags/%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    
  </entry>
  
  <entry>
    <title>NTT用到的各种素数</title>
    <link href="https://blog.lolifamily.js.org/oi/post/NTT-prime/"/>
    <id>https://blog.lolifamily.js.org/oi/post/NTT-prime/</id>
    <published>2018-08-04T12:20:34.000Z</published>
    <updated>2021-02-08T11:52:19.604Z</updated>
    
    <content type="html"><![CDATA[<p>转载自 <a href="http://blog.miskcoo.com/2014/07/fft-prime-table">miskcoo</a><br>是这样的，这几天在写NTT，由于是在模意义下的，需要各种素数……<br>然后就打了个表方便以后查了<br>如果$r(2k+1)$是个素数，那么在$\mod r(2k+1)$意义下，可以处理$2k$以内规模的数据，<br>$2281701377&#x3D;17\times 227+1$是一个挺好的数，平方刚好不会爆 long long<br>$1004535809&#x3D;479\times 221+1$加起来刚好不会爆 int 也不错<br>还有就是UOJ常用的$998244353&#x3D;119\times 223+1$<br>打表方法:对于每个$k$，找到最小r满足$r(2k+1)$是素数（g是$\mod r(2k+1)$的原根）</p><span id="more"></span><table><thead><tr><th>$r(2k+1)$</th><th>$r$</th><th>$k$</th><th>$g$</th></tr></thead><tbody><tr><td>3</td><td>1</td><td>1</td><td>2</td></tr><tr><td>5</td><td>1</td><td>2</td><td>2</td></tr><tr><td>17</td><td>1</td><td>4</td><td>3</td></tr><tr><td>97</td><td>3</td><td>5</td><td>5</td></tr><tr><td>193</td><td>3</td><td>6</td><td>5</td></tr><tr><td>257</td><td>1</td><td>8</td><td>3</td></tr><tr><td>7681</td><td>15</td><td>9</td><td>17</td></tr><tr><td>12289</td><td>3</td><td>12</td><td>11</td></tr><tr><td>40961</td><td>5</td><td>13</td><td>3</td></tr><tr><td>65537</td><td>1</td><td>16</td><td>3</td></tr><tr><td>786433</td><td>3</td><td>18</td><td>10</td></tr><tr><td>5767169</td><td>11</td><td>19</td><td>3</td></tr><tr><td>7340033</td><td>7</td><td>20</td><td>3</td></tr><tr><td>23068673</td><td>11</td><td>21</td><td>3</td></tr><tr><td>104857601</td><td>25</td><td>22</td><td>3</td></tr><tr><td>167772161</td><td>5</td><td>25</td><td>3</td></tr><tr><td>469762049</td><td>7</td><td>26</td><td>3</td></tr><tr><td>998244353</td><td>119</td><td>23</td><td>3</td></tr><tr><td>1004535809</td><td>479</td><td>21</td><td>3</td></tr><tr><td>2013265921</td><td>15</td><td>27</td><td>31</td></tr><tr><td>2281701377</td><td>17</td><td>27</td><td>3</td></tr><tr><td>3221225473</td><td>3</td><td>30</td><td>5</td></tr><tr><td>75161927681</td><td>35</td><td>31</td><td>3</td></tr><tr><td>77309411329</td><td>9</td><td>33</td><td>7</td></tr><tr><td>206158430209</td><td>3</td><td>36</td><td>22</td></tr><tr><td>2061584302081</td><td>15</td><td>37</td><td>7</td></tr><tr><td>2748779069441</td><td>5</td><td>39</td><td>3</td></tr><tr><td>6597069766657</td><td>3</td><td>41</td><td>5</td></tr><tr><td>39582418599937</td><td>9</td><td>42</td><td>5</td></tr><tr><td>79164837199873</td><td>9</td><td>43</td><td>5</td></tr><tr><td>263882790666241</td><td>15</td><td>44</td><td>7</td></tr><tr><td>1231453023109121</td><td>35</td><td>45</td><td>3</td></tr><tr><td>1337006139375617</td><td>19</td><td>46</td><td>3</td></tr><tr><td>3799912185593857</td><td>27</td><td>47</td><td>5</td></tr><tr><td>4222124650659841</td><td>15</td><td>48</td><td>19</td></tr><tr><td>7881299347898369</td><td>7</td><td>50</td><td>6</td></tr><tr><td>31525197391593473</td><td>7</td><td>52</td><td>3</td></tr><tr><td>180143985094819841</td><td>5</td><td>55</td><td>6</td></tr><tr><td>1945555039024054273</td><td>27</td><td>56</td><td>5</td></tr><tr><td>4179340454199820289</td><td>29</td><td>57</td><td>3</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;转载自 &lt;a href=&quot;http://blog.miskcoo.com/2014/07/fft-prime-table&quot;&gt;miskcoo&lt;/a&gt;&lt;br&gt;是这样的，这几天在写NTT，由于是在模意义下的，需要各种素数……&lt;br&gt;然后就打了个表方便以后查了&lt;br&gt;如果$r(2k+1)$是个素数，那么在$&#92;mod r(2k+1)$意义下，可以处理$2k$以内规模的数据，&lt;br&gt;$2281701377&amp;#x3D;17&#92;times 227+1$是一个挺好的数，平方刚好不会爆 long long&lt;br&gt;$1004535809&amp;#x3D;479&#92;times 221+1$加起来刚好不会爆 int 也不错&lt;br&gt;还有就是UOJ常用的$998244353&amp;#x3D;119&#92;times 223+1$&lt;br&gt;打表方法:对于每个$k$，找到最小r满足$r(2k+1)$是素数（g是$&#92;mod r(2k+1)$的原根）&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="https://blog.lolifamily.js.org/oi/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数论" scheme="https://blog.lolifamily.js.org/oi/tags/%E6%95%B0%E8%AE%BA/"/>
    
    <category term="NTT" scheme="https://blog.lolifamily.js.org/oi/tags/NTT/"/>
    
  </entry>
  
  <entry>
    <title>搜索</title>
    <link href="https://blog.lolifamily.js.org/oi/post/search/"/>
    <id>https://blog.lolifamily.js.org/oi/post/search/</id>
    <published>2018-07-24T00:37:05.000Z</published>
    <updated>2021-02-08T11:52:19.588Z</updated>
    
    <content type="html"><![CDATA[<h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><ul><li>空</li></ul><h2 id="可行性剪枝"><a href="#可行性剪枝" class="headerlink" title="可行性剪枝:"></a>可行性剪枝:</h2><h2 id="最优性剪枝"><a href="#最优性剪枝" class="headerlink" title="最优性剪枝:"></a>最优性剪枝:</h2><h2 id="状态压缩"><a href="#状态压缩" class="headerlink" title="状态压缩:"></a>状态压缩:</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;注意：&quot;&gt;&lt;a href=&quot;#注意：&quot; class=&quot;headerlink&quot; title=&quot;注意：&quot;&gt;&lt;/a&gt;注意：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;空&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;可行性剪枝&quot;&gt;&lt;a href=&quot;#可行性剪枝&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="算法" scheme="https://blog.lolifamily.js.org/oi/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="搜索" scheme="https://blog.lolifamily.js.org/oi/tags/%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>Splay</title>
    <link href="https://blog.lolifamily.js.org/oi/post/Splay/"/>
    <id>https://blog.lolifamily.js.org/oi/post/Splay/</id>
    <published>2018-06-30T23:05:09.000Z</published>
    <updated>2021-02-08T11:52:19.604Z</updated>
    
    <content type="html"><![CDATA[<p>一个既简单又难写的算法<br>注意：</p><ul><li>空</li></ul><span id="more"></span><h2 id="下载讲义"><a href="#下载讲义" class="headerlink" title="下载讲义"></a>下载讲义</h2><p><a href="/upload/Splay.pdf">Splay.pdf</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;一个既简单又难写的算法&lt;br&gt;注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;空&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="算法" scheme="https://blog.lolifamily.js.org/oi/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="平衡树" scheme="https://blog.lolifamily.js.org/oi/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
    <category term="Splay" scheme="https://blog.lolifamily.js.org/oi/tags/Splay/"/>
    
  </entry>
  
  <entry>
    <title>[CodeForces1000]G. Two-Paths</title>
    <link href="https://blog.lolifamily.js.org/oi/post/solution-CF1000G/"/>
    <id>https://blog.lolifamily.js.org/oi/post/solution-CF1000G/</id>
    <published>2018-06-28T06:39:14.000Z</published>
    <updated>2021-02-08T11:52:19.604Z</updated>
    
    <content type="html"><![CDATA[<p>作为压轴题，题目描述很长、很难理解<br>还没写好 QwQ</p><span id="more"></span><h2 id="G-Two-Paths"><a href="#G-Two-Paths" class="headerlink" title="G. Two-Paths"></a><center>G. Two-Paths</center></h2><center>time limit per test:3.5 seconds</center><center>memory limit per test:256 megabytes</center><center>input:standard input</center><center>output:standard output</center><p>You are given a weighted tree (undirected connected graph with no cycles, loops or multiple edges) with $$$n$$$ vertices. The edge $$${u_j, v_j}$$$ has weight $$$w_j$$$. Also each vertex $$$i$$$ has its own value $$$a_i$$$ assigned to it.</p><p>Let’s call a path starting in vertex $$$u$$$ and ending in vertex $$$v$$$, where each edge can appear no more than twice (regardless of direction), a 2-path. Vertices can appear in the 2-path multiple times (even start and end vertices).</p><p>For some 2-path $$$p$$$ profit $$$\text{Pr}(p) &#x3D; \sum\limits_{v \in \text{distinct vertices in } p}{a_v} - \sum\limits_{e \in \text{distinct edges in } p}{k_e \cdot w_e}$$$, where $$$k_e$$$ is the number of times edge $$$e$$$ appears in $$$p$$$. That is, vertices are counted once, but edges are counted the number of times they appear in $$$p$$$.</p><p>You are about to answer $$$m$$$ queries. Each query is a pair of vertices $$$(qu, qv)$$$. For each query find 2-path $$$p$$$ from $$$qu$$$ to $$$qv$$$ with maximal profit $$$\text{Pr}(p)$$$.</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>The first line contains two integers $$$n$$$ and $$$q$$$ ($$$2 \le n \le 3 \cdot 10^5$$$, $$$1 \le q \le 4 \cdot 10^5$$$) — the number of vertices in the tree and the number of queries.</p><p>The second line contains $$$n$$$ space-separated integers $$$a_1, a_2, \dots, a_n$$$ $$$(1 \le a_i \le 10^9)$$$ — the values of the vertices.</p><p>Next $$$n - 1$$$ lines contain descriptions of edges: each line contains three space separated integers $$$u_i$$$, $$$v_i$$$ and $$$w_i$$$ ($$$1 \le u_i, v_i \le n$$$, $$$u_i \neq v_i$$$, $$$1 \le w_i \le 10^9$$$) — there is edge $$${u_i, v_i}$$$ with weight $$$w_i$$$ in the tree.</p><p>Next $$$q$$$ lines contain queries (one per line). Each query contains two integers $$$qu_i$$$ and $$$qv_i$$$ $$$(1 \le qu_i, qv_i \le n)$$$ — endpoints of the 2-path you need to find.</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>For each query print one integer per line — maximal profit $$$\text{Pr}(p)$$$ of the some 2-path $$$p$$$ with the corresponding endpoints.</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><h4 id="input"><a href="#input" class="headerlink" title="input"></a>input</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">7 6</span><br><span class="line">6 5 5 3 2 1 2</span><br><span class="line">1 2 2</span><br><span class="line">2 3 2</span><br><span class="line">2 4 1</span><br><span class="line">4 5 1</span><br><span class="line">6 4 2</span><br><span class="line">7 3 25</span><br><span class="line">1 1</span><br><span class="line">4 4</span><br><span class="line">5 6</span><br><span class="line">6 4</span><br><span class="line">3 4</span><br><span class="line">3 7</span><br></pre></td></tr></table></figure><h4 id="output"><a href="#output" class="headerlink" title="output"></a>output</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">9</span><br><span class="line">9</span><br><span class="line">9</span><br><span class="line">8</span><br><span class="line">12</span><br><span class="line">-14</span><br></pre></td></tr></table></figure><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><p>Explanation of queries:</p><p>$$$(1, 1)$$$ — one of the optimal 2-paths is the following: $$$1 \rightarrow 2 \rightarrow 4 \rightarrow 5 \rightarrow 4 \rightarrow 2 \rightarrow 3 \rightarrow 2 \rightarrow 1$$$. $$$\text{Pr}(p) &#x3D; (a_1 + a_2 + a_3 + a_4 + a_5) - (2 \cdot w(1,2) + 2 \cdot w(2,3) + 2 \cdot w(2,4) + 2 \cdot w(4,5)) &#x3D; 21 - 2 \cdot 12 &#x3D; 9$$$.<br>$$$(4, 4)$$$: $$$4 \rightarrow 2 \rightarrow 1 \rightarrow 2 \rightarrow 3 \rightarrow 2 \rightarrow 4$$$. $$$\text{Pr}(p) &#x3D; (a_1 + a_2 + a_3 + a_4) - 2 \cdot (w(1,2) + w(2,3) + w(2,4)) &#x3D; 19 - 2 \cdot 10 &#x3D; 9$$$.<br>$$$(5, 6)$$$: $$$5 \rightarrow 4 \rightarrow 2 \rightarrow 3 \rightarrow 2 \rightarrow 1 \rightarrow 2 \rightarrow 4 \rightarrow 6$$$.<br>$$$(6, 4)$$$: $$$6 \rightarrow 4 \rightarrow 2 \rightarrow 1 \rightarrow 2 \rightarrow 3 \rightarrow 2 \rightarrow 4$$$.<br>$$$(3, 4)$$$: $$$3 \rightarrow 2 \rightarrow 1 \rightarrow 2 \rightarrow 4$$$.<br>$$$(3, 7)$$$: $$$3 \rightarrow 2 \rightarrow 1 \rightarrow 2 \rightarrow 4 \rightarrow 5 \rightarrow 4 \rightarrow 2 \rightarrow 3 \rightarrow 7$$$.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;还没写好 QwQ\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;作为压轴题，题目描述很长、很难理解&lt;br&gt;还没写好 QwQ&lt;/p&gt;</summary>
    
    
    
    <category term="题解" scheme="https://blog.lolifamily.js.org/oi/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="unsolved" scheme="https://blog.lolifamily.js.org/oi/tags/unsolved/"/>
    
    <category term="LCA" scheme="https://blog.lolifamily.js.org/oi/tags/LCA/"/>
    
  </entry>
  
  <entry>
    <title>[CodeForces1000]F. One Occurrence</title>
    <link href="https://blog.lolifamily.js.org/oi/post/solution-CF1000F/"/>
    <id>https://blog.lolifamily.js.org/oi/post/solution-CF1000F/</id>
    <published>2018-06-28T06:39:11.000Z</published>
    <updated>2021-02-08T11:52:19.604Z</updated>
    
    <content type="html"><![CDATA[<p>一道有意思的线段树题目，维护一个pair值（下一个元素的位置,权值）对其维护最大值（就是影响越持久）<br>把问题离线处理，按照问题的右端点排序，这样就能满足单调性<br>输出的时候一定要判断一下first的值是否符合要求<br>注意：</p><ul><li>这棵线段树维护的是最大值，不管是<strong>修改</strong>还是查询都需要取max</li><li>如果没有nxt，数组的值要赋值为n+1</li></ul><span id="more"></span><h2 id="F-One-Occurrence"><a href="#F-One-Occurrence" class="headerlink" title="F. One Occurrence"></a><center>F. One Occurrence</center></h2><center>time limit per test:3 seconds</center><center>memory limit per test:768 megabytes</center><center>input:standard input</center><center>output:standard output</center><p>You are given an array $$$a$$$ consisting of $$$n$$$ integers, and $$$q$$$ queries to it. $$$i$$$-th query is denoted by two integers $$$l_i$$$ and $$$r_i$$$. For each query, you have to <strong>find</strong> any integer that occurs <strong>exactly once</strong> in the subarray of $$$a$$$ from index $$$l_i$$$ to index $$$r_i$$$ (a subarray is a contiguous subsegment of an array). For example, if $$$a &#x3D; [1, 1, 2, 3, 2, 4]$$$, then for query $$$(l_i &#x3D; 2, r_i &#x3D; 6)$$$ the subarray we are interested in is $$$[1, 2, 3, 2, 4]$$$, and possible answers are $$$1$$$, $$$3$$$ and $$$4$$$; for query $$$(l_i &#x3D; 1, r_i &#x3D; 2)$$$ the subarray we are interested in is $$$[1, 1]$$$, and there is no such element that occurs exactly once.</p><p>Can you answer all of the queries?</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>The first line contains one integer $$$n$$$ ($$$1 \le n \le 5 \cdot 10^5$$$).</p><p>The second line contains $$$n$$$ integers $$$a_1, a_2, \dots, a_n$$$ ($$$1 \le a_i \le 5 \cdot 10^5$$$).</p><p>The third line contains one integer $$$q$$$ ($$$1 \le q \le 5 \cdot 10^5$$$).</p><p>Then $$$q$$$ lines follow, $$$i$$$-th line containing two integers $$$l_i$$$ and $$$r_i$$$ representing $$$i$$$-th query ($$$1 \le l_i \le r_i \le n$$$).</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>Answer the queries as follows:</p><p>If there is no integer such that it occurs in the subarray from index $$$l_i$$$ to index $$$r_i$$$ exactly once, print $$$0$$$. Otherwise print any such integer.</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><h4 id="input"><a href="#input" class="headerlink" title="input"></a>input</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">1 1 2 3 2 4</span><br><span class="line">2</span><br><span class="line">2 6</span><br><span class="line">1 2</span><br></pre></td></tr></table></figure><h4 id="output"><a href="#output" class="headerlink" title="output"></a>output</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">0</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3F3F3F3F</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;pii;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> L,R,id;</span><br><span class="line">&#125;b[<span class="number">500005</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Tree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> L,R;</span><br><span class="line">pii val;</span><br><span class="line">&#125;T[<span class="number">2000005</span>];</span><br><span class="line"><span class="type">int</span> a[<span class="number">500005</span>],pre[<span class="number">500005</span>],nxt[<span class="number">500005</span>],h[<span class="number">500005</span>],ans[<span class="number">500005</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Modify</span><span class="params">(<span class="type">int</span> L,<span class="type">int</span> R,pii val,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L&gt;T[v].R||R&lt;T[v].L)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=T[v].L&amp;&amp;R&gt;=T[v].R)</span><br><span class="line">&#123;</span><br><span class="line">T[v].val=<span class="built_in">max</span>(T[v].val,val);<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Modify</span>(L,R,val,v&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="built_in">Modify</span>(L,R,val,(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> pii <span class="title">Query</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&gt;T[v].R||x&lt;T[v].L)<span class="keyword">return</span> <span class="built_in">make_pair</span>(-inf,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(T[v].L==T[v].R)<span class="keyword">return</span> T[v].val;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">max</span>(T[v].val,<span class="built_in">max</span>(<span class="built_in">Query</span>(x,v&lt;&lt;<span class="number">1</span>),<span class="built_in">Query</span>(x,(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Build</span><span class="params">(<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T[v].L=L;T[v].R=R;</span><br><span class="line">T[v].val=<span class="built_in">make_pair</span>(-inf,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(L==R)<span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> mid=(L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">Build</span>(L,mid,v&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="built_in">Build</span>(mid+<span class="number">1</span>,R,(v&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> Node&amp; a,<span class="type">const</span> Node&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.R&lt;b.R;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,j=<span class="number">1</span>,n,m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!h[a[i]])pre[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> pre[i]=h[a[i]];</span><br><span class="line">h[a[i]]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(h,<span class="number">0</span>,<span class="built_in">sizeof</span>(h));</span><br><span class="line"><span class="keyword">for</span>(i=n;i&gt;=<span class="number">1</span>;--i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!h[a[i]])nxt[i]=n+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> nxt[i]=h[a[i]];</span><br><span class="line">h[a[i]]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;b[i].L,&amp;b[i].R);</span><br><span class="line">b[i].id=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(b+<span class="number">1</span>,b+m+<span class="number">1</span>,cmp);</span><br><span class="line"><span class="built_in">Build</span>(<span class="number">1</span>,n+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(j&lt;=b[i].R)<span class="built_in">Modify</span>(pre[j]+<span class="number">1</span>,j,<span class="built_in">make_pair</span>(nxt[j],a[j]),<span class="number">1</span>),++j;</span><br><span class="line">pii tmp=<span class="built_in">Query</span>(b[i].L,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(tmp.first&gt;=j)ans[b[i].id]=tmp.second;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;++i)<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;一道有意思的线段树题目，维护一个pair值（下一个元素的位置,权值）对其维护最大值（就是影响越持久）&lt;br&gt;把问题离线处理，按照问题的右端点排序，这样就能满足单调性&lt;br&gt;输出的时候一定要判断一下first的值是否符合要求&lt;br&gt;注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这棵线段树维护的是最大值，不管是&lt;strong&gt;修改&lt;/strong&gt;还是查询都需要取max&lt;/li&gt;
&lt;li&gt;如果没有nxt，数组的值要赋值为n+1&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="题解" scheme="https://blog.lolifamily.js.org/oi/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="线段树" scheme="https://blog.lolifamily.js.org/oi/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>[CodeForces1000]E. We Need More Bosses</title>
    <link href="https://blog.lolifamily.js.org/oi/post/solution-CF1000E/"/>
    <id>https://blog.lolifamily.js.org/oi/post/solution-CF1000E/</id>
    <published>2018-06-28T06:39:07.000Z</published>
    <updated>2021-02-08T11:52:19.604Z</updated>
    
    <content type="html"><![CDATA[<p>无向图求割边的模板题，缩点后建立新图DP一下就可以了<br>对于每条割边，答案都可以为<code>dp[x]+1+dp[y]</code>，然后<code>dp[x]=dp[y]+1</code>（合并x和y）<br>只需要注意e1、e2的区别和h1、h2的区别就行了</p><span id="more"></span><h2 id="E-We-Need-More-Bosses"><a href="#E-We-Need-More-Bosses" class="headerlink" title="E. We Need More Bosses"></a><center>E. We Need More Bosses</center></h2><center>time limit per test:2 seconds</center><center>memory limit per test:256 megabytes</center><center>input:standard input</center><center>output:standard output</center><p>Your friend is developing a computer game. He has already decided how the game world should look like — it should consist of $$$n$$$ locations connected by $$$m$$$ <strong>two-way</strong> passages. The passages are designed in such a way that it should be possible to get from any location to any other location.</p><p>Of course, some passages should be guarded by the monsters (if you just can go everywhere without any difficulties, then it’s not fun, right?). Some crucial passages will be guarded by really fearsome monsters, requiring the hero to prepare for battle and designing his own tactics of defeating them (commonly these kinds of monsters are called <strong>bosses</strong>). And your friend wants you to help him place these bosses.</p><p>The game will start in location $$$s$$$ and end in location $$$t$$$, but these locations are not chosen yet. After choosing these locations, your friend will place a boss in each passage such that it is impossible to get from $$$s$$$ to $$$t$$$ without using this passage. Your friend wants to place as much bosses as possible (because more challenges means more fun, right?), so he asks you to help him determine the maximum possible number of bosses, considering that any location can be chosen as $$$s$$$ or as $$$t$$$.</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>The first line contains two integers $$$n$$$ and $$$m$$$ ($$$2 \le n \le 3 \cdot 10^5$$$, $$$n - 1 \le m \le 3 \cdot 10^5$$$) — the number of locations and passages, respectively.</p><p>Then $$$m$$$ lines follow, each containing two integers $$$x$$$ and $$$y$$$ ($$$1 \le x, y \le n$$$, $$$x \ne y$$$) describing the endpoints of one of the passages.</p><p>It is guaranteed that there is no pair of locations directly connected by two or more passages, and that any location is reachable from any other location.</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>Print one integer — the maximum number of bosses your friend can place, considering all possible choices for $$$s$$$ and $$$t$$$.</p><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><h4 id="input"><a href="#input" class="headerlink" title="input"></a>input</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5 5</span><br><span class="line">1 2</span><br><span class="line">2 3</span><br><span class="line">3 1</span><br><span class="line">4 1</span><br><span class="line">5 2</span><br></pre></td></tr></table></figure><h4 id="output"><a href="#output" class="headerlink" title="output"></a>output</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><h4 id="input-1"><a href="#input-1" class="headerlink" title="input"></a>input</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">4 3</span><br><span class="line">1 2</span><br><span class="line">4 3</span><br><span class="line">3 2</span><br></pre></td></tr></table></figure><h4 id="output-1"><a href="#output-1" class="headerlink" title="output"></a>output</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> to,next;</span><br><span class="line">&#125;e1[<span class="number">600005</span>],e2[<span class="number">600005</span>];</span><br><span class="line"><span class="type">int</span> low[<span class="number">300005</span>],dfn[<span class="number">300005</span>],h1[<span class="number">300005</span>],h2[<span class="number">300005</span>],belong[<span class="number">300005</span>],f[<span class="number">300005</span>],cnt1,cnt2,sign,ans,SCC;</span><br><span class="line">stack&lt;<span class="type">int</span>&gt;s;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Addedge1</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e1[++cnt1]=(Node)&#123;y,h1[x]&#125;;h1[x]=cnt1;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Addedge2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e2[++cnt2]=(Node)&#123;y,h2[x]&#125;;h2[x]=cnt2;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Tarjan</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,y,tmp;</span><br><span class="line">low[x]=dfn[x]=++sign;</span><br><span class="line">s.<span class="built_in">push</span>(x);</span><br><span class="line"><span class="keyword">for</span>(i=h1[x];i;i=e1[i].next)</span><br><span class="line">&#123;</span><br><span class="line">y=e1[i].to;</span><br><span class="line"><span class="keyword">if</span>(y==pre)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(!dfn[y])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Tarjan</span>(y,x);</span><br><span class="line">low[x]=<span class="built_in">min</span>(low[x],low[y]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> low[x]=<span class="built_in">min</span>(low[x],dfn[y]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(low[x]==dfn[x])</span><br><span class="line">&#123;</span><br><span class="line">++SCC;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">tmp=s.<span class="built_in">top</span>();s.<span class="built_in">pop</span>();</span><br><span class="line">belong[tmp]=SCC;</span><br><span class="line">&#125;<span class="keyword">while</span>(tmp!=x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,y;</span><br><span class="line"><span class="keyword">for</span>(i=h2[x];i;i=e2[i].next)</span><br><span class="line">&#123;</span><br><span class="line">y=e2[i].to;</span><br><span class="line"><span class="keyword">if</span>(y==pre)<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs</span>(y,x);</span><br><span class="line">ans=<span class="built_in">max</span>(ans,f[x]+f[y]+<span class="number">1</span>);</span><br><span class="line">f[x]=<span class="built_in">max</span>(f[x],f[y]+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,x,y,n,m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line"><span class="built_in">Addedge1</span>(x,y);</span><br><span class="line"><span class="built_in">Addedge1</span>(y,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Tarjan</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(x=<span class="number">1</span>;x&lt;=n;++x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i=h1[x];i;i=e1[i].next)</span><br><span class="line">&#123;</span><br><span class="line">y=e1[i].to;</span><br><span class="line"><span class="keyword">if</span>(belong[x]==belong[y])<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">Addedge2</span>(belong[x],belong[y]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;无向图求割边的模板题，缩点后建立新图DP一下就可以了&lt;br&gt;对于每条割边，答案都可以为&lt;code&gt;dp[x]+1+dp[y]&lt;/code&gt;，然后&lt;code&gt;dp[x]=dp[y]+1&lt;/code&gt;（合并x和y）&lt;br&gt;只需要注意e1、e2的区别和h1、h2的区别就行了&lt;/p&gt;</summary>
    
    
    
    <category term="题解" scheme="https://blog.lolifamily.js.org/oi/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="DP" scheme="https://blog.lolifamily.js.org/oi/tags/DP/"/>
    
    <category term="无向图的连通性" scheme="https://blog.lolifamily.js.org/oi/tags/%E6%97%A0%E5%90%91%E5%9B%BE%E7%9A%84%E8%BF%9E%E9%80%9A%E6%80%A7/"/>
    
  </entry>
  
</feed>
